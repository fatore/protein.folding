/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 * 
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 * 
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package visualizer.graph.coodination;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import visualizer.projection.ProjectionData;
import visualizer.projection.distance.DissimilarityType;
import visualizer.textprocessing.transformation.MatrixTransformationType;
import visualizer.textprocessing.stemmer.StemmerType;
import visualizer.util.OpenDialog;
import visualizer.view.Viewer;

/**
 *
 * @author  Fernando Vieira Paulovich
 */
public class ParametersDistanceMapping extends javax.swing.JDialog {

    /** Creates new form ParametersDistanceMapping */
    private ParametersDistanceMapping(java.awt.Dialog parent) {
        super(parent);
        this.setModal(true);
        initComponents();

        for (DissimilarityType disstype : DissimilarityType.getTypes()) {
            if (disstype != DissimilarityType.KOLMOGOROV && disstype != DissimilarityType.NONE) {
                this.distanceComboBox.addItem(disstype);
            }
        }

        for (StemmerType st : StemmerType.getTypes()) {
            this.stemmerComboBox1.addItem(st);
            this.stemmerComboBox2.addItem(st);
        }

        for (MatrixTransformationType mtt : MatrixTransformationType.getTypes()) {
            this.matrixtransfComboBox1.addItem(mtt);
            this.matrixtransfComboBox2.addItem(mtt);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tfidf1buttonGroup = new javax.swing.ButtonGroup();
        tfidf2buttonGroup = new javax.swing.ButtonGroup();
        parametersPanel = new javax.swing.JPanel();
        chooseDistanceTypePanel = new javax.swing.JPanel();
        distanceComboBox = new javax.swing.JComboBox();
        projPanel2 = new javax.swing.JPanel();
        preProcessingPanel2 = new javax.swing.JPanel();
        luhnLabel2 = new javax.swing.JLabel();
        gramsComboBox2 = new javax.swing.JComboBox();
        gramsLabel2 = new javax.swing.JLabel();
        luhnLowerTextField2 = new javax.swing.JTextField();
        luhnUpperLabel2 = new javax.swing.JLabel();
        luhnUpperTextField2 = new javax.swing.JTextField();
        stemmerComboBox2 = new javax.swing.JComboBox();
        matrixTypePanel2 = new javax.swing.JPanel();
        matrixtransfComboBox2 = new javax.swing.JComboBox();
        projPanel1 = new javax.swing.JPanel();
        preProcessingPanel1 = new javax.swing.JPanel();
        luhnLabel1 = new javax.swing.JLabel();
        gramsComboBox1 = new javax.swing.JComboBox();
        gramsLabel1 = new javax.swing.JLabel();
        luhnLowerTextField1 = new javax.swing.JTextField();
        luhnUpperLabel1 = new javax.swing.JLabel();
        luhnUpperTextField1 = new javax.swing.JTextField();
        stemmerComboBox1 = new javax.swing.JComboBox();
        matrixTypePanel1 = new javax.swing.JPanel();
        matrixtransfComboBox1 = new javax.swing.JComboBox();
        nrNeighborsPanel = new javax.swing.JPanel();
        knnConnectivityLabel = new javax.swing.JLabel();
        knnConnectivityComboBox = new javax.swing.JComboBox();
        buttonPanel = new javax.swing.JPanel();
        createButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mapping Parameters");

        parametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Distance Mapping Parameters"));
        parametersPanel.setLayout(new java.awt.GridBagLayout());

        chooseDistanceTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose the Distance Type"));
        chooseDistanceTypePanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 3);
        chooseDistanceTypePanel.add(distanceComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parametersPanel.add(chooseDistanceTypePanel, gridBagConstraints);

        projPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Projection 2"));
        projPanel2.setLayout(new java.awt.GridBagLayout());

        preProcessingPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));
        preProcessingPanel2.setLayout(new java.awt.GridBagLayout());

        luhnLabel2.setText("Luhn's lower cut");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel2.add(luhnLabel2, gridBagConstraints);

        gramsComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel2.add(gramsComboBox2, gridBagConstraints);

        gramsLabel2.setText("Number of grams");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel2.add(gramsLabel2, gridBagConstraints);

        luhnLowerTextField2.setColumns(5);
        luhnLowerTextField2.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel2.add(luhnLowerTextField2, gridBagConstraints);

        luhnUpperLabel2.setText("Luhn's upper cut");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel2.add(luhnUpperLabel2, gridBagConstraints);

        luhnUpperTextField2.setColumns(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel2.add(luhnUpperTextField2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel2.add(stemmerComboBox2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        projPanel2.add(preProcessingPanel2, gridBagConstraints);

        matrixTypePanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Matrix Transformation"));
        matrixTypePanel2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        matrixTypePanel2.add(matrixtransfComboBox2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        projPanel2.add(matrixTypePanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        parametersPanel.add(projPanel2, gridBagConstraints);

        projPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Projection 1"));
        projPanel1.setLayout(new java.awt.GridBagLayout());

        preProcessingPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));
        preProcessingPanel1.setLayout(new java.awt.GridBagLayout());

        luhnLabel1.setText("Luhn's lower cut");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel1.add(luhnLabel1, gridBagConstraints);

        gramsComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel1.add(gramsComboBox1, gridBagConstraints);

        gramsLabel1.setText("Number of grams");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel1.add(gramsLabel1, gridBagConstraints);

        luhnLowerTextField1.setColumns(5);
        luhnLowerTextField1.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel1.add(luhnLowerTextField1, gridBagConstraints);

        luhnUpperLabel1.setText("Luhn's upper cut");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel1.add(luhnUpperLabel1, gridBagConstraints);

        luhnUpperTextField1.setColumns(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel1.add(luhnUpperTextField1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel1.add(stemmerComboBox1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        projPanel1.add(preProcessingPanel1, gridBagConstraints);

        matrixTypePanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Matrix Transformation"));
        matrixTypePanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        matrixTypePanel1.add(matrixtransfComboBox1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        projPanel1.add(matrixTypePanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        parametersPanel.add(projPanel1, gridBagConstraints);

        nrNeighborsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Number Neighbors"));

        knnConnectivityLabel.setText("Number Neighbors");
        nrNeighborsPanel.add(knnConnectivityLabel);

        knnConnectivityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        knnConnectivityComboBox.setSelectedIndex(1);
        nrNeighborsPanel.add(knnConnectivityComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        parametersPanel.add(nrNeighborsPanel, gridBagConstraints);

        getContentPane().add(parametersPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(createButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        try {
            ProjectionData pData1 = (ProjectionData) this.local.getGraph().getProjectionData().clone();
            ProjectionData pData2 = (ProjectionData) this.outer.getGraph().getProjectionData().clone();

            this.refreshData(pData1, pData2);

            if (OpenDialog.checkCorpus(this.local.getGraph(), this.projPanel1) &&
                    OpenDialog.checkCorpus(this.outer.getGraph(), this.projPanel2)) {
                int nrNeighbors = this.knnConnectivityComboBox.getSelectedIndex() + 1;

                try {
                    DistanceMapping mapping = new DistanceMapping(pData1, pData2,
                            nrNeighbors, this.local, this.outer);
                    this.local.getCoordination().addToCoordinate(mapping);
                    this.local.updateCoordinations(null);

                    this.setVisible(false);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(),
                            "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (CloneNotSupportedException ex) {
            Logger.getLogger(ParametersDistanceMapping.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_createButtonActionPerformed

    public static ParametersDistanceMapping getInstance(javax.swing.JDialog parent) {
        return new ParametersDistanceMapping(parent);
    }

    public void display(Viewer local, Viewer outer) {
        this.local = local;
        this.outer = outer;

        this.setData(local.getGraph().getProjectionData(),
                outer.getGraph().getProjectionData());

        this.projPanel1.setBorder(BorderFactory.createTitledBorder("Projection [" + local.getId() + "]"));
        this.projPanel2.setBorder(BorderFactory.createTitledBorder("Projection [" + outer.getId() + "]"));

        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    public void setData(ProjectionData pData1, ProjectionData pData2) {
        this.stemmerComboBox1.setSelectedItem(pData1.getStemmer());
        this.luhnLowerTextField1.setText(Integer.toString(pData1.getLunhLowerCut()));
        this.matrixtransfComboBox1.setSelectedItem(pData1.getMatrixTransformationType());
        this.gramsComboBox1.setSelectedIndex(pData1.getNumberGrams() - 1);

        if (pData1.getLunhUpperCut() > 0) {
            this.luhnUpperTextField1.setText(Integer.toString(pData1.getLunhUpperCut()));
        } else {
            this.luhnUpperTextField1.setText("");
        }

        this.stemmerComboBox2.setSelectedItem(pData2.getStemmer());
        this.luhnLowerTextField2.setText(Integer.toString(pData2.getLunhLowerCut()));
        this.matrixtransfComboBox2.setSelectedItem(pData2.getMatrixTransformationType());
        this.gramsComboBox2.setSelectedIndex(pData2.getNumberGrams() - 1);

        if (pData2.getLunhUpperCut() > 0) {
            this.luhnUpperTextField2.setText(Integer.toString(pData2.getLunhUpperCut()));
        } else {
            this.luhnUpperTextField2.setText("");
        }
    }

    public void refreshData(ProjectionData pData1, ProjectionData pData2) {
        pData1.setStemmer((StemmerType) this.stemmerComboBox1.getSelectedItem());
        pData1.setUseStopword(true);
        pData1.setUseWeight(false);
        pData1.setLunhLowerCut(Integer.parseInt(this.luhnLowerTextField1.getText()));
        pData1.setMatrixTransformationType((MatrixTransformationType) this.matrixtransfComboBox1.getSelectedItem());
        pData1.setNumberGrams(this.gramsComboBox1.getSelectedIndex() + 1);

        if (this.luhnUpperTextField1.getText().trim().length() > 0) {
            pData1.setLunhUpperCut(Integer.parseInt(this.luhnUpperTextField1.getText()));
        } else {
            pData1.setLunhUpperCut(-1);
        }

        pData1.setDissimilarityType((DissimilarityType) this.distanceComboBox.getSelectedItem());

        pData2.setStemmer((StemmerType) this.stemmerComboBox2.getSelectedItem());
        pData2.setUseStopword(true);
        pData2.setUseWeight(false);
        pData2.setLunhLowerCut(Integer.parseInt(this.luhnLowerTextField2.getText()));
        pData2.setMatrixTransformationType((MatrixTransformationType) this.matrixtransfComboBox2.getSelectedItem());
        pData2.setNumberGrams(this.gramsComboBox2.getSelectedIndex() + 1);

        if (this.luhnUpperTextField2.getText().trim().length() > 0) {
            pData2.setLunhUpperCut(Integer.parseInt(this.luhnUpperTextField2.getText()));
        } else {
            pData2.setLunhUpperCut(-1);
        }

        pData2.setDissimilarityType((DissimilarityType) this.distanceComboBox.getSelectedItem());
    }

    private Viewer local;
    private Viewer outer;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel chooseDistanceTypePanel;
    private javax.swing.JButton createButton;
    private javax.swing.JComboBox distanceComboBox;
    private javax.swing.JComboBox gramsComboBox1;
    private javax.swing.JComboBox gramsComboBox2;
    private javax.swing.JLabel gramsLabel1;
    private javax.swing.JLabel gramsLabel2;
    private javax.swing.JComboBox knnConnectivityComboBox;
    private javax.swing.JLabel knnConnectivityLabel;
    private javax.swing.JLabel luhnLabel1;
    private javax.swing.JLabel luhnLabel2;
    private javax.swing.JTextField luhnLowerTextField1;
    private javax.swing.JTextField luhnLowerTextField2;
    private javax.swing.JLabel luhnUpperLabel1;
    private javax.swing.JLabel luhnUpperLabel2;
    private javax.swing.JTextField luhnUpperTextField1;
    private javax.swing.JTextField luhnUpperTextField2;
    private javax.swing.JPanel matrixTypePanel1;
    private javax.swing.JPanel matrixTypePanel2;
    private javax.swing.JComboBox matrixtransfComboBox1;
    private javax.swing.JComboBox matrixtransfComboBox2;
    private javax.swing.JPanel nrNeighborsPanel;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JPanel preProcessingPanel1;
    private javax.swing.JPanel preProcessingPanel2;
    private javax.swing.JPanel projPanel1;
    private javax.swing.JPanel projPanel2;
    private javax.swing.JComboBox stemmerComboBox1;
    private javax.swing.JComboBox stemmerComboBox2;
    private javax.swing.ButtonGroup tfidf1buttonGroup;
    private javax.swing.ButtonGroup tfidf2buttonGroup;
    // End of variables declaration//GEN-END:variables
}
