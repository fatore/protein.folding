/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ParallelCoordinatesFrameOptions.java
 *
 * Created on 10/06/2010, 09:40:21
 */
package parallelcoordinates.model.view;

import parallelcoordinates.model.ParallelCoordinatesModel;
import parallelcoordinates.model.ParallelCoordinatesModel.PolylineNormalizationType;

/**
 *
 * @author PC
 */
public class ParallelCoordinatesFrameOptions extends javax.swing.JDialog {

    /** Creates new form ParallelCoordinatesFrameOptions */
    private ParallelCoordinatesFrameOptions(java.awt.Frame parent) {
        super(parent, true);
        initComponents();


        for (PolylineNormalizationType pn : PolylineNormalizationType.values()) {
            this.normComboBox.addItem(pn);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        controlPanel = new javax.swing.JPanel();
        drawAxeLabelsCheckBox = new javax.swing.JCheckBox();
        drawSilhouetteCheckBox = new javax.swing.JCheckBox();
        drawVerticalAxesCheckBox = new javax.swing.JCheckBox();
        colorInstancesCheckBox = new javax.swing.JCheckBox();
        highQualityCheckBox = new javax.swing.JCheckBox();
        normLabel = new javax.swing.JLabel();
        normComboBox = new javax.swing.JComboBox();
        buttonPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        controlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));
        controlPanel.setLayout(new java.awt.GridBagLayout());

        drawAxeLabelsCheckBox.setText("Draw axe labels");
        drawAxeLabelsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawAxeLabelsCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(drawAxeLabelsCheckBox, gridBagConstraints);

        drawSilhouetteCheckBox.setText("Draw silhouette boxes");
        drawSilhouetteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawSilhouetteCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(drawSilhouetteCheckBox, gridBagConstraints);

        drawVerticalAxesCheckBox.setText("Draw vertical axes");
        drawVerticalAxesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawVerticalAxesCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(drawVerticalAxesCheckBox, gridBagConstraints);

        colorInstancesCheckBox.setText("Color non-selected instances");
        colorInstancesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorInstancesCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(colorInstancesCheckBox, gridBagConstraints);

        highQualityCheckBox.setText("High quality renderer");
        highQualityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highQualityCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(highQualityCheckBox, gridBagConstraints);

        normLabel.setText("Normalization");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(normLabel, gridBagConstraints);

        normComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        controlPanel.add(normComboBox, gridBagConstraints);

        getContentPane().add(controlPanel, java.awt.BorderLayout.CENTER);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void drawAxeLabelsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawAxeLabelsCheckBoxActionPerformed
        if (viewer != null) {
            ParallelCoordinatesModel model = (ParallelCoordinatesModel) viewer.getModel();

            if (model != null) {
                model.setDrawAxeLabels(drawAxeLabelsCheckBox.isSelected());
                model.notifyObservers();
            }
        }
    }//GEN-LAST:event_drawAxeLabelsCheckBoxActionPerformed

    private void drawVerticalAxesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawVerticalAxesCheckBoxActionPerformed
        if (viewer != null) {
            ParallelCoordinatesModel model = (ParallelCoordinatesModel) viewer.getModel();

            if (model != null) {
                model.setDrawVerticalAxes(drawVerticalAxesCheckBox.isSelected());
                model.notifyObservers();
            }
        }
    }//GEN-LAST:event_drawVerticalAxesCheckBoxActionPerformed

    private void colorInstancesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorInstancesCheckBoxActionPerformed
        if (viewer != null) {
            ParallelCoordinatesModel model = (ParallelCoordinatesModel) viewer.getModel();

            if (model != null) {
                model.setColoredInstances(colorInstancesCheckBox.isSelected());
                model.notifyObservers();
            }
        }
    }//GEN-LAST:event_colorInstancesCheckBoxActionPerformed

    private void drawSilhouetteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawSilhouetteCheckBoxActionPerformed
        if (viewer != null) {
            ParallelCoordinatesModel model = (ParallelCoordinatesModel) viewer.getModel();

            if (model != null) {
                model.setDrawSilhouetteBoxes(drawSilhouetteCheckBox.isSelected());
                model.notifyObservers();
            }
        }
    }//GEN-LAST:event_drawSilhouetteCheckBoxActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.viewer = null;
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void highQualityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highQualityCheckBoxActionPerformed
        if (viewer != null) {
            viewer.setHighQualityRender(highQualityCheckBox.isSelected());
            viewer.updateImage();
        }
    }//GEN-LAST:event_highQualityCheckBoxActionPerformed

    private void normComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normComboBoxActionPerformed
        if (viewer != null) {
            ParallelCoordinatesModel model = (ParallelCoordinatesModel) viewer.getModel();

            if (model != null) {
                model.setNormalization((PolylineNormalizationType) normComboBox.getSelectedItem());
                model.notifyObservers();
            }
        }
    }//GEN-LAST:event_normComboBoxActionPerformed

    public static ParallelCoordinatesFrameOptions getInstance(javax.swing.JFrame parent) {
        return new ParallelCoordinatesFrameOptions(parent);
    }

    public void display(ParallelCoordinatesFrame viewer) {
        if (viewer != null) {
            highQualityCheckBox.setSelected(viewer.isHighQualityRender());

            ParallelCoordinatesModel model = (ParallelCoordinatesModel) viewer.getModel();

            if (model != null) {
                drawAxeLabelsCheckBox.setSelected(model.isDrawAxeLabels());
                drawSilhouetteCheckBox.setSelected(model.isDrawSilhouetteBoxes());
                drawVerticalAxesCheckBox.setSelected(model.isDrawVerticalAxes());
                colorInstancesCheckBox.setSelected(model.isColoredInstances());
                normComboBox.setSelectedItem(model.getNormalization());
            }
        }

        this.viewer = viewer;
        pack();
        setLocationRelativeTo(this.getParent());
        setVisible(true);
    }
    private ParallelCoordinatesFrame viewer;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox colorInstancesCheckBox;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JCheckBox drawAxeLabelsCheckBox;
    private javax.swing.JCheckBox drawSilhouetteCheckBox;
    private javax.swing.JCheckBox drawVerticalAxesCheckBox;
    private javax.swing.JCheckBox highQualityCheckBox;
    private javax.swing.JComboBox normComboBox;
    private javax.swing.JLabel normLabel;
    // End of variables declaration//GEN-END:variables
}
