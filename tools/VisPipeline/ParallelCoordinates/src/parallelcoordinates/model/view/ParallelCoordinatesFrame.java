/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ParallelCoordinatesFrame.java
 *
 * Created on 09/06/2010, 11:05:40
 */
package parallelcoordinates.model.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JToggleButton;
import matrix.AbstractMatrix;
import matrix.MatrixFactory;
import parallelcoordinates.model.ParallelCoordinatesModel;
import parallelcoordinates.model.PolylineInstance;
import parallelcoordinates.util.ParallelCoordinatesConstants;
import projection.view.ProjectionFrame;
import projection.view.selection.InstanceSelection;
import projection.view.selection.coordination.CoordinationSelectionFactory;
import visualizationbasics.coordination.AbstractCoordinator;
import visualizationbasics.model.AbstractInstance;
import visualizationbasics.model.AbstractModel;
import visualizationbasics.util.OpenDialog;
import visualizationbasics.util.PropertiesManager;
import visualizationbasics.util.SaveDialog;
import visualizationbasics.util.filter.DATAFilter;
import visualizationbasics.util.filter.PNGFilter;
import visualizationbasics.view.ModelViewer;
import visualizationbasics.view.selection.AbstractSelection;

/**
 *
 * @author Fernando
 */
public class ParallelCoordinatesFrame extends ModelViewer {

    /** Creates new form ParallelCoordinatesFrame */
    public ParallelCoordinatesFrame() {
        this.view = new ViewPanel();
        this.highqualityrender = true;

        initComponents();

        addSelection(new InstanceSelection(this));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectionButtonGroup = new javax.swing.ButtonGroup();
        viewScrollPane = new javax.swing.JScrollPane(this.view);
        mainToolBar = new javax.swing.JToolBar();
        hLabel = new javax.swing.JLabel();
        hzoominButton = new javax.swing.JButton();
        hzoomoutButton = new javax.swing.JButton();
        vLabel = new javax.swing.JLabel();
        vzoominButton = new javax.swing.JButton();
        vzoomoutButton = new javax.swing.JButton();
        toolsToolBar = new javax.swing.JToolBar();
        silhouetteButton = new javax.swing.JButton();
        optionsButton = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        alphaSlider = new javax.swing.JSlider();
        selectionToolBar = new javax.swing.JToolBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        savePngMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        toolOptionsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().add(viewScrollPane, java.awt.BorderLayout.CENTER);

        mainToolBar.setRollover(true);

        hLabel.setText("Horizontal ");
        mainToolBar.add(hLabel);

        hzoominButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/ZoomIn16.gif"))); // NOI18N
        hzoominButton.setFocusable(false);
        hzoominButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hzoominButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        hzoominButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hzoominButtonActionPerformed(evt);
            }
        });
        mainToolBar.add(hzoominButton);

        hzoomoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/ZoomOut16.gif"))); // NOI18N
        hzoomoutButton.setFocusable(false);
        hzoomoutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hzoomoutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        hzoomoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hzoomoutButtonActionPerformed(evt);
            }
        });
        mainToolBar.add(hzoomoutButton);

        vLabel.setText("   Vertical ");
        mainToolBar.add(vLabel);

        vzoominButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/ZoomIn16.gif"))); // NOI18N
        vzoominButton.setFocusable(false);
        vzoominButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        vzoominButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        vzoominButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vzoominButtonActionPerformed(evt);
            }
        });
        mainToolBar.add(vzoominButton);

        vzoomoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/ZoomOut16.gif"))); // NOI18N
        vzoomoutButton.setFocusable(false);
        vzoomoutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        vzoomoutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        vzoomoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vzoomoutButtonActionPerformed(evt);
            }
        });
        mainToolBar.add(vzoomoutButton);

        toolsToolBar.setRollover(true);

        silhouetteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Information16.gif"))); // NOI18N
        silhouetteButton.setToolTipText("Calculate Silhouette");
        silhouetteButton.setFocusable(false);
        silhouetteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        silhouetteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        silhouetteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                silhouetteButtonActionPerformed(evt);
            }
        });
        toolsToolBar.add(silhouetteButton);

        optionsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Preferences16.gif"))); // NOI18N
        optionsButton.setFocusable(false);
        optionsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        optionsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        optionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsButtonActionPerformed(evt);
            }
        });
        toolsToolBar.add(optionsButton);

        mainToolBar.add(toolsToolBar);

        getContentPane().add(mainToolBar, java.awt.BorderLayout.NORTH);

        bottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        alphaSlider.setValue(100);
        alphaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alphaSliderStateChanged(evt);
            }
        });
        bottomPanel.add(alphaSlider);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        selectionToolBar.setOrientation(1);
        selectionToolBar.setRollover(true);
        getContentPane().add(selectionToolBar, java.awt.BorderLayout.EAST);

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setMnemonic('O');
        openMenuItem.setText("Open File");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        savePngMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        savePngMenuItem.setMnemonic('P');
        savePngMenuItem.setText("Export to PNG");
        savePngMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePngMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(savePngMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        toolOptionsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        toolOptionsMenuItem.setText("Tool Options");
        toolOptionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolOptionsMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(toolOptionsMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hzoomoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hzoomoutButtonActionPerformed
        if (view != null) {
            view.horizontalZoomout();
        }
    }//GEN-LAST:event_hzoomoutButtonActionPerformed

    private void hzoominButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hzoominButtonActionPerformed
        if (view != null) {
            view.horizontalZoomin();
        }
    }//GEN-LAST:event_hzoominButtonActionPerformed

    private void alphaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_alphaSliderStateChanged
        if (model != null) {
            javax.swing.JSlider slider = (javax.swing.JSlider) evt.getSource();
            ((ParallelCoordinatesModel) model).setAlpha((float) Math.pow(slider.getValue() / 100.0f, 2));

            if (view != null) {
                updateImage();
            }
        }
    }//GEN-LAST:event_alphaSliderStateChanged

    private void vzoominButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vzoominButtonActionPerformed
        if (view != null) {
            view.verticalZoomin();
        }
    }//GEN-LAST:event_vzoominButtonActionPerformed

    private void vzoomoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vzoomoutButtonActionPerformed
        if (view != null) {
            view.verticalZoomout();
        }
    }//GEN-LAST:event_vzoomoutButtonActionPerformed

    private void savePngMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePngMenuItemActionPerformed
        if (view != null) {
            try {
                PropertiesManager spm = PropertiesManager.getInstance(ParallelCoordinatesConstants.PROPFILENAME);
                int result = SaveDialog.showSaveDialog(spm, new PNGFilter(), this, "image.png");

                if (result == JFileChooser.APPROVE_OPTION) {
                    String filename = SaveDialog.getFilename();

                    try {
                        view.saveToPngImageFile(filename);
                    } catch (IOException e) {
                        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
                        JOptionPane.showMessageDialog(this, e.getMessage(),
                                "Problems saving the file", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(ProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_savePngMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(ParallelCoordinatesConstants.PROPFILENAME);
            int result = OpenDialog.showOpenDialog(spm, new DATAFilter(), this);

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = OpenDialog.getFilename();

                try {
                    AbstractMatrix matrix = MatrixFactory.getInstance(filename);
                    ArrayList<String> labels = matrix.getLabels();

                    ParallelCoordinatesModel newmodel = new ParallelCoordinatesModel(matrix.getAttributes());
                    for (int i = 0; i < matrix.getRowCount(); i++) {
                        if(labels.size() > 0){
                            PolylineInstance pi = new PolylineInstance((ParallelCoordinatesModel) newmodel, matrix.getRow(i), labels.get(i));
                        } else {
                            PolylineInstance pi = new PolylineInstance((ParallelCoordinatesModel) newmodel, matrix.getRow(i));
                        }
                    }

                    setModel(newmodel);
                    setTitle(filename.substring(filename.lastIndexOf("\\") + 1));
                } catch (IOException e) {
                    Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
                    JOptionPane.showMessageDialog(this, e.getMessage(),
                            "Problems opening the file", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(ProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void silhouetteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_silhouetteButtonActionPerformed
        if (model != null) {
            ((ParallelCoordinatesModel) model).calculateSilhouette();
            model.notifyObservers();
        }
    }//GEN-LAST:event_silhouetteButtonActionPerformed

    private void toolOptionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolOptionsMenuItemActionPerformed
        ParallelCoordinatesFrameOptions.getInstance(this).display(this);
    }//GEN-LAST:event_toolOptionsMenuItemActionPerformed

    private void optionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsButtonActionPerformed
        toolOptionsMenuItemActionPerformed(evt);
    }//GEN-LAST:event_optionsButtonActionPerformed

    @Override
    public void setModel(AbstractModel model) {
        if (model instanceof ParallelCoordinatesModel) {
            if (model != null) {
                super.setModel(model);
                updateImage();
            }
        }
    }

    public ViewPanel getView() {
        return view;
    }

    public boolean isHighQualityRender() {
        return highqualityrender;
    }

    public void setHighQualityRender(boolean highqualityrender) {
        this.highqualityrender = highqualityrender;

        view.cleanImage();
        view.repaint();
    }

    @Override
    public void update(Observable o, Object arg) {
        if (view != null) {
            view.cleanImage();
            view.repaint();
        }
    }

    @Override
    public void addCoordinator(AbstractCoordinator coordinator) {
        super.addCoordinator(coordinator);
        addSelection(CoordinationSelectionFactory.getInstance(coordinator, this));
    }

    public void updateImage() {
        if (view != null) {
            view.cleanImage();
            view.repaint();
        }
    }

    public void addSelection(final AbstractSelection selection) {
        if (selection != null) {
            JToggleButton button = new JToggleButton();
            selectionButtonGroup.add(button);
            button.setIcon(selection.getIcon());
            button.setSelected(false);
            button.setToolTipText(selection.toString());

            button.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    if (view != null) {
                        view.setSelection(selection);
                    }
                }

            });

            selectionToolBar.add(button);
        }
    }

    public class ViewPanel extends JPanel {

        public ViewPanel() {
            this.selcolor = java.awt.Color.RED;
            setBackground(Color.WHITE);

            this.addMouseMotionListener(new MouseMotionListener());
            this.addMouseListener(new MouseClickedListener());
        }

        @Override
        public void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);
            java.awt.Graphics2D g2 = (java.awt.Graphics2D) g;

            if (model != null && image == null) {
                ParallelCoordinatesModel pmodel = (ParallelCoordinatesModel) model;

                image = new BufferedImage(pmodel.getSize().width,
                        pmodel.getSize().height, BufferedImage.TYPE_INT_RGB);
                setSize(image.getWidth(), image.getHeight());
                setPreferredSize(new Dimension(image.getWidth(), image.getHeight()));

                java.awt.Graphics2D g2Buffer = image.createGraphics();
                g2Buffer.setColor(this.getBackground());
                g2Buffer.fillRect(0, 0, image.getWidth(), image.getHeight());

                g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);

                ((ParallelCoordinatesModel) model).draw(image, highqualityrender);

                g2Buffer.dispose();
            }

            if (image != null) {
                g2.drawImage(image, 0, 0, null);
            }

            //Draw he rectangle to select the instances
            if (selsource != null && seltarget != null) {
                int x = selsource.x;
                int width = width = seltarget.x - selsource.x;

                int y = selsource.y;
                int height = seltarget.y - selsource.y;

                if (selsource.x > seltarget.x) {
                    x = seltarget.x;
                    width = selsource.x - seltarget.x;
                }

                if (selsource.y > seltarget.y) {
                    y = seltarget.y;
                    height = selsource.y - seltarget.y;
                }

                g2.setColor(selcolor);
                g2.drawRect(x, y, width, height);

                g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 0.45f));
                g2.fillRect(x, y, width, height);
            } else { //Draw the instance label
                if (label != null && labelpos != null) {
                    g2.setFont(this.getFont());
                    java.awt.FontMetrics metrics = g2.getFontMetrics(g2.getFont());

                    //Getting the label size
                    int width = metrics.stringWidth(label);
                    int height = metrics.getAscent();

                    g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 0.75f));
                    g2.setPaint(java.awt.Color.WHITE);
                    g2.fillRect(labelpos.x - 2, labelpos.y - height, width + 4, height + 4);
                    g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0f));

                    g2.setColor(java.awt.Color.DARK_GRAY);
                    g2.drawRect(labelpos.x - 2, labelpos.y - height, width + 4, height + 4);

                    //Drawing the label
                    g2.drawString(label, labelpos.x, labelpos.y);
                }
            }
        }

        public void setSelection(AbstractSelection selection) {
            this.selection = selection;
        }

        public void horizontalZoomin() {
            if (model != null) {
                ParallelCoordinatesModel pmodel = (ParallelCoordinatesModel) model;
                pmodel.setSize(pmodel.getSize().width + 50, pmodel.getSize().height);
                model.notifyObservers();
            }
        }

        public void horizontalZoomout() {
            if (model != null) {
                ParallelCoordinatesModel pmodel = (ParallelCoordinatesModel) model;
                pmodel.setSize(Math.max(50, pmodel.getSize().width - 50), pmodel.getSize().height);
                model.notifyObservers();
            }
        }

        public void verticalZoomin() {
            if (model != null) {
                ParallelCoordinatesModel pmodel = (ParallelCoordinatesModel) model;
                pmodel.setSize(pmodel.getSize().width, pmodel.getSize().height + 50);
                model.notifyObservers();
            }
        }

        public void verticalZoomout() {
            if (model != null) {
                ParallelCoordinatesModel pmodel = (ParallelCoordinatesModel) model;
                pmodel.setSize(pmodel.getSize().width, Math.max(100, pmodel.getSize().height - 50));
                model.notifyObservers();
            }
        }

        public void cleanImage() {
            image = null;
        }

        public void saveToPngImageFile(String filename) throws IOException {
            if (image != null) {
                try {
                    BufferedImage buffer = new BufferedImage(image.getWidth(),
                            image.getHeight(), BufferedImage.TYPE_INT_RGB);
                    paint(buffer.getGraphics());
                    ImageIO.write(buffer, "png", new File(filename));
                } catch (IOException ex) {
                    Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        public void cleanSelectedInstances() {
            if (model != null) {
                model.cleanSelectedInstances();
                model.notifyObservers();
            }
        }

        public void removeSelectedInstances() {
            if (model != null) {
                model.removeSelectedInstances();
                model.notifyObservers();
            }
        }

        public ArrayList<PolylineInstance> getSelectedInstances(Point source, Point target) {
            ArrayList<PolylineInstance> selinstances = new ArrayList<PolylineInstance>();

            if (model != null) {
                int x = Math.min(source.x, target.x);
                int width = Math.abs(source.x - target.x);

                int y = Math.min(source.y, target.y);
                int height = Math.abs(source.y - target.y);

                Rectangle rect = new Rectangle(x, y, width, height);
                selinstances = ((ParallelCoordinatesModel) model).getInstancesByPosition(rect);
            }

            return selinstances;
        }

        class MouseMotionListener extends MouseMotionAdapter {

            @Override
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                super.mouseMoved(evt);

                if (model != null) {
                    PolylineInstance instance = ((ParallelCoordinatesModel) model).getInstanceByPosition(evt.getPoint());

                    if (instance != null) {
                        //Show the instance label
                        label = instance.toString();

                        if (label.trim().length() > 0) {
                            if (label.length() > 100) {
                                label = label.substring(0, 96) + "...";
                            }

                            labelpos = evt.getPoint();
                            repaint();
                        }
                    } else {
                        //Clear the label
                        label = null;
                        labelpos = null;
                        repaint();
                    }
                }
            }

            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                if (selsource != null) {
                    seltarget = evt.getPoint();
                }

                repaint();
            }

        }

        class MouseClickedListener extends MouseAdapter {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                super.mouseClicked(evt);
            }

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                super.mousePressed(evt);

                if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
                    if (model != null) {
                        selsource = evt.getPoint();
                    }
                }
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                super.mouseReleased(evt);

                if (model != null) {
                    if (selsource != null && seltarget != null) {
                        ArrayList<PolylineInstance> instances = getSelectedInstances(selsource, seltarget);

                        if (instances != null) {
                            if (selection != null) {
                                selection.selected(new ArrayList<AbstractInstance>(instances));
                            }
                        }
                    }
                }

                selsource = null;
                seltarget = null;
            }

        }

        private String label;
        private Point labelpos;
        private Color selcolor;
        private AbstractSelection selection;
        private Point selsource;
        private Point seltarget;
        private BufferedImage image;
    }

    private boolean highqualityrender;
    private ViewPanel view;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider alphaSlider;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel hLabel;
    private javax.swing.JButton hzoominButton;
    private javax.swing.JButton hzoomoutButton;
    private javax.swing.JToolBar mainToolBar;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton optionsButton;
    private javax.swing.JMenuItem savePngMenuItem;
    private javax.swing.ButtonGroup selectionButtonGroup;
    private javax.swing.JToolBar selectionToolBar;
    private javax.swing.JButton silhouetteButton;
    private javax.swing.JMenuItem toolOptionsMenuItem;
    private javax.swing.JToolBar toolsToolBar;
    private javax.swing.JLabel vLabel;
    private javax.swing.JScrollPane viewScrollPane;
    private javax.swing.JButton vzoominButton;
    private javax.swing.JButton vzoomoutButton;
    // End of variables declaration//GEN-END:variables
}
