/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SingleMoleculeDetector.java
 *
 * Created on 12/08/2010, 10:16:52
 */
package sensors.singlemolecule;

import distance.dissimilarity.DynamicTimeWarping;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import matrix.AbstractMatrix;
import matrix.MatrixFactory;
import matrix.dense.DenseMatrix;
import projection.model.LabeledProjectionModelComp;
import projection.technique.idmap.IDMAPProjection;
import projection.technique.idmap.IDMAPProjection.InitializationType;
import projection.view.ProjectionFrameComp;
import sensors.singlemolecule.DataTransformation.Range;
import visualizationbasics.util.OpenDialog;
import visualizationbasics.util.PropertiesManager;
import visualizationbasics.util.filter.DATAFilter;

/**
 *
 * @author PC
 */
public class SingleMoleculeDetector extends javax.swing.JFrame {

    /** Creates new form SingleMoleculeDetector */
    public SingleMoleculeDetector() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        parametersPanel = new javax.swing.JPanel();
        filesPanel = new javax.swing.JPanel();
        specfileLabel = new javax.swing.JLabel();
        specfileTextField = new javax.swing.JTextField();
        reffileLabel = new javax.swing.JLabel();
        reffileTextField = new javax.swing.JTextField();
        specfileButton = new javax.swing.JButton();
        reffileButton = new javax.swing.JButton();
        confPanel = new javax.swing.JPanel();
        preprocPanel = new javax.swing.JPanel();
        smootitLabel = new javax.swing.JLabel();
        smootitTextField = new javax.swing.JTextField();
        rangesTextField = new javax.swing.JTextField();
        rangesLabel = new javax.swing.JLabel();
        normalizeCheckBox = new javax.swing.JCheckBox();
        removeMeanCheckBox = new javax.swing.JCheckBox();
        dissPanel = new javax.swing.JPanel();
        mwindowLabel = new javax.swing.JLabel();
        mwindowTextField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        projectionButton = new javax.swing.JButton();
        viewGridButton = new javax.swing.JButton();
        findSimilarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Single Molecule Detector");

        parametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));
        parametersPanel.setLayout(new java.awt.GridBagLayout());

        filesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Files"));
        filesPanel.setLayout(new java.awt.GridBagLayout());

        specfileLabel.setText("Spectrum file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        filesPanel.add(specfileLabel, gridBagConstraints);

        specfileTextField.setColumns(40);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        filesPanel.add(specfileTextField, gridBagConstraints);

        reffileLabel.setText("Reference file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        filesPanel.add(reffileLabel, gridBagConstraints);

        reffileTextField.setColumns(40);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        filesPanel.add(reffileTextField, gridBagConstraints);

        specfileButton.setText("Search...");
        specfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specfileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        filesPanel.add(specfileButton, gridBagConstraints);

        reffileButton.setText("Search...");
        reffileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reffileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        filesPanel.add(reffileButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        parametersPanel.add(filesPanel, gridBagConstraints);

        confPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));
        confPanel.setLayout(new java.awt.GridBagLayout());

        preprocPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Pre-processing"));
        preprocPanel.setLayout(new java.awt.GridBagLayout());

        smootitLabel.setText("Smoothing iterations");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preprocPanel.add(smootitLabel, gridBagConstraints);

        smootitTextField.setColumns(5);
        smootitTextField.setText("20");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preprocPanel.add(smootitTextField, gridBagConstraints);

        rangesTextField.setColumns(30);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preprocPanel.add(rangesTextField, gridBagConstraints);

        rangesLabel.setText("Wavenumbers Ranges");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preprocPanel.add(rangesLabel, gridBagConstraints);

        normalizeCheckBox.setSelected(true);
        normalizeCheckBox.setText("Normalize");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        preprocPanel.add(normalizeCheckBox, gridBagConstraints);

        removeMeanCheckBox.setSelected(true);
        removeMeanCheckBox.setText("Remove mean");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        preprocPanel.add(removeMeanCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        confPanel.add(preprocPanel, gridBagConstraints);

        dissPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Dissimilarity"));
        dissPanel.setLayout(new java.awt.GridBagLayout());

        mwindowLabel.setText("Match window");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dissPanel.add(mwindowLabel, gridBagConstraints);

        mwindowTextField.setColumns(5);
        mwindowTextField.setText("3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dissPanel.add(mwindowTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        confPanel.add(dissPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        parametersPanel.add(confPanel, gridBagConstraints);

        getContentPane().add(parametersPanel, java.awt.BorderLayout.CENTER);

        projectionButton.setText("Projection");
        projectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectionButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(projectionButton);

        viewGridButton.setText("View Grid");
        viewGridButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewGridButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(viewGridButton);

        findSimilarButton.setText("Find Similar");
        findSimilarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findSimilarButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(findSimilarButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void specfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specfileButtonActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(SensorsConstants.PROPFILENAME);
            int result = OpenDialog.showOpenDialog(spm, new DATAFilter(), this);

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = OpenDialog.getFilename();
                specfileTextField.setText(filename);

                ArrayList<String> attributes = MatrixFactory.getInstance(filename).getAttributes();

                DecimalFormat df = (DecimalFormat) DecimalFormat.getInstance(Locale.ENGLISH);
                df.applyPattern("0.0000E00");

                String begin = df.format(Float.parseFloat(attributes.get(0)));
                String end = df.format(Float.parseFloat(attributes.get(attributes.size() - 1)));
                rangesTextField.setText("[" + begin + ", " + end + "]");

            }
        } catch (IOException ex) {
            Logger.getLogger(SingleMoleculeDetector.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_specfileButtonActionPerformed

    private void reffileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reffileButtonActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(SensorsConstants.PROPFILENAME);
            int result = OpenDialog.showOpenDialog(spm, new DATAFilter(), this);

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = OpenDialog.getFilename();
                reffileTextField.setText(filename);
            }
        } catch (IOException ex) {
            Logger.getLogger(SingleMoleculeDetector.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_reffileButtonActionPerformed

    private void findSimilarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findSimilarButtonActionPerformed
         try {
            //getting the data
            AbstractMatrix spectra = MatrixFactory.getInstance(specfileTextField.getText());
            AbstractMatrix reference = MatrixFactory.getInstance(reffileTextField.getText());

            //smoothing and normalizing
            int nriterations = Integer.parseInt(smootitTextField.getText());
            for (int i = 0; i < nriterations; i++) {
                DataTransformation.movingAverageSmoothing(spectra, 1);
                DataTransformation.movingAverageSmoothing(reference, 1);
            }

            //normalizing
            if(normalizeCheckBox.isSelected()) {
                DataTransformation.normalize(spectra);
                DataTransformation.normalize(reference);
            }

            //remove mean
            if(removeMeanCheckBox.isSelected()) {
                DataTransformation.removeMean(spectra);
                DataTransformation.removeMean(reference);
            }

            //getting the ranges
            ArrayList<Range> ranges = parseRanges(rangesTextField.getText());
            AbstractMatrix spectracut = DataTransformation.zeroOutRanges(spectra, ranges);
            AbstractMatrix referencecut = DataTransformation.zeroOutRanges(reference, ranges);

            //calculatin the nearest neighbors
            int mwindow = Integer.parseInt(mwindowTextField.getText());
            ArrayList<Integer> index = NearestNeighbor.nn(spectracut, new DynamicTimeWarping(mwindow), referencecut);

            AbstractMatrix nnspec = new DenseMatrix();
            nnspec.setAttributes(spectra.getAttributes());
            for (int i = 0; i < index.size(); i++) {
                nnspec.addRow(spectra.getRow(index.get(i)), spectra.getLabel(index.get(i)));
            }

            //viewing the spectra
            SpectrumViewer sv = new SpectrumViewer();
            sv.display(nnspec, reference, ranges);
        } catch (IOException ex) {
            Logger.getLogger(SingleMoleculeDetector.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_findSimilarButtonActionPerformed

    private void projectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectionButtonActionPerformed
        try {            
            AbstractMatrix spectra = MatrixFactory.getInstance(specfileTextField.getText());

            //smoothing and normalizing
            int nriterations = Integer.parseInt(smootitTextField.getText());
            for (int i = 0; i < nriterations; i++) {
                DataTransformation.movingAverageSmoothing(spectra, 1);
            }

            //normalizing
            if(normalizeCheckBox.isSelected()) {
                DataTransformation.normalize(spectra);
            }

            //remove mean
            if(removeMeanCheckBox.isSelected()) {
                DataTransformation.removeMean(spectra);
            }

            //getting the ranges
            ArrayList<Range> ranges = parseRanges(rangesTextField.getText());
            AbstractMatrix spectracut = DataTransformation.zeroOutRanges(spectra, ranges);

            //projecting
             int mwindow = Integer.parseInt(mwindowTextField.getText());

            IDMAPProjection idmap = new IDMAPProjection();
            idmap.setFractionDelta(8.0f);
            idmap.setInitialization(InitializationType.FASTMAP);
            idmap.setNumberIterations(50);
            AbstractMatrix projection = idmap.project(spectracut, new DynamicTimeWarping(mwindow));

            //viewing projection
            LabeledProjectionModelComp model = new LabeledProjectionModelComp();
            model.input(projection);
            model.execute();

            ProjectionFrameComp frame = new ProjectionFrameComp();
            frame.setTitle("Spectra Projection");
            frame.input(model.output());
            frame.execute();
        } catch (IOException ex) {
            Logger.getLogger(SingleMoleculeDetector.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_projectionButtonActionPerformed

    private void viewGridButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewGridButtonActionPerformed
        try {
            //getting the data
            AbstractMatrix spectra = MatrixFactory.getInstance(specfileTextField.getText());
            AbstractMatrix reference = MatrixFactory.getInstance(reffileTextField.getText());

            //smoothing and normalizing
            int nriterations = Integer.parseInt(smootitTextField.getText());
            for (int i = 0; i < nriterations; i++) {
                DataTransformation.movingAverageSmoothing(spectra, 1);
                DataTransformation.movingAverageSmoothing(reference, 1);
            }

            //normalizing
            if(normalizeCheckBox.isSelected()) {
                DataTransformation.normalize(spectra);
                DataTransformation.normalize(reference);
            }

            //remove mean
            if(removeMeanCheckBox.isSelected()) {
                DataTransformation.removeMean(spectra);
                DataTransformation.removeMean(reference);
            }

            //getting the ranges
            ArrayList<Range> ranges = parseRanges(rangesTextField.getText());
            AbstractMatrix spectracut = DataTransformation.zeroOutRanges(spectra, ranges);
            AbstractMatrix referencecut = DataTransformation.zeroOutRanges(reference, ranges);

            //calculatin the nearest neighbors            
            int mwindow = Integer.parseInt(mwindowTextField.getText());
            ArrayList<Float> nndistances = NearestNeighbor.nndistances(spectracut, new DynamicTimeWarping(mwindow), referencecut);

            //viewing the grid
            GridViewer gv = new GridViewer();
            gv.display(nndistances, 34, 34, specfileTextField.getText());
        } catch (IOException ex) {
            Logger.getLogger(SingleMoleculeDetector.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewGridButtonActionPerformed

    public void display() {
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private ArrayList<Range> parseRanges(String text) {
        ArrayList<Range> ranges = new ArrayList<Range>();
        
        text = text.replaceAll("\\[", " ").replaceAll("]", " ");

        StringTokenizer stok1 = new StringTokenizer(text, ";");
        while(stok1.hasMoreTokens()) {
            StringTokenizer stok2 = new StringTokenizer(stok1.nextToken(), ",");

            float min = Float.parseFloat(stok2.nextToken().trim());
            float max = Float.parseFloat(stok2.nextToken().trim());           

            ranges.add(new Range(min, max));
        }

        return ranges;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel confPanel;
    private javax.swing.JPanel dissPanel;
    private javax.swing.JPanel filesPanel;
    private javax.swing.JButton findSimilarButton;
    private javax.swing.JLabel mwindowLabel;
    private javax.swing.JTextField mwindowTextField;
    private javax.swing.JCheckBox normalizeCheckBox;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JPanel preprocPanel;
    private javax.swing.JButton projectionButton;
    private javax.swing.JLabel rangesLabel;
    private javax.swing.JTextField rangesTextField;
    private javax.swing.JButton reffileButton;
    private javax.swing.JLabel reffileLabel;
    private javax.swing.JTextField reffileTextField;
    private javax.swing.JCheckBox removeMeanCheckBox;
    private javax.swing.JLabel smootitLabel;
    private javax.swing.JTextField smootitTextField;
    private javax.swing.JButton specfileButton;
    private javax.swing.JLabel specfileLabel;
    private javax.swing.JTextField specfileTextField;
    private javax.swing.JButton viewGridButton;
    // End of variables declaration//GEN-END:variables
}
