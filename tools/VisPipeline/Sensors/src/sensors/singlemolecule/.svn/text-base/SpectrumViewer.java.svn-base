/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SpectrumView.java
 *
 * Created on 12/08/2010, 10:39:50
 */
package sensors.singlemolecule;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import matrix.AbstractMatrix;
import sensors.singlemolecule.DataTransformation.Range;
import visualizationbasics.util.PropertiesManager;
import visualizationbasics.util.SaveDialog;
import visualizationbasics.util.filter.PNGFilter;

/**
 *
 * @author PC
 */
public class SpectrumViewer extends javax.swing.JFrame {

    /** Creates new form SpectrumView */
    public SpectrumViewer() {
        initComponents();

        spectindex = 0;
        refindex = 0;

        specLabel.setText("<" + (spectindex + 1) + ">");
        refLabel.setText("<" + (refindex + 1) + ">");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        specButtonPanel = new javax.swing.JPanel();
        specPrevButton = new javax.swing.JButton();
        specLabel = new javax.swing.JLabel();
        specNextButton = new javax.swing.JButton();
        refButtonPanel = new javax.swing.JPanel();
        refPrevButton = new javax.swing.JButton();
        refLabel = new javax.swing.JLabel();
        refNextButton = new javax.swing.JButton();
        savePanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        viewScrollPane = new javax.swing.JScrollPane();
        viewPanel = new ViewPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonPanel.setLayout(new java.awt.BorderLayout());

        specPrevButton.setText("<<");
        specPrevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specPrevButtonActionPerformed(evt);
            }
        });
        specButtonPanel.add(specPrevButton);

        specLabel.setText("     ");
        specButtonPanel.add(specLabel);

        specNextButton.setText(">>");
        specNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specNextButtonActionPerformed(evt);
            }
        });
        specButtonPanel.add(specNextButton);

        buttonPanel.add(specButtonPanel, java.awt.BorderLayout.EAST);

        refPrevButton.setText("<<");
        refPrevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refPrevButtonActionPerformed(evt);
            }
        });
        refButtonPanel.add(refPrevButton);

        refLabel.setText("     ");
        refButtonPanel.add(refLabel);

        refNextButton.setText(">>");
        refNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refNextButtonActionPerformed(evt);
            }
        });
        refButtonPanel.add(refNextButton);

        buttonPanel.add(refButtonPanel, java.awt.BorderLayout.WEST);

        saveButton.setText("Save Image");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        savePanel.add(saveButton);

        buttonPanel.add(savePanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        viewScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Spectrum"));

        viewPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 622, Short.MAX_VALUE)
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        viewScrollPane.setViewportView(viewPanel);

        getContentPane().add(viewScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void specPrevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specPrevButtonActionPerformed
        spectindex--;
        if (spectindex < 0) {
            spectindex = specmatrix.length - 1;
        }

        specimage = createSpectrumImage(specmatrix, spectindex, 1000, 600);

        specLabel.setText("<" + (spectindex + 1) + ">");
        viewPanel.repaint();
    }//GEN-LAST:event_specPrevButtonActionPerformed

    private void specNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specNextButtonActionPerformed
        spectindex++;
        if (spectindex > specmatrix.length - 1) {
            spectindex = 0;
        }

        specimage = createSpectrumImage(specmatrix, spectindex, 1000, 600);

        specLabel.setText("<" + (spectindex + 1) + ">");
        viewPanel.repaint();
    }//GEN-LAST:event_specNextButtonActionPerformed

    private void refNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refNextButtonActionPerformed
        refindex++;
        if (refindex > refmatrix.length - 1) {
            refindex = 0;
        }

        refimage = createReferenceImage(refmatrix, refindex, 1000, 600);

        refLabel.setText("<" + (refindex + 1) + ">");
        viewPanel.repaint();
    }//GEN-LAST:event_refNextButtonActionPerformed

    private void refPrevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refPrevButtonActionPerformed
        refindex--;
        if (refindex < 0) {
            refindex = refmatrix.length - 1;
        }

        refimage = createReferenceImage(refmatrix, refindex, 1000, 600);

        refLabel.setText("<" + (refindex + 1) + ">");
        viewPanel.repaint();
    }//GEN-LAST:event_refPrevButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(SensorsConstants.PROPFILENAME);
            int result = SaveDialog.showSaveDialog(spm, new PNGFilter(), this, "singlemolecule[" + spectindex + "].png");

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = SaveDialog.getFilename();
                BufferedImage image = new BufferedImage(viewPanel.getWidth(),
                        viewPanel.getHeight(), BufferedImage.TYPE_INT_RGB);
                viewPanel.paint(image.getGraphics());
                ImageIO.write(image, "png", new File(filename));
            }
        } catch (IOException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    public void display(AbstractMatrix matrix, AbstractMatrix reference, ArrayList<Range> ranges) throws IOException {
        setSize(1000, 800);
        setPreferredSize(getSize());
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        //normalizing the data
        specmatrix = matrix.toMatrix();
        refmatrix = reference.toMatrix();
        preprocessing(specmatrix, refmatrix);

        //storing the labels
        speclabels = matrix.getLabels();
        reflabels = reference.getLabels();

        //creating the initial images
        createBackgroundImage(ranges, matrix.getAttributes(), 1000, 600, matrix.getDimensions());
        specimage = createSpectrumImage(specmatrix, spectindex, 1000, 600);
        refimage = createReferenceImage(refmatrix, refindex, 1000, 600);

        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void preprocessing(float[][] matrix_aux, float[][] reference_aux) {
        //normalizing
        float max = Float.NEGATIVE_INFINITY;
        float min = Float.POSITIVE_INFINITY;
        for (int i = 0; i < matrix_aux.length; i++) {
            for (int j = 0; j < matrix_aux[i].length; j++) {
                if (matrix_aux[i][j] > max) {
                    max = matrix_aux[i][j];
                }

                if (matrix_aux[i][j] < min) {
                    min = matrix_aux[i][j];
                }
            }
        }

        for (int i = 0; i < reference_aux.length; i++) {
            for (int j = 0; j < reference_aux[i].length; j++) {
                if (reference_aux[i][j] > max) {
                    max = reference_aux[i][j];
                }

                if (matrix_aux[i][j] < min) {
                    min = reference_aux[i][j];
                }
            }
        }

        for (int i = 0; i < matrix_aux.length; i++) {
            for (int j = 0; j < matrix_aux[i].length; j++) {
                matrix_aux[i][j] = (matrix_aux[i][j] - min) / (max - min);
            }
        }

        for (int i = 0; i < reference_aux.length; i++) {
            for (int j = 0; j < reference_aux[i].length; j++) {
                reference_aux[i][j] = (reference_aux[i][j] - min) / (max - min);
            }
        }
    }

    private void createBackgroundImage(ArrayList<Range> ranges, ArrayList<String> attributes,
            int width, int height, int nrdimensions) {
        ArrayList<Integer> axis = new ArrayList<Integer>();

        //defining the ranges that are used to the comparison
        float[] attrvalues = new float[attributes.size()];
        for (int i = 0; i < attributes.size(); i++) {
            attrvalues[i] = Float.parseFloat(attributes.get(i).trim());
        }

        for (int i = 0; i < ranges.size(); i++) {
            Range range = ranges.get(i);

            //find begin
            for (int j = 0; j < attrvalues.length; j++) {
                if ((attrvalues[j] - range.min) >= 0.001) {
                    axis.add(j);
                    break;
                }
            }

            //find end
            for (int j = 0; j < attrvalues.length; j++) {
                if (j == attrvalues.length - 1) {
                    axis.add(j);
                } else {
                    if ((attrvalues[j] - range.max) >= 0.001) {
                        if (Math.abs(attrvalues[j] - range.max) <= 0000.1) {
                            axis.add(j);
                        } else {
                            axis.add(j - 1);
                        }
                        break;

                    }
                }
            }
        }

        int hmin = 10;
        int hmax = width - 10;
        int hspacing = (hmax - hmin) / (specmatrix[0].length - 1);

        int vmax = height - 10;
        int vmin = 10;
        int vspace = vmax - vmin;

        //creating the image
        backimage = new BufferedImage(2 * hmin + hspacing * nrdimensions, height, BufferedImage.BITMASK);

        //getting the draw context
        Graphics2D g2Buffer = backimage.createGraphics();
        g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g2Buffer.setColor(Color.BLACK);
        g2Buffer.drawRect(0, 0, backimage.getWidth() - 1, backimage.getHeight() - 1);

        //draw the grid
        g2Buffer.setColor(Color.LIGHT_GRAY);
        for (int j = 0; j <= 20; j++) {
            int y = vmin + (j * (vspace / 20));
            int x = hmin + (hspacing * (nrdimensions - 1));
            g2Buffer.drawLine(hmin, y, x, y);

            x = hmin + (j * (hmax - hmin) / 20);
            y = vmin + (vspace);
            g2Buffer.drawLine(x, vmin, x, y);
        }

        //draw the ranges
        g2Buffer.setColor(Color.GREEN);
        for (int j = 0; j < axis.size(); j += 2) {
            int x = (axis.get(j) * hspacing) + hmin;

            g2Buffer.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.05f));
            g2Buffer.fillRect(x, vmin, ((axis.get(j + 1) - axis.get(j)) * hspacing), vspace);

            g2Buffer.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));
            g2Buffer.drawRect(x, vmin, ((axis.get(j + 1) - axis.get(j)) * hspacing), vspace);
        }
    }

    private BufferedImage createReferenceImage(float[][] reference_aux, int index, int width, int height) {
        int hmin = 10;
        int hmax = width - 10;
        int hspacing = (hmax - hmin) / (specmatrix[0].length - 1);

        int vmax = height - 10;
        int vmin = 10;
        int vspace = vmax - vmin;


        //creating the image
        BufferedImage image = new BufferedImage(2 * hmin + hspacing
                * reference_aux[index].length, height, BufferedImage.BITMASK);

        //getting the draw context
        Graphics2D g2Buffer = image.createGraphics();
        g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g2Buffer.setColor(Color.RED);

        for (int j = 0; j < reference_aux[index].length - 1; j++) {
            int x1 = hmin + (j * hspacing);
            int x2 = hmin + ((j + 1) * hspacing);

            int y1 = (int) (vmin + (vspace - (vspace * reference_aux[index][j])));
            int y2 = (int) (vmin + (vspace - (vspace * reference_aux[index][j + 1])));

            g2Buffer.drawLine(x1, y1, x2, y2);
        }

        g2Buffer.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.2f));
        g2Buffer.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 120));
        java.awt.FontMetrics metrics = g2Buffer.getFontMetrics(g2Buffer.getFont());
        if (reflabels.isEmpty()) {
            g2Buffer.drawString(Integer.toString(index), 10, (int) (metrics.getAscent() * 0.75) + 120);
        } else {
            g2Buffer.drawString(reflabels.get(index), 10, (int) (metrics.getAscent() * 0.75) + 120);
        }
        g2Buffer.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));

        return image;
    }

    private BufferedImage createSpectrumImage(float[][] matrix_aux, int index, int width, int height) {
        int hmin = 10;
        int hmax = width - 10;
        int hspacing = (hmax - hmin) / (matrix_aux[0].length - 1);

        int vmax = height - 10;
        int vmin = 10;
        int vspace = vmax - vmin;

        //creating the image
        BufferedImage image = new BufferedImage(2 * hmin + hspacing
                * matrix_aux[index].length, height, BufferedImage.BITMASK);

        //getting the draw context
        Graphics2D g2Buffer = image.createGraphics();
        g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g2Buffer.setColor(Color.BLACK);

        for (int j = 0; j < matrix_aux[index].length - 1; j++) {
            int x1 = hmin + (j * hspacing);
            int x2 = hmin + ((j + 1) * hspacing);

            int y1 = (int) (vmin + (vspace - (vspace * matrix_aux[index][j])));
            int y2 = (int) (vmin + (vspace - (vspace * matrix_aux[index][j + 1])));

            g2Buffer.setColor(Color.BLACK);
            g2Buffer.drawLine(x1, y1, x2, y2);
        }

        g2Buffer.setColor(Color.BLACK);
        g2Buffer.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.2f));
        g2Buffer.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 120));
        java.awt.FontMetrics metrics = g2Buffer.getFontMetrics(g2Buffer.getFont());
        if (speclabels.isEmpty()) {
            g2Buffer.drawString(Integer.toString(index), 10, (int) (metrics.getAscent() * 0.75) + 25);
        } else {
            g2Buffer.drawString(speclabels.get(index), 10, (int) (metrics.getAscent() * 0.75) + 25);
        }
        g2Buffer.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));

        return image;
    }

    private class ViewPanel extends JPanel {

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponents(g);

            g.setColor(Color.WHITE);
            g.fillRect(0, 0, getWidth(), getHeight());

            if (backimage != null) {
                int x = (getWidth() - backimage.getWidth()) / 2;
                int y = (getHeight() - backimage.getHeight()) / 2;
                g.drawImage(backimage, Math.max(0, x), Math.max(0, y), null);
            }

            if (refimage != null) {
                int x = (getWidth() - refimage.getWidth()) / 2;
                int y = (getHeight() - refimage.getHeight()) / 2;
                g.drawImage(refimage, Math.max(0, x), Math.max(0, y), null);
            }

            if (specimage != null) {
                int x = (getWidth() - specimage.getWidth()) / 2;
                int y = (getHeight() - specimage.getHeight()) / 2;
                g.drawImage(specimage, Math.max(0, x), Math.max(0, y), null);
            }
        }
    }
    private int spectindex;
    private ArrayList<String> speclabels;
    private float[][] specmatrix;
    private BufferedImage specimage;
    private int refindex;
    private ArrayList<String> reflabels;
    private float[][] refmatrix;
    private BufferedImage refimage;
    private BufferedImage backimage;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel refButtonPanel;
    private javax.swing.JLabel refLabel;
    private javax.swing.JButton refNextButton;
    private javax.swing.JButton refPrevButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel savePanel;
    private javax.swing.JPanel specButtonPanel;
    private javax.swing.JLabel specLabel;
    private javax.swing.JButton specNextButton;
    private javax.swing.JButton specPrevButton;
    private javax.swing.JPanel viewPanel;
    private javax.swing.JScrollPane viewScrollPane;
    // End of variables declaration//GEN-END:variables
}
