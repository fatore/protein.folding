/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GridViewer.java
 *
 * Created on Aug 18, 2010, 1:02:09 PM
 */
package sensors.singlemolecule;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import visualizationbasics.color.ColorScaleFactory.ColorScaleType;
import visualizationbasics.color.ColorScalePanel;
import visualizationbasics.color.ColorTable;
import visualizationbasics.util.PropertiesManager;
import visualizationbasics.util.SaveDialog;
import visualizationbasics.util.filter.PNGFilter;

/**
 *
 * @author paulovich
 */
public class GridViewer extends javax.swing.JFrame {

    /** Creates new form GridViewer */
    public GridViewer() {
        initComponents();

        ctable = new ColorTable(ColorScaleType.GREEN_TO_WHITE_SCALE);
        for (ColorScaleType cst : ColorScaleType.values()) {
            colorScaleComboBox.addItem(cst);
        }
        colorScaleComboBox.setSelectedItem(ctable.getColorScaleType());
        reverseCheckBox.setSelected(ctable.getColorScale().isReverse());

        viewpanel = new ViewPanel();
        mainPanel.add(viewpanel, BorderLayout.CENTER);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        saveImageButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        controlPanel = new javax.swing.JPanel();
        colorScaleLabel = new javax.swing.JLabel();
        colorScaleComboBox = new javax.swing.JComboBox();
        reverseCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        mainPanel.setLayout(new java.awt.BorderLayout());
        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        saveImageButton.setText("Save Image");
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(saveImageButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        controlPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        colorScaleLabel.setText("Color Scale");
        controlPanel.add(colorScaleLabel);

        colorScaleComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                colorScaleComboBoxItemStateChanged(evt);
            }
        });
        controlPanel.add(colorScaleComboBox);

        reverseCheckBox.setText("reverse");
        reverseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reverseCheckBoxActionPerformed(evt);
            }
        });
        controlPanel.add(reverseCheckBox);

        getContentPane().add(controlPanel, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(SensorsConstants.PROPFILENAME);
            int result = SaveDialog.showSaveDialog(spm, new PNGFilter(), this, "grid.png");

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = SaveDialog.getFilename();
                BufferedImage newimage = new BufferedImage(viewpanel.getWidth(),
                        viewpanel.getHeight(), BufferedImage.TYPE_INT_RGB);
                viewpanel.paint(newimage.getGraphics());
                ImageIO.write(newimage, "png", new File(filename));
            }
        } catch (IOException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveImageButtonActionPerformed

    private void colorScaleComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_colorScaleComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            ColorScaleType type = (ColorScaleType) colorScaleComboBox.getSelectedItem();

            if (viewpanel != null) {
                ctable.setColorScaleType(type);
                ctable.getColorScale().setReverse(reverseCheckBox.isSelected());
                image = null;
                viewpanel.repaint();
            }
        }
    }//GEN-LAST:event_colorScaleComboBoxItemStateChanged

    private void reverseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverseCheckBoxActionPerformed
        if (viewpanel != null) {
            ctable.getColorScale().setReverse(reverseCheckBox.isSelected());
            image = null;
            viewpanel.repaint();
        }
    }//GEN-LAST:event_reverseCheckBoxActionPerformed

    public void display(ArrayList<Float> values, int nrlines, int nrcolums, String title) {
        setSize(1000, 800);
        setPreferredSize(getSize());
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setTitle(title);

        createGrid(values, nrlines, nrcolums);

        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void createGrid(ArrayList<Float> values, int nrlines, int nrcolums) {
        grid = new float[nrlines][nrcolums];

        for (int i = 0; i < nrlines; i++) {
            for (int j = 0; j < nrcolums; j++) {
                grid[i][j] = values.get((i * nrcolums) + j);
            }
        }
    }

    private void createImage() {
        image = new BufferedImage(800, 800, BufferedImage.TYPE_INT_RGB);

        Graphics2D g2Buffer = image.createGraphics();
        g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g2Buffer.setColor(Color.WHITE);
        g2Buffer.fillRect(0, 0, image.getWidth(), image.getHeight());

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                g2Buffer.setColor(ctable.getColor(grid[i][j]));
                g2Buffer.fillRect((i * (SQUARESIZE + 1)) + SQUARESIZE, (j * (SQUARESIZE + 1)) + SQUARESIZE, SQUARESIZE, SQUARESIZE);
            }
        }
    }

    class ViewPanel extends JPanel {

        public ViewPanel() {
            setLayout(new FlowLayout(FlowLayout.LEFT));

            csp = new ColorScalePanel(null);
            csp.setColorTable(ctable);
            csp.setPreferredSize(new Dimension(200, 12));
            add(csp);
            csp.setBackground(Color.WHITE);
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);

            g.setColor(Color.WHITE);
            g.fillRect(0, 0, getWidth(), getHeight());

            if (grid != null) {
                if (image == null) {
                    GridViewer.this.createImage();
                }

                g.drawImage(image, 2 * SQUARESIZE, 2 * SQUARESIZE, null);
            }
        }
        
        private ColorScalePanel csp;
    }

    private ViewPanel viewpanel;
    private float[][] grid;
    private ColorTable ctable;
    private static final int SQUARESIZE = 15;
    private BufferedImage image;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JComboBox colorScaleComboBox;
    private javax.swing.JLabel colorScaleLabel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JCheckBox reverseCheckBox;
    private javax.swing.JButton saveImageButton;
    // End of variables declaration//GEN-END:variables
}
