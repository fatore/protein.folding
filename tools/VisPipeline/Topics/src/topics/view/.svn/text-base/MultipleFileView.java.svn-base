/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Roberto Pinho <robertopinho@yahoo.com.br>,
 *                 Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package topics.view;

import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JEditorPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;
import javax.swing.text.JTextComponent;
import textprocessing.corpus.Corpus;
import visualizationbasics.model.AbstractInstance;

/**
 *
 * @author  Fernando Vieira Paulovich
 */
public class MultipleFileView extends javax.swing.JDialog {

    /**
     * Creates new form MultipleFileView
     */
    private MultipleFileView(javax.swing.JFrame parent) {
        super(parent);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        dataPanel = new javax.swing.JPanel();
        fileviewTabbedPane = new javax.swing.JTabbedPane();
        highlightToolBar = new javax.swing.JToolBar();
        highlightPanel = new javax.swing.JPanel();
        highlightLabel = new javax.swing.JLabel();
        highlightTextField = new javax.swing.JTextField();
        highlightButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("File Multiple View");
        setModal(true);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        dataPanel.setLayout(new java.awt.BorderLayout());

        fileviewTabbedPane.setMinimumSize(new java.awt.Dimension(1000, 500));
        fileviewTabbedPane.setPreferredSize(new java.awt.Dimension(800, 500));
        fileviewTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fileviewTabbedPaneStateChanged(evt);
            }
        });
        dataPanel.add(fileviewTabbedPane, java.awt.BorderLayout.CENTER);

        highlightPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        highlightLabel.setText("Highlight");
        highlightPanel.add(highlightLabel);

        highlightTextField.setColumns(20);
        highlightTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                highlightTextFieldKeyPressed(evt);
            }
        });
        highlightPanel.add(highlightTextField);

        highlightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/TipOfTheDay16.gif"))); // NOI18N
        highlightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightButtonActionPerformed(evt);
            }
        });
        highlightPanel.add(highlightButton);

        highlightToolBar.add(highlightPanel);

        dataPanel.add(highlightToolBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(dataPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileviewTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fileviewTabbedPaneStateChanged
        if (fileviewTabbedPane.getSelectedComponent() instanceof FilePane) {
            showedFilePane = (FilePane) fileviewTabbedPane.getSelectedComponent();

            if (showedFilePane != null) {
                if (highlightTextField.getText().trim().length() > 0) {
                    showedFilePane.highlight(showedFilePane.textArea,
                            highlightTextField.getText().trim());
                }
            }
        }
    }//GEN-LAST:event_fileviewTabbedPaneStateChanged

    private void highlightTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_highlightTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            if (showedFilePane != null) {
                if (highlightTextField.getText().trim().length() > 0) {
                    showedFilePane.highlight(showedFilePane.textArea,
                            highlightTextField.getText().trim());
                }
            }
        }
    }//GEN-LAST:event_highlightTextFieldKeyPressed

    private void highlightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightButtonActionPerformed
        if (showedFilePane != null) {
            if (highlightTextField.getText().trim().length() > 0) {
                showedFilePane.highlight(showedFilePane.textArea,
                        highlightTextField.getText().trim());
            }
        }
    }//GEN-LAST:event_highlightButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    public static MultipleFileView getInstance(javax.swing.JFrame parent) {
        return new MultipleFileView(parent);
    }

    public void display(ArrayList<AbstractInstance> instances, Corpus corpus) {
        //Remove all tab pane
        fileviewTabbedPane.removeAll();
        highlightTextField.setText("");

        if (instances != null) {
            for (AbstractInstance ai : instances) {
                String label = ai.toString();
                if (label.length() > numberCharsAtTabTitle) {
                    label = label.substring(0, numberCharsAtTabTitle - 3) + "...";
                }
                fileviewTabbedPane.addTab(label,
                        new FilePane(ai.toString(), corpus, ai.getId()));
            }
        }

        pack();
        setLocationRelativeTo(getParent());
        setVisible(true);
    }

    public void display(AbstractInstance instance, Corpus corpus) {
        ArrayList<AbstractInstance> aux = new ArrayList<AbstractInstance>();
        aux.add(instance);
        display(aux, corpus);
    }

    class FilePane extends javax.swing.JPanel {

        public FilePane(String label, Corpus corpus, int id) {
            initComponents(label, corpus, id);
        }

        private void initComponents(String label, Corpus corpus, int id) {
            textAreaScrollPane = new javax.swing.JScrollPane();
            textArea = new javax.swing.JEditorPane();
            filelabelPanel = new javax.swing.JPanel();
            filelabelField = new javax.swing.JTextField();

            setLayout(new java.awt.BorderLayout());
            textAreaScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("File Content"));
            textAreaScrollPane.setAutoscrolls(true);
            textArea.setEditable(false);
            textArea.setAutoscrolls(false);
            textAreaScrollPane.setViewportView(textArea);
            add(textAreaScrollPane, java.awt.BorderLayout.CENTER);

//            if (filename.endsWith(".html") || filename.endsWith(".htm")) {
//                textArea.setContentType("text/html");
//            }

            textArea.addHyperlinkListener(new HyperlinkListener() {

                @Override
                public void hyperlinkUpdate(HyperlinkEvent e) {
                    if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                        BrowserControl.displayURL(e.getURL().toString());
                    }
                }

            });

            filelabelPanel.setLayout(new java.awt.BorderLayout());
            filelabelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("File Label"));
            filelabelField.setEditable(false);
            filelabelPanel.add(filelabelField, java.awt.BorderLayout.CENTER);
            add(filelabelPanel, java.awt.BorderLayout.NORTH);

            //Loading the data
            filelabelField.setText(label);
            filelabelField.setCaretPosition(0);

            try {
                textArea.setText(corpus.getViewContent(id));
                textArea.setCaretPosition(0);
            } catch (IOException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            }
        }

        // Creates highlights around all occurrences of pattern in textComp
        public void highlight(JTextComponent textComp, String pattern) {
            // First remove all old highlights
            removeHighlights(textComp);

            try {
                Highlighter hilite = textComp.getHighlighter();
                Document doc = textComp.getDocument();
                String text = doc.getText(0, doc.getLength()).toLowerCase();
                int pos = 0;

                if ((pos = text.indexOf(pattern.toLowerCase(), pos)) >= 0) {
                    // Create highlighter using private painter and apply around pattern
                    hilite.addHighlight(pos, pos + pattern.length(), myHighlightPainter);
                    textArea.setCaretPosition(pos);
                    pos += pattern.length();
                }

                // find for pattern
                while ((pos = text.indexOf(pattern.toLowerCase(), pos)) >= 0) {
                    // Create highlighter using private painter and apply around pattern
                    hilite.addHighlight(pos, pos + pattern.length(), myHighlightPainter);
                    pos += pattern.length();
                }
            } catch (BadLocationException e) {
            }
        }

        // Removes only our private highlights
        public void removeHighlights(JTextComponent textComp) {
            Highlighter hilite = textComp.getHighlighter();
            Highlighter.Highlight[] hilites = hilite.getHighlights();

            for (int i = 0; i < hilites.length; i++) {
                if (hilites[i].getPainter() instanceof MyHighlightPainter) {
                    hilite.removeHighlight(hilites[i]);
                }
            }
        }

        // A private subclass of the default highlight painter
        class MyHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {

            public MyHighlightPainter(java.awt.Color color) {
                super(color);
            }

        }

        private JTextField filelabelField;
        private JPanel filelabelPanel;
        private JEditorPane textArea;
        private JScrollPane textAreaScrollPane;
        // An instance of the private subclass of the default highlight painter
        private HighlightPainter myHighlightPainter = new MyHighlightPainter(java.awt.Color.YELLOW);
    }

    private FilePane showedFilePane = null;
    private final int numberCharsAtTabTitle = 20;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JTabbedPane fileviewTabbedPane;
    private javax.swing.JButton highlightButton;
    private javax.swing.JLabel highlightLabel;
    private javax.swing.JPanel highlightPanel;
    private javax.swing.JTextField highlightTextField;
    private javax.swing.JToolBar highlightToolBar;
    // End of variables declaration//GEN-END:variables
}