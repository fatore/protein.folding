/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VisPipeline.java
 *
 * Created on 14/04/2009, 10:28:12
 */
package vispipeline.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.io.IOException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import vispipelinebasics.interfaces.AbstractParametersView;
import vispipeline.component.ComponentDropTargetListener;
import vispipeline.component.ComponentProxy;
import vispipeline.component.ComponentTransferHandler;
import vispipeline.component.ComponentsLoader;
import vispipeline.component.parameter.InputParameter;
import vispipeline.component.parameter.MultipleInputParameter;
import vispipeline.component.parameter.UniqueInputParameter;
import vispipeline.component.parameter.OutputParameter;
import vispipeline.component.parameter.Parameter;
import vispipeline.component.parameter.ParameterLink;
import vispipeline.pipeline.ExecuteEngine;
import vispipeline.pipeline.Pipeline;
import vispipeline.util.PIPFilter;
import vispipeline.util.VisPipelineConstants;
import visualizationbasics.util.OpenDialog;
import visualizationbasics.util.SaveDialog;
import visualizationbasics.util.PropertiesManager;

/**
 *
 * @author Fernando Vieira Paulovich
 */
public class VisPipeline extends javax.swing.JFrame {

    /** Creates new form VisPipeline */
    public VisPipeline() {
        try {
            initComponents();

            //solving the extended state on LINUX
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            setSize((int) (screenSize.width * 0.9), (int) (screenSize.height * 0.9));
            setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);

            //placing the editor split pane divider
            editorSplitPane.setDividerLocation((int) (screenSize.height * 0.7f));

            //creating the components tree (loading all components)
            comploader = new ComponentsLoader();
            componentsTree = new JTree(comploader.execute());
            componentsTree.setDragEnabled(true);
            componentsTree.setToggleClickCount(1);
            componentsTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
            componentsTree.setTransferHandler(new ComponentTransferHandler());
            componentsTree.addMouseListener(new TreeListener());
            componentsScrollPane.setViewportView(componentsTree);

            //create a new pipeline when starting the tool
            ((PipelineDrawPanel) drawPanel).setPipeline(new Pipeline());

            //resizing the draw panel
            drawPanel.setSize(drawPanel.getSize().width, screenSize.height);
            drawPanel.setPreferredSize(drawPanel.getSize());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainSplitPane = new javax.swing.JSplitPane();
        editorSplitPane = new javax.swing.JSplitPane();
        commandPanel = new javax.swing.JPanel();
        executePanel = new javax.swing.JPanel();
        stopButton = new javax.swing.JButton();
        executeButton = new javax.swing.JButton();
        wizardButton = new javax.swing.JButton();
        consoleScrollPane = new javax.swing.JScrollPane();
        consoleTextPane = new javax.swing.JTextPane();
        drawScrollPane = new javax.swing.JScrollPane();
        drawPanel = new PipelineDrawPanel(this);
        componentsScrollPane = new javax.swing.JScrollPane();
        componentsTree = new javax.swing.JTree();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openPipelineMenuItem = new javax.swing.JMenuItem();
        savePipelineMenuItem = new javax.swing.JMenuItem();
        newPipelineMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        deleteComponentMenuItem = new javax.swing.JMenuItem();
        resetPipelineMenuItem = new javax.swing.JMenuItem();
        toolMenu = new javax.swing.JMenu();
        optionsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VisPipeline");

        mainSplitPane.setDividerLocation(200);

        editorSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        editorSplitPane.setOneTouchExpandable(true);

        commandPanel.setLayout(new java.awt.BorderLayout());

        executePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        executePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Stop16.gif"))); // NOI18N
        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        executePanel.add(stopButton);

        executeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/FastForward16.gif"))); // NOI18N
        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });
        executePanel.add(executeButton);

        wizardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Play16.gif"))); // NOI18N
        wizardButton.setText("Wizard");
        wizardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wizardButtonActionPerformed(evt);
            }
        });
        executePanel.add(wizardButton);

        commandPanel.add(executePanel, java.awt.BorderLayout.SOUTH);

        consoleScrollPane.setViewportView(consoleTextPane);

        commandPanel.add(consoleScrollPane, java.awt.BorderLayout.CENTER);

        editorSplitPane.setBottomComponent(commandPanel);

        drawScrollPane.setViewportView(drawPanel);

        editorSplitPane.setLeftComponent(drawScrollPane);

        mainSplitPane.setRightComponent(editorSplitPane);

        componentsTree.setModel(null);
        componentsTree.setDragEnabled(true);
        componentsScrollPane.setViewportView(componentsTree);

        mainSplitPane.setLeftComponent(componentsScrollPane);

        getContentPane().add(mainSplitPane, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        openPipelineMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openPipelineMenuItem.setMnemonic('O');
        openPipelineMenuItem.setText("Open Pipeline");
        openPipelineMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPipelineMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openPipelineMenuItem);

        savePipelineMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        savePipelineMenuItem.setMnemonic('S');
        savePipelineMenuItem.setText("Save Pipeline");
        savePipelineMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePipelineMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(savePipelineMenuItem);

        newPipelineMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newPipelineMenuItem.setMnemonic('N');
        newPipelineMenuItem.setText("New Pipeline");
        newPipelineMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPipelineMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newPipelineMenuItem);

        mainMenuBar.add(fileMenu);

        editMenu.setText("Edit");

        deleteComponentMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        deleteComponentMenuItem.setMnemonic('D');
        deleteComponentMenuItem.setText("Delete Component");
        deleteComponentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteComponentMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteComponentMenuItem);

        resetPipelineMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        resetPipelineMenuItem.setMnemonic('R');
        resetPipelineMenuItem.setText("Reset Pipeline");
        resetPipelineMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPipelineMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(resetPipelineMenuItem);

        mainMenuBar.add(editMenu);

        toolMenu.setMnemonic('T');
        toolMenu.setText("Tool");

        optionsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        optionsMenuItem.setMnemonic('O');
        optionsMenuItem.setText("Options");
        optionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsMenuItemActionPerformed(evt);
            }
        });
        toolMenu.add(optionsMenuItem);

        mainMenuBar.add(toolMenu);

        setJMenuBar(mainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openPipelineMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPipelineMenuItemActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(VisPipelineConstants.PROPFILENAME);
            int result = OpenDialog.showOpenDialog(spm, new PIPFilter(), this);

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = OpenDialog.getFilename();
                Pipeline pipeline = Pipeline.load(filename);
                ((PipelineDrawPanel) drawPanel).setPipeline(pipeline);

                VisPipeline.ConsoleOutput.clear();
                VisPipeline.ConsoleOutput.append("[OPENED]: " + filename,
                        Color.BLACK, false, false, true);
            }
        } catch (IOException ex) {
            Logger.getLogger(VisPipeline.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openPipelineMenuItemActionPerformed

    private void savePipelineMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePipelineMenuItemActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(VisPipelineConstants.PROPFILENAME);
            int result = SaveDialog.showSaveDialog(spm, new PIPFilter(), this, "pipeline.pip");
            Pipeline pipeline = ((PipelineDrawPanel) drawPanel).getPipeline();

            if (result == JFileChooser.APPROVE_OPTION) {
                if (pipeline != null) {
                    String filename = SaveDialog.getFilename();
                    pipeline.save(filename);

                    VisPipeline.ConsoleOutput.append("[SAVED]: " + filename,
                            Color.BLACK, false, false, true);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(VisPipeline.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_savePipelineMenuItemActionPerformed

    private void newPipelineMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPipelineMenuItemActionPerformed
        ((PipelineDrawPanel) drawPanel).setPipeline(new Pipeline());

        VisPipeline.ConsoleOutput.clear();
        VisPipeline.ConsoleOutput.append("[NEW]: pipeline", Color.BLACK, false, false, true);
    }//GEN-LAST:event_newPipelineMenuItemActionPerformed

    private void deleteComponentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteComponentMenuItemActionPerformed
        Pipeline pipeline = ((PipelineDrawPanel) drawPanel).getPipeline();

        if (pipeline != null) {
            pipeline.deleteSelectedComponents();
            drawPanel.repaint();
        }
    }//GEN-LAST:event_deleteComponentMenuItemActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        Pipeline pipeline = ((PipelineDrawPanel) drawPanel).getPipeline();

        if (pipeline != null) {
            try {
                if (exengine != null) {
                    exengine.stop();
                }

                exengine = new ExecuteEngine((PipelineDrawPanel) drawPanel, pipeline);
                exengine.setThreadPoolSize(VisPipelineOptions.getInstance(this).getNumberSimutaneousThreads());
                exengine.start(false);
            } catch (IOException ex) {
                Logger.getLogger(VisPipeline.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_executeButtonActionPerformed

    private void wizardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wizardButtonActionPerformed
        Pipeline pipeline = ((PipelineDrawPanel) drawPanel).getPipeline();

        if (pipeline != null) {
            try {
                if (exengine != null) {
                    exengine.stop();
                }

                exengine = new ExecuteEngine((PipelineDrawPanel) drawPanel, pipeline);
                exengine.setThreadPoolSize(VisPipelineOptions.getInstance(this).getNumberSimutaneousThreads());
                exengine.start(true);
            } catch (IOException ex) {
                Logger.getLogger(VisPipeline.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_wizardButtonActionPerformed

    private void resetPipelineMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetPipelineMenuItemActionPerformed
        Pipeline pipeline = ((PipelineDrawPanel) drawPanel).getPipeline();

        if (pipeline != null) {
            pipeline.reset();
            drawPanel.repaint();
        }
    }//GEN-LAST:event_resetPipelineMenuItemActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (exengine != null) {
            exengine.stop();
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void optionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsMenuItemActionPerformed
        VisPipelineOptions.getInstance(this).display();
    }//GEN-LAST:event_optionsMenuItemActionPerformed

    public class PipelineDrawPanel extends JPanel {

        public PipelineDrawPanel(VisPipeline visfrm) {
            this.visfrm = visfrm;

            setBackground(Color.WHITE);

            //adding the mouse listeners
            MouseListener listener = new MouseListener();
            this.addMouseMotionListener(listener);
            this.addMouseListener(listener);
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;

            if (pipeline != null) {
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                pipeline.draw(g2);

                if (tmplink != null) {
                    tmplink.draw(g2);
                }
            }

            if (sourceret != null && targetret != null) {
                int x = Math.min(sourceret.x, targetret.x);
                int width = Math.abs(sourceret.x - targetret.x);

                int y = Math.min(sourceret.y, targetret.y);
                int height = Math.abs(sourceret.y - targetret.y);

                g2.setColor(Color.YELLOW);
                g2.drawRect(x, y, width, height);
                g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 0.45f));
                g2.fillRect(x, y, width, height);
                g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0f));
            }
        }

        public void setPipeline(Pipeline pipeline) {
            this.pipeline = pipeline;

            //create the drop control
            setDropTarget(new DropTarget(this, DnDConstants.ACTION_COPY,
                    new ComponentDropTargetListener(this, pipeline), true));

            repaint();
        }

        public Pipeline getPipeline() {
            return pipeline;
        }

        public VisPipeline getVisFramework() {
            return visfrm;
        }

        class MouseListener extends MouseAdapter implements MouseMotionListener {

            @Override
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                super.mouseMoved(evt);

                if (pipeline != null) {
                    if (param == null) {
                        param = pipeline.isInsideParameter(evt.getPoint());

                        if (param != null) {
                            param.setSelected(true);
                            repaint();
                        } else {
                            param = null;
                        }

                    } else {
                        Parameter param_aux = pipeline.isInsideParameter(evt.getPoint());

                        if (param != param_aux) {
                            param.setSelected(false);
                            param = param_aux;

                            if (param != null) {
                                param.setSelected(true);
                            }

                            repaint();
                        }
                    }
                }
            }

            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                super.mouseDragged(evt);

                if (pipeline != null) {
                    if (comp != null) {
                        //change the component position
                        Point newpos = new Point(evt.getPoint());
                        newpos.x = newpos.x - comp.getWidth() / 2;
                        newpos.y = newpos.y - comp.getHeight() / 2;
                        comp.setPosition(newpos);

                        //resize the panel if it is necessary
                        Dimension size = PipelineDrawPanel.this.getSize();
                        Dimension prefsize = PipelineDrawPanel.this.getPreferredSize();

                        int maxwidth = Math.max((int) size.getWidth(), (int) prefsize.getWidth());
                        int maxheight = Math.max((int) size.getHeight(), (int) prefsize.getHeight());

                        int reswidth = Math.max(maxwidth, newpos.x + (comp.getWidth() * 2));
                        int resheight = Math.max(maxheight, newpos.y + (comp.getHeight() * 2));

                        PipelineDrawPanel.this.setSize(new Dimension(reswidth, resheight));
                        PipelineDrawPanel.this.setPreferredSize(new Dimension(reswidth, resheight));

                        repaint();
                    } else if (tmplink != null) {
                        tmplink.setFreePosition(evt.getPoint());

                        if (param == null) {
                            param = pipeline.isInsideParameter(evt.getPoint());

                            if (pipeline.canBeLinked(param, tmplink.getParameter())) {
                                param.setSelected(true);
                            } else {
                                param = null;
                            }

                        } else {
                            Parameter param_aux = pipeline.isInsideParameter(evt.getPoint());

                            if (param != param_aux) {
                                param.setSelected(false);
                                param = param_aux;

                                if (param != null) {
                                    param.setSelected(true);
                                }
                            }
                        }

                        repaint();
                    } else if (sourceret != null) {
                        //get the second point to draw
                        targetret = evt.getPoint();
                        repaint();
                    }
                }
            }

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                super.mouseClicked(evt);

                if (evt.getClickCount() == 1) {
                    boolean shouldrepaint = false;

                    //clean all selected components
                    for (ComponentProxy c : pipeline.getComponents()) {
                        if (c.isSelected()) {
                            c.setSelected(false);
                            shouldrepaint = true;
                        }
                    }

                    comp = pipeline.isInsideComponent(evt.getPoint());

                    //if a component is found, select it
                    if (comp != null) {
                        comp.setSelected(true);
                        shouldrepaint = true;
                    }

                    //only repaint if it is necessary
                    if (shouldrepaint) {
                        repaint();
                    }
                } else if (evt.getClickCount() == 2) {
                    comp = pipeline.isInsideComponent(evt.getPoint());

                    //if two clicks are executed, call the parameters editor of
                    //the component
                    if (comp != null) {
                        AbstractParametersView parameditor = comp.getParametersEditor();

                        if (parameditor != null) {
                            ParametersEditorDialog.getInstance(VisPipeline.this, parameditor).display();
                        }
                    }
                }
            }

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                super.mousePressed(evt);

                if (pipeline != null) {
                    //get the component the mouse is inside
                    comp = pipeline.isInsideComponent(evt.getPoint());

                    //if the mouse is not inside a component
                    if (comp == null) {
                        //get the parameter the mouse is inside
                        param = pipeline.isInsideParameter(evt.getPoint());

                        //if the component is inside a parameter
                        if (param != null) {
                            //if it is a input parameter
                            if (param instanceof UniqueInputParameter) {
                                OutputParameter output = ((UniqueInputParameter) param).getOutputParameter();

                                //if it has a link to an output, remove it
                                if (output != null) {
                                    output.removeInputParameter((UniqueInputParameter) param);
                                    tmplink = new ParameterLink(output);
                                } else {
                                    //otherwise create the link
                                    tmplink = new ParameterLink(param);
                                }
                            } else if (param instanceof MultipleInputParameter) {
                                ArrayList<OutputParameter> outs = ((MultipleInputParameter) param).getOutputParameters();

                                if (outs.size() > 0) {
                                    outs.get(0).removeInputParameter((InputParameter) param);
                                    tmplink = new ParameterLink(outs.get(0));
                                } else {
                                    //otherwise create the link
                                    tmplink = new ParameterLink(param);
                                }
                            } else {
                                //otherwise create the link
                                tmplink = new ParameterLink(param);
                            }
                        } else {
                            //get the first point to draw the selection rectangle
                            sourceret = evt.getPoint();
                        }
                    }
                }
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                super.mouseReleased(evt);

                if (pipeline != null) {
                    comp = null;

                    if (tmplink != null) {
                        Parameter target = pipeline.isInsideParameter(evt.getPoint());

                        if (pipeline.canBeLinked(target, tmplink.getParameter())) {
                            target.setSelected(false);

                            Parameter input = (target instanceof InputParameter) ? target : tmplink.getParameter();
                            Parameter output = (target instanceof OutputParameter) ? target : tmplink.getParameter();
                            ((OutputParameter) output).addInputParameter((InputParameter) input);
                        }

                        tmplink = null;

                        repaint();
                    } else if (sourceret != null && targetret != null) {
                        //get the selected components
                        for (int i = 0; i < pipeline.getComponents().size(); i++) {
                            ComponentProxy component = pipeline.getComponents().get(i);

                            if (component.isInside(sourceret, targetret)) {
                                component.setSelected(true);
                            } else {
                                component.setSelected(false);
                            }
                        }

                        sourceret = null;
                        targetret = null;

                        repaint();
                    }
                }
            }

            private ComponentProxy comp;
            private Parameter param;
        }

        private ParameterLink tmplink; //used to draw the temp link between parameters
        private Point sourceret; //used to select points with the retangle
        private Point targetret; //used to select points with the retangle
        private Pipeline pipeline;
        private VisPipeline visfrm;
    }

    public static class ConsoleOutput {

        public static void clear() {
            if (consoleTextPane != null) {
                consoleTextPane.setText("");
            }
        }

        public static void append(String msg, Color color, boolean bold,
                boolean italic, boolean showtime) {
            if (consoleTextPane != null) {
                String completedate = "";

                if (showtime) {
                    GregorianCalendar gc = new GregorianCalendar();
                    DateFormat format = DateFormat.getDateInstance();
                    String date = format.format(gc.getTime());
                    completedate = date + " " +
                            gc.get(GregorianCalendar.HOUR) + ":" +
                            gc.get(GregorianCalendar.MINUTE) + ":" +
                            gc.get(GregorianCalendar.SECOND) + " ";
                }

                msg = completedate + msg + "\r\n";

                if (attributeSet == null) {
                    attributeSet = new SimpleAttributeSet();
                }

                if (doc == null) {
                    doc = consoleTextPane.getStyledDocument();
                }

                StyleConstants.setForeground(attributeSet, color);
                StyleConstants.setItalic(attributeSet, italic);
                StyleConstants.setBold(attributeSet, bold);

                try {
                    doc.insertString(doc.getLength(), msg, attributeSet);
                } catch (BadLocationException ex) {
                    Logger.getLogger(VisPipeline.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        private static SimpleAttributeSet attributeSet; // Atributos do jTextPane
        private static Document doc;  // Documento que vc estará formatando
    }

    public class TreeListener extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent e) {
            int x = e.getX();
            int y = e.getY();
            int row = componentsTree.getRowForLocation(x, y);

            if (e.getButton() == MouseEvent.BUTTON1) {
                expand(componentsTree.getPathForRow(row), componentsTree.isExpanded(row));
            } else if (e.getButton() == MouseEvent.BUTTON3) {
                if (componentsTree.isExpanded(row)) {
                    componentsTree.collapseRow(row);
                } else {
                    componentsTree.expandRow(row);
                }
            }
        }

        private void expand(TreePath parent, boolean expand) {
            if (parent != null) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) parent.getLastPathComponent();

                if (node.getChildCount() >= 0) {
                    Enumeration e = node.children();
                    while (e.hasMoreElements()) {
                        DefaultMutableTreeNode n = (DefaultMutableTreeNode) e.nextElement();
                        TreePath path = parent.pathByAddingChild(n);
                        expand(path, expand);
                    }
                }

                if (expand) {
                    componentsTree.expandPath(parent);
                } else {
                    componentsTree.collapsePath(parent);
                }
            }
        }

    }

    private ComponentsLoader comploader;
    private ExecuteEngine exengine;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel commandPanel;
    private javax.swing.JScrollPane componentsScrollPane;
    private javax.swing.JTree componentsTree;
    private javax.swing.JScrollPane consoleScrollPane;
    private static javax.swing.JTextPane consoleTextPane;
    private javax.swing.JMenuItem deleteComponentMenuItem;
    private javax.swing.JPanel drawPanel;
    private javax.swing.JScrollPane drawScrollPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JSplitPane editorSplitPane;
    private javax.swing.JButton executeButton;
    private javax.swing.JPanel executePanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JMenuItem newPipelineMenuItem;
    private javax.swing.JMenuItem openPipelineMenuItem;
    private javax.swing.JMenuItem optionsMenuItem;
    private javax.swing.JMenuItem resetPipelineMenuItem;
    private javax.swing.JMenuItem savePipelineMenuItem;
    private javax.swing.JButton stopButton;
    private javax.swing.JMenu toolMenu;
    private javax.swing.JButton wizardButton;
    // End of variables declaration//GEN-END:variables
    }
