/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TopicsTreeTool.java
 *
 * Created on Jul 22, 2010, 4:09:10 PM
 */
package topics3d.surface;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Observable;
import javax.swing.Icon;
import javax.swing.JColorChooser;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import projection3d.model.Projection3DModel;
import projection3d.view.tools.JOpacityChooser;
import topics3d.Topic3D;
import visualizationbasics.view.ModelViewer;
import vtk.vtkSurfaceActor;

/**
 *
 * @author jpocom
 */
public class TopicsTreeTool extends ModelViewer {

    /** Creates new form TopicsTreeTool */
    public TopicsTreeTool() {
        initComponents();

        clustersTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
        clustersTree.addMouseListener(new TreeListener());
        clustersTree.addTreeSelectionListener(new CustomSelectionListener());
        clustersTree.setCellRenderer(new CustomTreeCellRenderer());
        clustersScrollPane.setViewportView(clustersTree);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clusterMenu = new javax.swing.JPopupMenu();
        clusterOption = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        colorOption = new javax.swing.JMenuItem();
        opacityOption = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        deleteOption = new javax.swing.JMenuItem();
        clustersScrollPane = new javax.swing.JScrollPane();
        clustersTree = new javax.swing.JTree();
        buttonPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();

        clusterOption.setText("Cluster");
        clusterOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clusterOptionActionPerformed(evt);
            }
        });
        clusterMenu.add(clusterOption);
        clusterMenu.add(jSeparator1);

        colorOption.setText("Change color");
        colorOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorOptionActionPerformed(evt);
            }
        });
        clusterMenu.add(colorOption);

        opacityOption.setText("Change opacity");
        opacityOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opacityOptionActionPerformed(evt);
            }
        });
        clusterMenu.add(opacityOption);
        clusterMenu.add(jSeparator2);

        deleteOption.setText("Delete");
        deleteOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOptionActionPerformed(evt);
            }
        });
        clusterMenu.add(deleteOption);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Topics");

        clustersTree.setModel(null);
        clustersScrollPane.setViewportView(clustersTree);

        getContentPane().add(clustersScrollPane, java.awt.BorderLayout.CENTER);

        buttonPanel.setPreferredSize(new java.awt.Dimension(400, 33));

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        clustersTree.setSelectionPaths(null);
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void clusterOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clusterOptionActionPerformed
        if (model != null) {
            ClusteringView.getInstance(TopicsTreeTool.this).display((Projection3DModel) model, clustersTree);
        }
    }//GEN-LAST:event_clusterOptionActionPerformed

    private void deleteOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOptionActionPerformed
        if (model != null) {
            for (TreePath path : clustersTree.getSelectionPaths()) {
                DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();
                if (selectedNode != null && !selectedNode.isRoot()) {
                    ((Projection3DModel) model).removeSurface(selectedNode);
                    ((DefaultTreeModel)clustersTree.getModel()).removeNodeFromParent(selectedNode);
                }
            }
            model.notifyObservers();
        }
    }//GEN-LAST:event_deleteOptionActionPerformed

    private void colorOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorOptionActionPerformed
        if (model != null) {
            boolean first = true;
            Color color = null;
            for (TreePath path : clustersTree.getSelectionPaths()) {
                DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();
                if (!selectedNode.isRoot()) {
                    vtkSurfaceActor actor = (vtkSurfaceActor) selectedNode.getUserObject();


                    if (first) {
                        color = JColorChooser.showDialog(this, "Choose Color",
                                actor.getColor());
                        first = false;
                    }

                    if (color != null) {
                        actor.setColor(color);
                    }
                }
            }
            model.setChanged();
            model.notifyObservers();
        }
    }//GEN-LAST:event_colorOptionActionPerformed

    private void opacityOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opacityOptionActionPerformed
        if (model != null) {
            float opacity = -1;
            boolean first = true;
            for (TreePath path : clustersTree.getSelectionPaths()) {
                DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();
                if (!selectedNode.isRoot()) {
                    vtkSurfaceActor actor = (vtkSurfaceActor) selectedNode.getUserObject();

                    if (first) {
                        opacity = JOpacityChooser.showDialog(this, "Choose Opacity",
                                (float) actor.GetProperty().GetOpacity());
                        first = false;
                    }
                    if (opacity != -1) {
                        actor.GetProperty().SetOpacity(opacity);
                    }
                }
            }
            model.setChanged();
            model.notifyObservers();
        }
    }//GEN-LAST:event_opacityOptionActionPerformed

    @Override
    public void update(Observable o, Object arg) {
        Projection3DModel model3D = (Projection3DModel) model;
        if (clustersTree.getModel() == null) {
            clustersTree.setModel(new DefaultTreeModel(model3D.getRoot()));
        }
    }

    public class TreeListener extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent e) {
            int selRow = clustersTree.getRowForLocation(e.getX(), e.getY());
            if (selRow != -1) {
                clustersTree.addSelectionRow(selRow);
                if (e.getButton() == MouseEvent.BUTTON3) { // right click
                    clusterOption.setEnabled(clustersTree.getSelectionCount() == 1);
                    clusterMenu.show(rootPane, e.getX(), e.getY());
                }
            }
        }
    }

    class CustomSelectionListener implements TreeSelectionListener {

        @Override
        public void valueChanged(TreeSelectionEvent e) {
            ArrayList<DefaultMutableTreeNode> clusterSelecteds = new ArrayList<DefaultMutableTreeNode>();
            if (clustersTree.getSelectionPaths() != null) {
                for (TreePath path : clustersTree.getSelectionPaths()) {
                    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();
                    clusterSelecteds.add(selectedNode);
                }
                model.setChanged();
                model.notifyObservers(clusterSelecteds);
            }
        }
    }

    class ColorIcon implements Icon {

        public ColorIcon(Color color) {
            this.color = color;
        }

        @Override
        public void paintIcon(Component c, Graphics g, int x, int y) {
            g.setColor(color);
            g.fill3DRect(x, y, getIconWidth(), getIconHeight(), true);
        }

        @Override
        public int getIconWidth() {
            return 10;
        }

        @Override
        public int getIconHeight() {
            return 10;
        }
        private Color color;
    }

    class CustomTreeCellRenderer extends DefaultTreeCellRenderer {

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value,
                boolean selection, boolean expanded,
                boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, selection, expanded,
                    leaf, row, hasFocus);

            DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
            if (node.isRoot()) {
                setIcon(new ColorIcon(Color.BLACK));
                setText("Root");
            } else {
                Topic3D topic = (Topic3D) node.getUserObject();
                setIcon(new ColorIcon(topic.getActor().getColor()));
                setText(topic.toString());
            }
            return this;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPopupMenu clusterMenu;
    private javax.swing.JMenuItem clusterOption;
    private javax.swing.JScrollPane clustersScrollPane;
    private javax.swing.JTree clustersTree;
    private javax.swing.JMenuItem colorOption;
    private javax.swing.JMenuItem deleteOption;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem opacityOption;
    // End of variables declaration//GEN-END:variables
}
