/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TopicProjection3DFrame.java
 *
 * Created on 22/06/2009, 19:53:11
 */
package topics3d.view;

import distance.dissimilarity.DissimilarityFactory.DissimilarityType;
import visualizationbasics.view.selection.AbstractSelection;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionAdapter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.tree.DefaultMutableTreeNode;
import matrix.AbstractMatrix;
import visualizationbasics.util.SaveDialog;
import projection.util.ProjectionConstants;
import visualizationbasics.util.filter.PNGFilter;
import projection.util.filter.XMLFilter;
import projection.view.JExtendedComboBox;
import projection.view.selection.InstanceSelection;
import projection.view.selection.RangeSelection;
import projection.view.selection.coordination.CoordinationSelectionFactory;
import projection.view.tools.JoinScalars;
import projection.view.tools.MultidimensionalClusteringView;
import textprocessing.corpus.Corpus;
import textprocessing.corpus.zip.ZipCorpus;
import textprocessing.processing.PreprocessorComp;
import topics3d.Topic3DClusters;
import topics3d.TopicFactory.TopicType;
import topics3d.model.TopicProjection3DInstance;
import topics3d.model.TopicProjection3DModel;
import topics3d.model.TopicProjection3DModelComp;
import topics3d.model.XMLTopic3DModelReader;
import topics3d.model.XMLTopic3DModelWriter;
import topics3d.selection.TopicSelection;
import topics3d.selection.ViewContentSelection;
import topics3d.util.OpenDialog;
import visualizationbasics.coordination.AbstractCoordinator;
import visualizationbasics.model.AbstractInstance;
import visualizationbasics.model.AbstractModel;
import projection.model.Scalar;
import projection.util.ProjectionUtil;
import projection3d.lsp.LSPProjection3DComp;
import projection3d.model.Projection3DInstance;
import projection3d.model.Projection3DModel;
import projection3d.model.Projection3DModel.TypeGlyph;
import projection3d.util.Projection3DUtil;
import projection3d.view.tools.SilhouetteCoefficientView;
import textprocessing.processing.stemmer.StemmerFactory.StemmerType;
import topics.view.MultipleFileView;
import topics3d.Topic3D;
import topics3d.model.XMLTopic3DModelReaderComp;
import topics3d.surface.TopicsTreeTool;
import visualizationbasics.coordination.IdentityCoordinator;
import visualizationbasics.util.PropertiesManager;
import visualizationbasics.util.filter.DATAFilter;
import visualizationbasics.util.filter.SCALARFilter;
import visualizationbasics.view.MemoryCheck;
import visualizationbasics.view.MessageDialog;
import visualizationbasics.view.ModelViewer;
import vtk.vtkActor;
import vtk.vtkCellPicker;
import vtk.vtkCoordinate;
import vtk.vtkOutlineFilter;
import vtk.vtkPNGWriter;
import vtk.vtkPanel;
import vtk.vtkPolyDataMapper;
import vtk.vtkRenderLargeImage;
import vtk.vtkSurfaceActor;
import vtk.vtkTextActor;
import vtk.vtkWindowToImageFilter;

/**
 *
 * @author Fernando Vieira Paulovich
 */
public class TopicProjection3DFrame extends ModelViewer {

    static {
        System.loadLibrary("vtkCommonJava");
        System.loadLibrary("vtkFilteringJava");
        System.loadLibrary("vtkGraphicsJava");
        System.loadLibrary("vtkImagingJava");
        System.loadLibrary("vtkIOJava");
        System.loadLibrary("vtkGraphicsJava");
        System.loadLibrary("vtkRenderingJava");
        System.loadLibrary("vtkVolumeRenderingJava");
    }

    /** Creates new form TopicProjection3DFrame */
    public TopicProjection3DFrame() {
        this.scalarComboModel = new DefaultComboBoxModel();
        this.view = new View3DPanel();

        initComponents();
        this.viewerPanel.add(this.view);

        addSelection(new InstanceSelection(this));
        addSelection(new RangeSelection(this));
        addSelection(new TopicSelection(this));
        addSelection(new ViewContentSelection(this));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectionButtonGroup = new javax.swing.ButtonGroup();
        controlPanel = new javax.swing.JPanel();
        verticaltoolbarPanel = new javax.swing.JPanel();
        selectionToolBar = new javax.swing.JToolBar();
        fixedToolBar = new javax.swing.JToolBar();
        moveInstancesToggleButton = new javax.swing.JToggleButton();
        cleanInstancesButton = new javax.swing.JButton();
        showTopicsToggleButton = new javax.swing.JToggleButton();
        showallTopicsToggleButton = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        windowSplitPane = new javax.swing.JSplitPane();
        pointsPanel = new javax.swing.JPanel();
        allPointsPanel = new javax.swing.JPanel();
        dataSearchPanel = new javax.swing.JPanel();
        searchLabel = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        goButton = new javax.swing.JButton();
        scrollPanePoints = new javax.swing.JScrollPane();
        pointsList = new javax.swing.JList(plistmodel);
        optionTabbedPane = new javax.swing.JTabbedPane();
        contentPanel = new javax.swing.JPanel();
        fileContentScrollPane = new javax.swing.JScrollPane();
        fileContentEditorPane = new javax.swing.JEditorPane();
        fileTitleTextField = new javax.swing.JTextField();
        dataPanel = new javax.swing.JPanel();
        viewerPanel = new javax.swing.JPanel();
        scalarPanel = new javax.swing.JPanel();
        colorLabel = new javax.swing.JLabel();
        scalarCombo = new JExtendedComboBox(this.scalarComboModel);
        statusBar_jPanel = new javax.swing.JPanel();
        status_jLabel = new javax.swing.JLabel();
        horizontalToolbarPanel = new javax.swing.JPanel();
        toolBar = new javax.swing.JToolBar();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        separatorLabel1 = new javax.swing.JLabel();
        toolButton = new javax.swing.JButton();
        treeButton = new javax.swing.JButton();
        separatorLabel5 = new javax.swing.JLabel();
        searchToolBar = new javax.swing.JToolBar();
        searchPanel = new javax.swing.JPanel();
        searchToolbarLabel = new javax.swing.JLabel();
        searchToolbarTextField = new javax.swing.JTextField();
        goToolbarButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        fileOpen = new javax.swing.JMenuItem();
        fileSave = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JSeparator();
        exportMenu = new javax.swing.JMenu();
        fileExportToPng = new javax.swing.JMenuItem();
        fileExportToHRPng = new javax.swing.JMenuItem();
        fileExportToProjection = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        editClean = new javax.swing.JMenuItem();
        editDelete = new javax.swing.JMenuItem();
        menuTool = new javax.swing.JMenu();
        memoryCheckMenuItem = new javax.swing.JMenuItem();
        separatorOptions1 = new javax.swing.JSeparator();
        scalarMenu = new javax.swing.JMenu();
        importScalarsOption = new javax.swing.JMenuItem();
        exportScalarsOption = new javax.swing.JMenuItem();
        joinScalarsOptions = new javax.swing.JMenuItem();
        separatorOptions2 = new javax.swing.JSeparator();
        clusteringMenu = new javax.swing.JMenu();
        multidimensionalMenuItem = new javax.swing.JMenuItem();
        silhouetteCoefficientMenuItem = new javax.swing.JMenuItem();
        separatorOptions4 = new javax.swing.JSeparator();
        topicTreeOption = new javax.swing.JMenuItem();
        topicMenu = new javax.swing.JMenu();
        clusterTopicsMenuItem = new javax.swing.JMenuItem();
        separatorOptions3 = new javax.swing.JSeparator();
        toolOptions = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        controlPanel.setLayout(new java.awt.BorderLayout());

        verticaltoolbarPanel.setLayout(new java.awt.BorderLayout(0, 20));

        selectionToolBar.setOrientation(1);
        verticaltoolbarPanel.add(selectionToolBar, java.awt.BorderLayout.CENTER);

        fixedToolBar.setOrientation(1);
        fixedToolBar.setRollover(true);

        moveInstancesToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/navigation/Forward16.gif"))); // NOI18N
        moveInstancesToggleButton.setToolTipText("Move Point");
        moveInstancesToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveInstancesToggleButtonActionPerformed(evt);
            }
        });
        fixedToolBar.add(moveInstancesToggleButton);

        cleanInstancesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Edit16.gif"))); // NOI18N
        cleanInstancesButton.setToolTipText("Clean Instances");
        cleanInstancesButton.setFocusable(false);
        cleanInstancesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cleanInstancesButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cleanInstancesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanInstancesButtonActionPerformed(evt);
            }
        });
        fixedToolBar.add(cleanInstancesButton);

        showTopicsToggleButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        showTopicsToggleButton.setText(" H ");
        showTopicsToggleButton.setFocusable(false);
        showTopicsToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showTopicsToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        showTopicsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTopicsToggleButtonActionPerformed(evt);
            }
        });
        fixedToolBar.add(showTopicsToggleButton);

        showallTopicsToggleButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        showallTopicsToggleButton.setText(" S ");
        showallTopicsToggleButton.setFocusable(false);
        showallTopicsToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showallTopicsToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        showallTopicsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showallTopicsToggleButtonActionPerformed(evt);
            }
        });
        fixedToolBar.add(showallTopicsToggleButton);

        jToggleButton1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jToggleButton1.setText(" C ");
        jToggleButton1.setFocusable(false);
        jToggleButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        fixedToolBar.add(jToggleButton1);

        verticaltoolbarPanel.add(fixedToolBar, java.awt.BorderLayout.NORTH);

        controlPanel.add(verticaltoolbarPanel, java.awt.BorderLayout.EAST);

        windowSplitPane.setDividerLocation(250);
        windowSplitPane.setOneTouchExpandable(true);

        pointsPanel.setMinimumSize(new java.awt.Dimension(200, 256));
        pointsPanel.setPreferredSize(new java.awt.Dimension(100, 256));
        pointsPanel.setLayout(new java.awt.GridLayout(2, 0));

        allPointsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Instances"));
        allPointsPanel.setPreferredSize(new java.awt.Dimension(100, 107));
        allPointsPanel.setLayout(new java.awt.BorderLayout(5, 5));

        dataSearchPanel.setPreferredSize(new java.awt.Dimension(10, 23));
        dataSearchPanel.setLayout(new java.awt.BorderLayout(5, 5));

        searchLabel.setText("Search");
        dataSearchPanel.add(searchLabel, java.awt.BorderLayout.WEST);

        searchTextField.setColumns(10);
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
        });
        dataSearchPanel.add(searchTextField, java.awt.BorderLayout.CENTER);

        goButton.setText("...");
        goButton.setMaximumSize(new java.awt.Dimension(29, 23));
        goButton.setMinimumSize(new java.awt.Dimension(29, 23));
        goButton.setPreferredSize(new java.awt.Dimension(29, 23));
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });
        dataSearchPanel.add(goButton, java.awt.BorderLayout.EAST);

        allPointsPanel.add(dataSearchPanel, java.awt.BorderLayout.NORTH);

        scrollPanePoints.setBorder(javax.swing.BorderFactory.createTitledBorder("Labels"));

        pointsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        pointsList.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pointsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pointsListMouseClicked(evt);
            }
        });
        scrollPanePoints.setViewportView(pointsList);

        allPointsPanel.add(scrollPanePoints, java.awt.BorderLayout.CENTER);

        pointsPanel.add(allPointsPanel);

        optionTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        contentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("File Content"));
        contentPanel.setLayout(new java.awt.BorderLayout(3, 3));

        fileContentScrollPane.setAutoscrolls(true);

        fileContentEditorPane.setEditable(false);
        fileContentEditorPane.setAutoscrolls(false);
        fileContentScrollPane.setViewportView(fileContentEditorPane);

        contentPanel.add(fileContentScrollPane, java.awt.BorderLayout.CENTER);

        fileTitleTextField.setEditable(false);
        contentPanel.add(fileTitleTextField, java.awt.BorderLayout.NORTH);

        optionTabbedPane.addTab("Content", contentPanel);

        pointsPanel.add(optionTabbedPane);

        windowSplitPane.setLeftComponent(pointsPanel);

        dataPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dataPanel.setLayout(new java.awt.BorderLayout());

        viewerPanel.setBackground(new java.awt.Color(255, 255, 255));
        viewerPanel.setLayout(new java.awt.BorderLayout());
        dataPanel.add(viewerPanel, java.awt.BorderLayout.CENTER);

        scalarPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        colorLabel.setText("Color");
        scalarPanel.add(colorLabel);

        scalarCombo.setMaximumSize(new java.awt.Dimension(85, 27));
        scalarCombo.setMinimumSize(new java.awt.Dimension(85, 27));
        scalarCombo.setPreferredSize(new java.awt.Dimension(125, 27));
        scalarCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                scalarComboItemStateChanged(evt);
            }
        });
        scalarPanel.add(scalarCombo);

        dataPanel.add(scalarPanel, java.awt.BorderLayout.NORTH);

        windowSplitPane.setRightComponent(dataPanel);

        controlPanel.add(windowSplitPane, java.awt.BorderLayout.CENTER);

        statusBar_jPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusBar_jPanel.setPreferredSize(new java.awt.Dimension(30, 30));

        status_jLabel.setText("                      ");
        statusBar_jPanel.add(status_jLabel);

        controlPanel.add(statusBar_jPanel, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(controlPanel, java.awt.BorderLayout.CENTER);

        horizontalToolbarPanel.setLayout(new java.awt.BorderLayout());

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Open16.gif"))); // NOI18N
        openButton.setToolTipText("Open an existing projection");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        toolBar.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Save16.gif"))); // NOI18N
        saveButton.setToolTipText("Save the current projection");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        toolBar.add(saveButton);

        separatorLabel1.setText("       ");
        toolBar.add(separatorLabel1);

        toolButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Preferences16.gif"))); // NOI18N
        toolButton.setToolTipText("Tool Preferences");
        toolButton.setMaximumSize(new java.awt.Dimension(29, 27));
        toolButton.setMinimumSize(new java.awt.Dimension(29, 27));
        toolButton.setPreferredSize(new java.awt.Dimension(29, 27));
        toolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolButtonActionPerformed(evt);
            }
        });
        toolBar.add(toolButton);

        treeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projection3d/icons/tree.gif"))); // NOI18N
        treeButton.setToolTipText("Topics Tool");
        treeButton.setFocusable(false);
        treeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        treeButton.setMaximumSize(new java.awt.Dimension(29, 27));
        treeButton.setMinimumSize(new java.awt.Dimension(29, 27));
        treeButton.setPreferredSize(new java.awt.Dimension(29, 27));
        treeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        treeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeButtonActionPerformed(evt);
            }
        });
        toolBar.add(treeButton);

        separatorLabel5.setText("       ");
        toolBar.add(separatorLabel5);

        horizontalToolbarPanel.add(toolBar, java.awt.BorderLayout.WEST);

        searchToolBar.setRollover(true);

        searchPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        searchToolbarLabel.setText("Search");
        searchPanel.add(searchToolbarLabel);

        searchToolbarTextField.setColumns(15);
        searchToolbarTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchToolbarTextFieldKeyPressed(evt);
            }
        });
        searchPanel.add(searchToolbarTextField);

        goToolbarButton.setText("...");
        goToolbarButton.setFocusable(false);
        goToolbarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        goToolbarButton.setMaximumSize(new java.awt.Dimension(29, 27));
        goToolbarButton.setMinimumSize(new java.awt.Dimension(29, 27));
        goToolbarButton.setPreferredSize(new java.awt.Dimension(29, 27));
        goToolbarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        goToolbarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToolbarButtonActionPerformed(evt);
            }
        });
        searchPanel.add(goToolbarButton);

        searchToolBar.add(searchPanel);

        horizontalToolbarPanel.add(searchToolBar, java.awt.BorderLayout.CENTER);

        getContentPane().add(horizontalToolbarPanel, java.awt.BorderLayout.NORTH);

        menuFile.setMnemonic('F');
        menuFile.setText("File");

        fileOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        fileOpen.setMnemonic('O');
        fileOpen.setText("Open Projection");
        fileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenActionPerformed(evt);
            }
        });
        menuFile.add(fileOpen);

        fileSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fileSave.setMnemonic('S');
        fileSave.setText("Save Projection");
        fileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveActionPerformed(evt);
            }
        });
        menuFile.add(fileSave);
        menuFile.add(separator1);

        exportMenu.setText("Export");

        fileExportToPng.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        fileExportToPng.setMnemonic('P');
        fileExportToPng.setText("Export PNG File");
        fileExportToPng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExportToPngActionPerformed(evt);
            }
        });
        exportMenu.add(fileExportToPng);

        fileExportToHRPng.setText("Export High Res PNG File");
        fileExportToHRPng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExportToHRPngActionPerformed(evt);
            }
        });
        exportMenu.add(fileExportToHRPng);

        fileExportToProjection.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        fileExportToProjection.setMnemonic('J');
        fileExportToProjection.setText("Export 3D Points File");
        fileExportToProjection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExportToProjectionActionPerformed(evt);
            }
        });
        exportMenu.add(fileExportToProjection);

        menuFile.add(exportMenu);

        menuBar.add(menuFile);

        menuEdit.setMnemonic('E');
        menuEdit.setText("Edit");

        editClean.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        editClean.setMnemonic('C');
        editClean.setText("Clean Projection");
        editClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCleanActionPerformed(evt);
            }
        });
        menuEdit.add(editClean);

        editDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        editDelete.setMnemonic('D');
        editDelete.setText("Delete Points");
        editDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDeleteActionPerformed(evt);
            }
        });
        menuEdit.add(editDelete);

        menuBar.add(menuEdit);

        menuTool.setMnemonic('T');
        menuTool.setText("Tool");

        memoryCheckMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        memoryCheckMenuItem.setMnemonic('H');
        memoryCheckMenuItem.setText("Memory Check");
        memoryCheckMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryCheckMenuItemActionPerformed(evt);
            }
        });
        menuTool.add(memoryCheckMenuItem);
        menuTool.add(separatorOptions1);

        scalarMenu.setText("Scalar");

        importScalarsOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        importScalarsOption.setMnemonic('S');
        importScalarsOption.setText("Import Scalars");
        importScalarsOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importScalarsOptionActionPerformed(evt);
            }
        });
        scalarMenu.add(importScalarsOption);

        exportScalarsOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        exportScalarsOption.setMnemonic('x');
        exportScalarsOption.setText("Export Scalars");
        exportScalarsOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportScalarsOptionActionPerformed(evt);
            }
        });
        scalarMenu.add(exportScalarsOption);

        joinScalarsOptions.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        joinScalarsOptions.setMnemonic('J');
        joinScalarsOptions.setText("Join Scalars");
        joinScalarsOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinScalarsOptionsActionPerformed(evt);
            }
        });
        scalarMenu.add(joinScalarsOptions);

        menuTool.add(scalarMenu);
        menuTool.add(separatorOptions2);

        clusteringMenu.setMnemonic('C');
        clusteringMenu.setText("Clustering");

        multidimensionalMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        multidimensionalMenuItem.setText("Multidimensional Data");
        multidimensionalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multidimensionalMenuItemActionPerformed(evt);
            }
        });
        clusteringMenu.add(multidimensionalMenuItem);

        silhouetteCoefficientMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        silhouetteCoefficientMenuItem.setText("Silhouette Coefficient");
        silhouetteCoefficientMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                silhouetteCoefficientMenuItemActionPerformed(evt);
            }
        });
        clusteringMenu.add(silhouetteCoefficientMenuItem);

        menuTool.add(clusteringMenu);
        menuTool.add(separatorOptions4);

        topicTreeOption.setText("Topics Tree");
        topicTreeOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topicTreeOptionActionPerformed(evt);
            }
        });
        menuTool.add(topicTreeOption);

        topicMenu.setText("Topic");

        clusterTopicsMenuItem.setText("Extract Topics Clustering");
        clusterTopicsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clusterTopicsMenuItemActionPerformed(evt);
            }
        });
        topicMenu.add(clusterTopicsMenuItem);

        menuTool.add(topicMenu);
        menuTool.add(separatorOptions3);

        toolOptions.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        toolOptions.setMnemonic('O');
        toolOptions.setText("Tool Options");
        toolOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolOptionsActionPerformed(evt);
            }
        });
        menuTool.add(toolOptions);

        menuBar.add(menuTool);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenActionPerformed
        try {
            XMLTopic3DModelReaderComp reader = new XMLTopic3DModelReaderComp();
            Projection3DUtil.showDialog(reader);
            reader.execute();

            TopicProjection3DFrameComp frame = new TopicProjection3DFrameComp();
            Projection3DUtil.showDialog(frame);
            frame.input(reader.output());
            frame.execute();
        } catch (IOException ex) {
            Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_fileOpenActionPerformed

    private void fileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveActionPerformed
        if (model != null) {
            try {
                PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
                int result = SaveDialog.showSaveDialog(spm, new XMLFilter(), this, "model.xml");

                if (result == JFileChooser.APPROVE_OPTION) {
                    String filename = SaveDialog.getFilename();

                    try {
                        XMLTopic3DModelWriter mwriter = new XMLTopic3DModelWriter();
                        mwriter.write((TopicProjection3DModel) model, filename);
                    } catch (IOException e) {
                        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
                        JOptionPane.showMessageDialog(this, e.getMessage(),
                                "Problems saving the file", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_fileSaveActionPerformed

    private void fileExportToPngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExportToPngActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
            int result = SaveDialog.showSaveDialog(spm, new PNGFilter(), this, "image.png");

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = SaveDialog.getFilename();

                view.saveToPngImageFile(filename);
            }
        } catch (IOException ex) {
            Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_fileExportToPngActionPerformed

    private void fileExportToProjectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExportToProjectionActionPerformed
        if (model != null) {
            try {
                PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
                int result = SaveDialog.showSaveDialog(spm, new DATAFilter(), this, "projection.data");

                if (result == JFileChooser.APPROVE_OPTION) {
                    String filename = SaveDialog.getFilename();

                    try {
                        AbstractMatrix matrix = Projection3DUtil.modelToMatrix((TopicProjection3DModel) model, getCurrentScalar());
                        matrix.save(filename);
                    } catch (IOException e) {
                        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
                        JOptionPane.showMessageDialog(this, e.getMessage(),
                                "Problems saving the file", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_fileExportToProjectionActionPerformed

    private void editCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCleanActionPerformed
        if (view != null) {
            view.cleanSelectedInstances();
        }
}//GEN-LAST:event_editCleanActionPerformed

    private void editDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDeleteActionPerformed
        if (view != null) {
            //view.removeSelectedInstances();
        }
}//GEN-LAST:event_editDeleteActionPerformed

    private void memoryCheckMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryCheckMenuItemActionPerformed
        MemoryCheck.showMemoryCheck();
}//GEN-LAST:event_memoryCheckMenuItemActionPerformed

    private void importScalarsOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importScalarsOptionActionPerformed
        if (view != null) {
            try {
                PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
                int result = OpenDialog.showOpenDialog(spm, new SCALARFilter(), this);

                if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
                    if (model != null) {
                        final MessageDialog dialog = MessageDialog.show(this, "Importing scalars...");

                        Thread t = new Thread() {

                            @Override
                            public void run() {
                                try {
                                    String filename = OpenDialog.getFilename();
                                    ProjectionUtil.importScalars((TopicProjection3DModel) model, filename);
                                    updateScalars(null);
                                } catch (IOException ex) {
                                    Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
                                } finally {
                                    dialog.close();
                                }
                            }
                        };

                        t.start();
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_importScalarsOptionActionPerformed

    private void exportScalarsOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportScalarsOptionActionPerformed
        if (view != null) {
            try {
                PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
                int result = SaveDialog.showSaveDialog(spm, new SCALARFilter(), this, "scalars.scalar");

                if (result == JFileChooser.APPROVE_OPTION) {
                    if (model != null) {
                        String filename = SaveDialog.getFilename();
                        ProjectionUtil.exportScalars((TopicProjection3DModel) model, filename);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_exportScalarsOptionActionPerformed

    private void toolOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolOptionsActionPerformed
        TopicProjection3DFameOptions.getInstance(this).display(this);
}//GEN-LAST:event_toolOptionsActionPerformed

    private void toolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolButtonActionPerformed
        toolOptionsActionPerformed(evt);
}//GEN-LAST:event_toolButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        fileSaveActionPerformed(evt);
}//GEN-LAST:event_saveButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        fileOpenActionPerformed(evt);
}//GEN-LAST:event_openButtonActionPerformed

    private void moveInstancesToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveInstancesToggleButtonActionPerformed
        moveinstances = moveInstancesToggleButton.isSelected();
}//GEN-LAST:event_moveInstancesToggleButtonActionPerformed

    private void cleanInstancesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanInstancesButtonActionPerformed
        editCleanActionPerformed(evt);
}//GEN-LAST:event_cleanInstancesButtonActionPerformed

    private void joinScalarsOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinScalarsOptionsActionPerformed
        if (model != null) {
            Scalar s = JoinScalars.getInstance(this).display((TopicProjection3DModel) model);
            updateScalars(s);
        }
}//GEN-LAST:event_joinScalarsOptionsActionPerformed

    private void multidimensionalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multidimensionalMenuItemActionPerformed
        if (model != null) {
            Scalar s = MultidimensionalClusteringView.getInstance(this).display((TopicProjection3DModel) model);
            updateScalars(s);
        }
}//GEN-LAST:event_multidimensionalMenuItemActionPerformed

    private void silhouetteCoefficientMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_silhouetteCoefficientMenuItemActionPerformed
        if (model != null) {
            try {
                SilhouetteCoefficientView.getInstance(this).display((TopicProjection3DModel) model, getCurrentScalar());
                updateScalars(null);
            } catch (IOException ex) {
                Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_silhouetteCoefficientMenuItemActionPerformed

    private void searchToolbarTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchToolbarTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            this.goToolbarButtonActionPerformed(null);
        }
}//GEN-LAST:event_searchToolbarTextFieldKeyPressed

    private void goToolbarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToolbarButtonActionPerformed
        if (model != null) {
            try {
                if (OpenDialog.checkCorpus((TopicProjection3DModel) model, this)) {
                    Scalar s = ((TopicProjection3DModel) model).createQueryScalar(searchToolbarTextField.getText());
                    updateScalars(s);
                }
            } catch (IOException ex) {
                Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_goToolbarButtonActionPerformed

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            this.goButtonActionPerformed(null);
        }
}//GEN-LAST:event_searchTextFieldKeyPressed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        if (model != null) {
            Pattern p = Pattern.compile(this.searchTextField.getText().trim().toLowerCase());

            int begin = this.pointsList.getSelectedIndex() + 1;
            int end = model.getInstances().size() - 1;

            boolean stop = false;
            boolean restart = true;
            while (!stop) {
                for (int i = begin; i <= end; i++) {
                    Matcher m = p.matcher(plistmodel.get(i).toString().trim().toLowerCase());
                    if (m.find()) {
                        pointsList.setSelectedIndex(i);
                        pointsList.ensureIndexIsVisible(i);
                        model.setSelectedInstance((TopicProjection3DInstance) plistmodel.get(i));
                        model.notifyObservers();
                        stop = true;
                        break;
                    }
                }

                if (restart) {
                    end = begin - 2;
                    begin = 0;
                    restart = false;
                } else {
                    stop = true;
                }
            }
        }
}//GEN-LAST:event_goButtonActionPerformed

    private void pointsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pointsListMouseClicked
        if (model != null) {
            javax.swing.JList source = (javax.swing.JList) evt.getSource();
            TopicProjection3DInstance instance = (TopicProjection3DInstance) source.getSelectedValue();

            if (evt.getClickCount() == 1) {
                try {
                    if (OpenDialog.checkCorpus((TopicProjection3DModel) model, this)) {
                        showContent(((TopicProjection3DModel) model).getCorpus(), instance);
                    }

                    model.setSelectedInstance((TopicProjection3DInstance) pointsList.getSelectedValue());
                    model.notifyObservers();
                } catch (IOException ex) {
                    Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (evt.getClickCount() == 2) {
                try {
                    if (OpenDialog.checkCorpus((TopicProjection3DModel) model, this)) {
                        MultipleFileView.getInstance(this).display(instance,
                                ((TopicProjection3DModel) model).getCorpus());
                    }

                    model.setSelectedInstance((TopicProjection3DInstance) pointsList.getSelectedValue());
                    model.notifyObservers();
                } catch (IOException ex) {
                    Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
}//GEN-LAST:event_pointsListMouseClicked

    private void showTopicsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTopicsToggleButtonActionPerformed
        highlighttopic = showTopicsToggleButton.isSelected();
        view.repaint();
}//GEN-LAST:event_showTopicsToggleButtonActionPerformed

    private void showallTopicsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showallTopicsToggleButtonActionPerformed
        if (model != null) {
            ((TopicProjection3DModel) model).setShowTopics(showallTopicsToggleButton.isSelected());
            model.notifyObservers(Boolean.FALSE);
        }
    }//GEN-LAST:event_showallTopicsToggleButtonActionPerformed

    private void clusterTopicsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clusterTopicsMenuItemActionPerformed
        if (model != null) {
            try {
                Topic3DClusters tclusters = new Topic3DClusters();
                tclusters.execute((TopicProjection3DModel) model,
                        Topic3DClusters.ClusteringType.KMEANS, TopicType.COVARIANCE, view);
                updateScalars(tclusters.getScalar());
            } catch (IOException ex) {
                Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_clusterTopicsMenuItemActionPerformed

    private void scalarComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_scalarComboItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            Scalar scalar = (Scalar) scalarCombo.getSelectedItem();

            if (scalar != null) {
                view.colorAs(scalar);
            }
        }
    }//GEN-LAST:event_scalarComboItemStateChanged

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        if (model != null) {
            ((TopicProjection3DModel) model).cleanSelectedInstances();
            ((TopicProjection3DModel) model).getTopics().clear();
            //setShowTopics(showallTopicsToggleButton.isSelected());
            model.notifyObservers(Boolean.FALSE);
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void treeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeButtonActionPerformed
        TopicsTreeTool treeViewer = new TopicsTreeTool();
        treeViewer.setSize(300, 500);
        treeViewer.setModel(model);
        Point position = this.getLocation();
        treeViewer.setLocation(position.x + this.getWidth(), position.y);
        treeViewer.setVisible(true);

        IdentityCoordinator coord = new IdentityCoordinator();
        treeViewer.addCoordinator(coord);
        this.addCoordinator(coord);

        model.setChanged();
        model.notifyObservers();
}//GEN-LAST:event_treeButtonActionPerformed

    private void fileExportToHRPngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExportToHRPngActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
            int result = SaveDialog.showSaveDialog(spm, new PNGFilter(), this, "image.png");

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = SaveDialog.getFilename();

                view.saveToPngImageFileHR(filename);
            }
        } catch (IOException ex) {
            Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fileExportToHRPngActionPerformed

    private void topicTreeOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topicTreeOptionActionPerformed
        treeButtonActionPerformed(evt);
    }//GEN-LAST:event_topicTreeOptionActionPerformed

    @Override
    public void setModel(AbstractModel model) {
        if (model instanceof TopicProjection3DModel) {
            if (model != null) {
                super.setModel(model);

                Scalar scalar = ((TopicProjection3DModel) model).getSelectedScalar();

                if (scalar != null) {
                    updateScalars(scalar);
                } else {
                    updateScalars(((TopicProjection3DModel) model).getScalars().get(0));
                }

                //setting the lists
                fileTitleTextField.setText("");
                fileContentEditorPane.setText("");

                plistmodel.clear();

                for (int i = 0; i < model.getInstances().size(); i++) {
                    plistmodel.add(i, model.getInstances().get(i));
                }

                pointsList.repaint();

                view.setModel((TopicProjection3DModel) model);
            }
        }
    }

    public void addSelection(final AbstractSelection selection) {
        if (selection != null) {
            JToggleButton button = new JToggleButton();
            selectionButtonGroup.add(button);
            button.setIcon(selection.getIcon());
            button.setSelected(false);
            button.setToolTipText(selection.toString());

            button.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    if (view != null) {
                        view.setSelection(selection);
                    }
                }
            });

            selectionToolBar.add(button);
        }
    }

    public void updateScalars(Scalar scalar) {
        scalarComboModel.removeAllElements();
        for (Scalar s : ((TopicProjection3DModel) model).getScalars()) {
            scalarComboModel.addElement(s);
        }

        if (scalar != null) {
            scalarCombo.setSelectedItem(scalar);
            ((TopicProjection3DModel) model).setSelectedScalar(scalar);
        } else {
            scalarCombo.setSelectedItem(((TopicProjection3DModel) model).getSelectedScalar());
        }

        model.setChanged();
        model.notifyObservers();
        pointsList.repaint();
    }

    public void setViewerBackground(Color bg) {
        if (view != null) {
            view.setBackground(bg);
            view.repaint();
        }
    }

    public Scalar getCurrentScalar() {
        return (Scalar) scalarCombo.getSelectedItem();
    }

    public View3DPanel getView() {
        return view;
    }

    public boolean isHighQualityRender() {
        return highqualityrender;
    }

    public void setHighQualityRender(boolean highqualityrender) {
        this.highqualityrender = highqualityrender;

        //view.cleanImage();
        view.repaint();
    }

    public boolean isShowInstanceLabel() {
        return showinstancelabel;
    }

    public void setShowInstanceLabel(boolean showinstancelabel) {
        this.showinstancelabel = showinstancelabel;

        //view.cleanImage();
        view.repaint();
    }

    public boolean isMoveInstances() {
        return moveinstances;
    }

    public void setMoveInstance(boolean moveinstances) {
        this.moveinstances = moveinstances;
    }

    @Override
    public void update(Observable o, Object arg) {
        //if (model != null) {
        //    if (arg == null || arg == Boolean.TRUE) {
        //        view.cleanImage();
        //    }

        //    view.repaint();
        //    pointsList.repaint();
        //}
        if (model != null) {
            if (arg instanceof ArrayList) {
                ArrayList<DefaultMutableTreeNode> selecteds = (ArrayList<DefaultMutableTreeNode>) arg;
                Enumeration<DefaultMutableTreeNode> e = ((Projection3DModel)model).getRoot().breadthFirstEnumeration();
                while(e.hasMoreElements()) {
                    DefaultMutableTreeNode node = e.nextElement();
                    if (!node.isRoot()) {
                        vtkSurfaceActor actor = ((Topic3D)node.getUserObject()).getActor();
                        if (selecteds.contains(node))
                            actor.SetVisibility(1);
                        else
                            actor.SetVisibility(0);
                    }
                }
            }
            view.repaint();
        }
    }

    @Override
    public void addCoordinator(AbstractCoordinator coordinator) {
        super.addCoordinator(coordinator);
        addSelection(CoordinationSelectionFactory.getInstance(coordinator, this));
    }

    public void showContent(Corpus corpus, TopicProjection3DInstance instance) {
        if (corpus != null && instance != null) {
            int id = instance.getId();

//            if (filename.endsWith(".html") || filename.endsWith(".htm")) {
//                fileContentEditorPane.setContentType("text/html");
//            }

            fileTitleTextField.setText(instance.toString());
            fileTitleTextField.setCaretPosition(0);

            try {
                fileContentEditorPane.setText(corpus.getViewContent(id));
                fileContentEditorPane.setCaretPosition(0);
            } catch (IOException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void changeStatus(String status) {
        this.status_jLabel.setText(status);
        this.status_jLabel.update(this.status_jLabel.getGraphics());
        Rectangle r = this.status_jLabel.getGraphicsConfiguration().getBounds();
        //this.status_jLabel.getGraphics().fillRect(r.x, r.y, r.width, r.height);
        this.status_jLabel.getGraphics().clearRect(r.x, r.y, r.width, r.height);
        this.status_jLabel.update(this.status_jLabel.getGraphics());
    }

    public void showOutline(boolean show) {
        if (view != null) {
            view.showOutline(show);
            view.repaint();
        }
    }

    public class View3DPanel extends vtkPanel {

        public View3DPanel() {
            super();
            this.setBackground(java.awt.Color.GRAY);
            picker = new vtkCellPicker();
            picker.SetTolerance(0.001);
            coord = new vtkCoordinate();
            coord.SetCoordinateSystemToWorld();

            this.addMouseMotionListener(new MouseMotionListener());
            this.addMouseListener(new MouseClickedListener());
        }

        @Override
        public void paint(Graphics g) {
            if (model != null) {
                lock();
                if (currentText != null) {
                    if (label != null && labelpos != null) {
                        currentText.SetInput(label);
                        currentText.SetPosition(labelpos.x, labelpos.y);
                        currentText.VisibilityOn();
                    } else {
                        currentText.VisibilityOff();
                    }
                }

                ((TopicProjection3DModel) model).draw(this.GetRenderer());

                Render();
                unlock();
            }
        }

        public void setModel(TopicProjection3DModel model) {
            ((TopicProjection3DModel) model).setRenderer(this.GetRenderer());

            // outline
            outline = new vtkOutlineFilter();
            outline.SetInput(model.getPolydata());

            outlineMapper = new vtkPolyDataMapper();
            outlineMapper.SetInput(outline.GetOutput());

            outlineActor = new vtkActor();
            outlineActor.SetMapper(outlineMapper);
            outlineActor.SetVisibility(0);


            // text
            currentText = new vtkTextActor();
            currentText.GetTextProperty().BoldOn();
            currentText.GetTextProperty().SetFontFamilyToCourier();
            currentText.GetTextProperty().SetFontSize(18);
            currentText.GetTextProperty().ShadowOn();

            ren.AddActor(model.getActor());
            ren.AddActor(currentText);
            ren.AddActor(outlineActor);

            resetCamera();
            repaint();
        }

        public void colorAs(Scalar scalar) {
            if (model != null) {
                ((TopicProjection3DModel) model).setSelectedScalar(scalar);
                model.notifyObservers();
            }
        }

        @Override
        public void setBackground(Color c) {
            GetRenderer().SetBackground(c.getRed() / 255., c.getGreen() / 255., c.getBlue() / 255.);
        }

        public void cleanSelectedInstances() {
            if (model != null) {
                ((TopicProjection3DModel) model).hideAllSurfaces();
                model.cleanSelectedInstances();
                model.notifyObservers();
            }
        }

        public void setSelection(AbstractSelection selection) {
            this.selection = selection;
        }

        private void saveToPngImageFile(String filename) {
            lock();
            rw.OffScreenRenderingOn();
            vtkWindowToImageFilter filter = new vtkWindowToImageFilter();
            filter.SetInput(rw);

            vtkPNGWriter writer = new vtkPNGWriter();
            writer.SetInput(filter.GetOutput());
            writer.SetFileName(filename);
            writer.Write();
            rw.OffScreenRenderingOff();
            unlock();
        }

        private void saveToPngImageFileHR(String filename) {
            lock();
            rw.OffScreenRenderingOn();

            vtkRenderLargeImage renderLarge = new vtkRenderLargeImage();
            renderLarge.SetInput(view.GetRenderer());
            renderLarge.SetMagnification(5);

            vtkPNGWriter pnW = new vtkPNGWriter();
            pnW.SetFileName(filename);
            pnW.SetInput(renderLarge.GetOutput());
            pnW.Write();

            rw.OffScreenRenderingOff();
            unlock();
        }

        public vtkActor getOutlineActor() {
            return outlineActor;
        }

        public void showOutline(boolean show) {
            outlineActor.SetVisibility(show ? 1 : 0);
        }

        class MouseMotionListener extends MouseMotionAdapter {

            @Override
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                super.mouseMoved(evt);

                if (model == null) {
                    return;
                }
                int cellId = picker.Pick(evt.getX(), getHeight() - evt.getY(), 0, GetRenderer());
                if (cellId == 0 || (cellId = picker.GetCellId()) == -1) {
                    //Clear the label
                    label = null;
                    labelpos = null;
                    if (selectedSurf != null) {
                        selectedSurf.GetProperty().SetRepresentationToSurface();
                        selectedSurf = null;
                    }


                    repaint();
                    return;
                }

                if (picker.GetActor() instanceof vtkSurfaceActor) {
                    if (selectedSurf != null && selectedSurf != picker.GetActor()) {
                        selectedSurf.GetProperty().SetRepresentationToSurface();
                    }
                    selectedSurf = (vtkSurfaceActor) picker.GetActor();

                    selectedSurf.GetProperty().SetRepresentationToWireframe();
                    repaint();
                } else if (picker.GetActor() instanceof vtkActor) { // Picking Points
                    Projection3DInstance inst = ((Projection3DModel) model).getInstancesById(cellId);
                    if (inst != null) {
                        label = inst.toString();
                        if (label.trim().length() > 0) {
                            if (label.length() > 100) {
                                label = label.substring(0, 96) + "...";
                            }
                            double space = ((TopicProjection3DModel) model).getSphereRadius();
                            coord.SetValue(inst.getX() + space, inst.getY() + space, inst.getZ() + space);
                            double[] values = coord.GetComputedDoubleViewportValue(ren);

                            labelpos = new Point((int) values[0], (int) values[1]);
                        }
                    } else {
                        //Clear the label
                        label = null;
                        labelpos = null;
                    }
                    repaint();
                }
            }
        }

        class MouseClickedListener extends MouseAdapter {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                super.mouseClicked(evt);

                if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
                    if (model == null) {
                        return;
                    }
                    int cellId = picker.Pick(evt.getX(), getHeight() - evt.getY(), 0, GetRenderer());
                    if (cellId == 0 || (cellId = picker.GetCellId()) == -1) {
                        return;
                    }

                    if (picker.GetActor() instanceof vtkSurfaceActor) {
                        ArrayList<AbstractInstance> tempInstances = ((vtkSurfaceActor) picker.GetActor()).getInstances();
                        changeStatus("Number of Instances in Selection: " + tempInstances.size());

                        if (evt.getClickCount() == 1) {
                            model.setSelectedInstances(tempInstances);

                            model.notifyObservers();
                        }

                    } else { // Picking Points
                        Projection3DInstance inst = ((TopicProjection3DModel) model).getInstancesById(cellId);
                        changeStatus("Number of Instances in Selection: " + 0);
                        if (inst != null) {
                            changeStatus("Number of Instances in Selection: " + 1);
                            if (evt.getClickCount() == 1) {
                                model.setSelectedInstance(inst);
                                model.notifyObservers();
                            }

                        }
                    }
                    if (selection != null) {
                        selection.selected(model.getSelectedInstances());
                    }
                } else if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
                    cleanSelectedInstances();
                    changeStatus("Number of Instances in Selection: " + 0);
                }
            }
        }
        private String label;
        private Point labelpos;
        private AbstractSelection selection;
        private vtkCellPicker picker;
        private vtkCoordinate coord;
        private vtkTextActor currentText;
        // outline
        private vtkOutlineFilter outline;
        private vtkPolyDataMapper outlineMapper;
        private vtkActor outlineActor;
        // Surface
        private vtkSurfaceActor selectedSurf = null;
    }

    public static void main(String[] args) {
        try {
            Corpus corpus = new ZipCorpus("/Volumes/Data/Users/jpocom/Documents/Mestrado/Dataset/vispipeline/cbr-ilp-ir-son-int.zip", 1);
            PreprocessorComp ppcomp = new PreprocessorComp();
            ppcomp.setLowerCut(10);
            ppcomp.setUpperCut(-1);
            ppcomp.setNumberGrams(1);
            ppcomp.setStemmer(StemmerType.ENGLISH);
            ppcomp.input(corpus);
            ppcomp.execute();
            AbstractMatrix matrix = ppcomp.outputMatrix();
            ArrayList<String> labels = ppcomp.outputLabels();

            LSPProjection3DComp lsp3d = new LSPProjection3DComp();
            lsp3d.setDissimilarityType(DissimilarityType.COSINE_BASED);
            lsp3d.setNumberIterations(50);
            lsp3d.setFractionDelta(8.f);
            lsp3d.setNumberControlPoints(68);
            lsp3d.setNumberNeighbors(10);
            lsp3d.input(matrix);
            lsp3d.execute();
            AbstractMatrix proj = lsp3d.output();

            TopicProjection3DModelComp mcomp = new TopicProjection3DModelComp();
            mcomp.input(proj, labels);
            mcomp.execute();
            TopicProjection3DModel model = mcomp.output();

            TopicProjection3DFrameComp fcomp1 = new TopicProjection3DFrameComp();
            fcomp1.input(model);
            fcomp1.execute();
        } catch (IOException ex) {
            Logger.getLogger(TopicProjection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private DefaultListModel plistmodel = new DefaultListModel();
    private DefaultComboBoxModel scalarComboModel;
    private boolean highqualityrender = true;
    private boolean showinstancelabel = true;
    private boolean moveinstances = true;
    private boolean highlighttopic = false;
    private View3DPanel view;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel allPointsPanel;
    private javax.swing.JButton cleanInstancesButton;
    private javax.swing.JMenuItem clusterTopicsMenuItem;
    private javax.swing.JMenu clusteringMenu;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JPanel dataSearchPanel;
    private javax.swing.JMenuItem editClean;
    private javax.swing.JMenuItem editDelete;
    private javax.swing.JMenu exportMenu;
    private javax.swing.JMenuItem exportScalarsOption;
    private javax.swing.JEditorPane fileContentEditorPane;
    private javax.swing.JScrollPane fileContentScrollPane;
    private javax.swing.JMenuItem fileExportToHRPng;
    private javax.swing.JMenuItem fileExportToPng;
    private javax.swing.JMenuItem fileExportToProjection;
    private javax.swing.JMenuItem fileOpen;
    private javax.swing.JMenuItem fileSave;
    private javax.swing.JTextField fileTitleTextField;
    private javax.swing.JToolBar fixedToolBar;
    private javax.swing.JButton goButton;
    private javax.swing.JButton goToolbarButton;
    private javax.swing.JPanel horizontalToolbarPanel;
    private javax.swing.JMenuItem importScalarsOption;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JMenuItem joinScalarsOptions;
    private javax.swing.JMenuItem memoryCheckMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuTool;
    private javax.swing.JToggleButton moveInstancesToggleButton;
    private javax.swing.JMenuItem multidimensionalMenuItem;
    private javax.swing.JButton openButton;
    private javax.swing.JTabbedPane optionTabbedPane;
    private javax.swing.JList pointsList;
    private javax.swing.JPanel pointsPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox scalarCombo;
    private javax.swing.JMenu scalarMenu;
    private javax.swing.JPanel scalarPanel;
    private javax.swing.JScrollPane scrollPanePoints;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JToolBar searchToolBar;
    private javax.swing.JLabel searchToolbarLabel;
    private javax.swing.JTextField searchToolbarTextField;
    private javax.swing.ButtonGroup selectionButtonGroup;
    private javax.swing.JToolBar selectionToolBar;
    private javax.swing.JSeparator separator1;
    private javax.swing.JLabel separatorLabel1;
    private javax.swing.JLabel separatorLabel5;
    private javax.swing.JSeparator separatorOptions1;
    private javax.swing.JSeparator separatorOptions2;
    private javax.swing.JSeparator separatorOptions3;
    private javax.swing.JSeparator separatorOptions4;
    private javax.swing.JToggleButton showTopicsToggleButton;
    private javax.swing.JToggleButton showallTopicsToggleButton;
    private javax.swing.JMenuItem silhouetteCoefficientMenuItem;
    private javax.swing.JPanel statusBar_jPanel;
    private javax.swing.JLabel status_jLabel;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JButton toolButton;
    private javax.swing.JMenuItem toolOptions;
    private javax.swing.JMenu topicMenu;
    private javax.swing.JMenuItem topicTreeOption;
    private javax.swing.JButton treeButton;
    private javax.swing.JPanel verticaltoolbarPanel;
    private javax.swing.JPanel viewerPanel;
    private javax.swing.JSplitPane windowSplitPane;
    // End of variables declaration//GEN-END:variables
}
