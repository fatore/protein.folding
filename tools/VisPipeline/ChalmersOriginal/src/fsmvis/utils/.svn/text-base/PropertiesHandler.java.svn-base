/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is FSMvis .
 *
 * The Initial Developer of the Original Code is
 * Alistair Morrison, Greg Ross.
 * Portions created by the Initial Developer are Copyright (C) 2000-2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Matthew Chalmers <matthew@dcs.gla.ac.uk>
 *                 Alistair Morrison <morrisaj@dcs.gla.ac.uk>
 *                 Greg Ross <gr@dcs.gla.ac.uk>
 *                 Andrew Didsbury
 *	
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/**
 * FSM visualiser
 * 
 * PropertiesHandler
 * 
 *
 */
package fsmvis.utils;

import java.util.Properties;
import java.io.IOException;
import java.io.InputStream;
import java.io.FileInputStream;

public class PropertiesHandler {

    protected Properties prop;
    protected final String DEFAULT_EXT = ".properties";
    public PropertiesHandler(Object o) throws NoPropertiesException {
        try {

            String name = o.getClass().getName().substring(
                    o.getClass().getName().lastIndexOf('.') + 1);

            prop = new Properties();

            InputStream input = o.getClass().getResourceAsStream(name + DEFAULT_EXT);

            if (input == null) {
                throw new NoPropertiesException("NoFile");
            }

            prop.load(input);
        } catch (IOException ioe) {
            throw new NoPropertiesException();
        }
    }

    /**
     *
     *
     * @param  o
     * @param  name  
     */
    public PropertiesHandler(Object o, String name) throws NoPropertiesException {
        try {
            //System.out.println("prop hand name = "+name);

            //System.out.println("class = "+o.getClass().getName());

            prop = new Properties();

            InputStream input = o.getClass().
                    getResourceAsStream(name + DEFAULT_EXT);

            if (input == null) {
                throw new NoPropertiesException();
            }

            prop.load(input);

        } catch (IOException ioe) {

            throw new NoPropertiesException();
        }
    }

    /**
     * constructor:
     *
     * @param name
     */
    public PropertiesHandler(String name) throws NoPropertiesException {
        try {

            //System.out.println("prop hand name = "+name);

            prop = new Properties();

            InputStream input = new FileInputStream(name + DEFAULT_EXT);

            if (input == null) {
                throw new NoPropertiesException();
            }

            prop.load(input);

        } catch (IOException ioe) {

            throw new NoPropertiesException();
        }


    }

    /**
     * returns the properties object generated by this class
     *
     * @return The properties object
     */
    public Properties getProperties() {
        return prop;
    }

    /**
     *
     * 
     * @param key
     * @return
     */
    public String getProperty(String key) {
        return prop.getProperty(key);
    }

}
