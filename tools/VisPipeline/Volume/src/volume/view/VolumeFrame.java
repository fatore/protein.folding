/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VolumeFrame.java
 *
 * Created on 11/08/2009, 14:43:33
 */
package volume.view;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import visualizationbasics.coordination.AbstractCoordinator;
import visualizationbasics.coordination.IdentityCoordinator;
import visualizationbasics.model.AbstractInstance;
import visualizationbasics.model.AbstractModel;
import visualizationbasics.util.BasicsContants;
import visualizationbasics.util.OpenDialog;
import visualizationbasics.util.PropertiesManager;
import visualizationbasics.util.SaveDialog;
import visualizationbasics.util.filter.BINFilter;
import visualizationbasics.util.filter.VTKFilter;
import visualizationbasics.view.ModelViewer;
import volume.model.VolumeModel;
import vtk.*;

/**
 *
 * @author Danilo Medeiros Eler
 */
public class VolumeFrame extends ModelViewer {

    static {
        System.loadLibrary("vtkCommon");
        System.loadLibrary("vtkFiltering");
        System.loadLibrary("vtkGraphics");
        System.loadLibrary("vtkImaging");
        System.loadLibrary("vtksys");
        System.loadLibrary("vtkexpat");
        System.loadLibrary("vtkfreetype");
        System.loadLibrary("vtkftgl");
        System.loadLibrary("vtkjpeg");
        System.loadLibrary("vtkzlib");
        System.loadLibrary("vtktiff");
        System.loadLibrary("vtkpng");
        System.loadLibrary("vtkDICOMParser");
        System.loadLibrary("vtkIO");
        System.loadLibrary("vtkRendering");

        System.loadLibrary("vtkCommonJava");
        System.loadLibrary("vtkFilteringJava");
        System.loadLibrary("vtkIOJava");
        System.loadLibrary("vtkImagingJava");
        System.loadLibrary("vtkGraphicsJava");
        System.loadLibrary("vtkRenderingJava");
    }

    /** Creates new form VolumeFrame */
    public VolumeFrame() {
        initComponents();
        this.surfaceModel = (DefaultTableModel) this.surfaces_jTable.getModel();
        //this.volumePanel.add(this.vPanel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        volumePanel = new javax.swing.JPanel();
        sufaceFittingPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        isoValue_jText = new javax.swing.JTextField();
        smooth_jText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        storeButton = new javax.swing.JButton();
        surfacePanel = new javax.swing.JPanel();
        surfaceManipulationPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        viewStoredjButton = new javax.swing.JButton();
        scalarTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        surfaces_jTable = new javax.swing.JTable();
        viewStoredjButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        saveSurface_jButton = new javax.swing.JButton();
        storedPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Volume View Frame");
        setMinimumSize(new java.awt.Dimension(500, 500));
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        volumePanel.setBackground(new java.awt.Color(102, 102, 102));
        volumePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        volumePanel.setMinimumSize(new java.awt.Dimension(400, 400));
        volumePanel.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Volume", volumePanel);

        sufaceFittingPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sufaceFittingPanel.setMinimumSize(new java.awt.Dimension(400, 200));
        sufaceFittingPanel.setPreferredSize(new java.awt.Dimension(598, 50));
        sufaceFittingPanel.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 100));

        jLabel1.setText("Iso-Value");

        isoValue_jText.setText("255");

        smooth_jText.setText("1");

        jLabel2.setText("Smooth: # Interactions");

        jButton1.setText("Surface Fitting");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        storeButton.setText("Store Surface");
        storeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(isoValue_jText)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(smooth_jText, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(storeButton)
                    .addComponent(jButton1))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isoValue_jText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(smooth_jText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(storeButton)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        sufaceFittingPanel.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        surfacePanel.setBackground(new java.awt.Color(102, 102, 102));
        surfacePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        surfacePanel.setMinimumSize(new java.awt.Dimension(400, 400));
        surfacePanel.setPreferredSize(new java.awt.Dimension(4, 300));
        surfacePanel.setLayout(new java.awt.BorderLayout());
        sufaceFittingPanel.add(surfacePanel, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Surface", sufaceFittingPanel);

        surfaceManipulationPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        surfaceManipulationPanel.setMinimumSize(new java.awt.Dimension(400, 200));
        surfaceManipulationPanel.setPreferredSize(new java.awt.Dimension(598, 50));
        surfaceManipulationPanel.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setPreferredSize(new java.awt.Dimension(200, 150));

        viewStoredjButton.setText("View Selected");
        viewStoredjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewStoredjButtonActionPerformed(evt);
            }
        });

        scalarTextField.setText("0");

        jScrollPane1.setMinimumSize(new java.awt.Dimension(250, 250));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(250, 250));

        surfaces_jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Surface", "Alpha", "R", "G", "B"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        surfaces_jTable.setMinimumSize(new java.awt.Dimension(200, 200));
        surfaces_jTable.setPreferredSize(new java.awt.Dimension(200, 200));
        jScrollPane1.setViewportView(surfaces_jTable);

        viewStoredjButton1.setText("Apply Scalar");
        viewStoredjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewStoredjButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Scalar Index");

        saveSurface_jButton.setText("Save Selected");
        saveSurface_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSurface_jButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(viewStoredjButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveSurface_jButton, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewStoredjButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(scalarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(saveSurface_jButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewStoredjButton)
                        .addGap(8, 8, 8)
                        .addComponent(viewStoredjButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scalarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        surfaceManipulationPanel.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        storedPanel.setBackground(new java.awt.Color(102, 102, 102));
        storedPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        storedPanel.setMinimumSize(new java.awt.Dimension(400, 400));
        storedPanel.setPreferredSize(new java.awt.Dimension(4, 300));
        storedPanel.setLayout(new java.awt.BorderLayout());
        surfaceManipulationPanel.add(storedPanel, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Stored", surfaceManipulationPanel);

        getContentPane().add(jTabbedPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private double minVal(double a[]) {
        int i;
        double min = 0;
        if (a.length > 0) {
            min = a[0];
        }
        for (i = 1; i < a.length; i++) {
            if (a[i] < min) {
                min = a[i];
            }
        }
        return min;
    }

    private double maxVal(double a[]) {
        int i;
        double max = 0;
        if (a.length > 0) {
            max = a[0];
        }
        for (i = 1; i < a.length; i++) {
            if (a[i] > max) {
                max = a[i];
            }
        }
        return max;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        vtkContourFilter iso = new vtkContourFilter();
        iso.SetInput(this.imData);
        float isoV = Float.parseFloat(this.isoValue_jText.getText());
        iso.SetValue(0, isoV);

        int sM = Integer.parseInt(this.smooth_jText.getText());

        vtkSmoothPolyDataFilter smoother = new vtkSmoothPolyDataFilter();
        smoother.SetInput(iso.GetOutput());
        smoother.SetNumberOfIterations(sM);
        int n = iso.GetNumberOfContours();

        vtkPolyDataMapper isoMapper = new vtkPolyDataMapper();
        isoMapper.CreateDefaultLookupTable();
        isoMapper.SetInput(smoother.GetOutput());//iso.GetOutput());
        this.surface = smoother.GetOutput();
        double values[] = new double[iso.GetNumberOfContours()];
        for (int i = 0; i < iso.GetNumberOfContours(); i++) {
            values[i] = iso.GetValue(i);
        }
        isoMapper.SetScalarRange(minVal(values), maxVal(values));
        isoMapper.ScalarVisibilityOff();

        //Terminate the pipeline
        vtkActor isoActor = new vtkActor();
        isoActor.SetMapper(isoMapper);

        if (vPanelSurface == null) {
            vPanelSurface = new vtkPanel();
        }


        //vPanelSurface.GetRenderer().GetActors().RemoveAllItems();
        vPanelSurface.GetRenderer().RemoveAllViewProps();
        vPanelSurface.GetRenderer().SetBackground(0, 0, 0);
        vPanelSurface.GetRenderer().AddActor(isoActor);
        vPanelSurface.setSize(surfacePanel.getSize().width, surfacePanel.getSize().height);
        vtkCamera aCamera = new vtkCamera();
        aCamera.SetViewUp(0, 1, 0);
        aCamera.SetPosition(0, 0, 500); //camera para distanciar e nao aparecer dentro do objeto
        aCamera.SetFocalPoint(0, 0, 0);
        vPanelSurface.GetRenderer().SetActiveCamera(aCamera);

        this.vPanelSurface.GetRenderer().InteractiveOn();
        this.surfacePanel.add(vPanelSurface);
        this.surfacePanel.repaint();
        this.vPanelSurface.repaint();
}//GEN-LAST:event_jButton1ActionPerformed

    private void storeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeButtonActionPerformed
        // TODO add your handling code here:
        if (this.surface != null) {
            String response = JOptionPane.showInputDialog(null, "Enter surface name", "Surface Name",
                    JOptionPane.QUESTION_MESSAGE);
            this.surfaces.add(this.surface);
            Object rowData[] = new Object[5];
            rowData[0] = response;
            rowData[1] = "1.0";
            rowData[2] = "1.0";
            rowData[3] = "0.0";
            rowData[4] = "0.0";
            this.surfaceModel.addRow(rowData);
        }
    }//GEN-LAST:event_storeButtonActionPerformed

    private void viewStoredjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewStoredjButtonActionPerformed
        // TODO add your handling code here:
        if (vPanelStoredSurface == null) {
            vPanelStoredSurface = new vtkPanel();
        }
        //vPanelSurface.GetRenderer().GetActors().RemoveAllItems();
        vPanelStoredSurface.GetRenderer().RemoveAllViewProps();
        vPanelStoredSurface.GetRenderer().SetBackground(0, 0, 0);


        for (int i : this.surfaces_jTable.getSelectedRows()) {

            vtkPolyDataMapper isoMapper = new vtkPolyDataMapper();
            isoMapper.CreateDefaultLookupTable();
            isoMapper.SetInput(this.surfaces.get(i));
            //double values[] = new double[iso.GetNumberOfContours()];
            //isoMapper.SetScalarRange(minVal(values), maxVal(values));
            isoMapper.ScalarVisibilityOff();

            //Terminate the pipeline
            vtkActor isoActor = new vtkActor();
            isoActor.SetMapper(isoMapper);
            float alpha = Float.parseFloat((String) this.surfaceModel.getValueAt(i, 1));
            isoActor.GetProperty().SetOpacity(alpha);
            float R = Float.parseFloat((String) this.surfaceModel.getValueAt(i, 2));
            float G = Float.parseFloat((String) this.surfaceModel.getValueAt(i, 3));
            float B = Float.parseFloat((String) this.surfaceModel.getValueAt(i, 4));
            isoActor.GetProperty().SetColor(R, G, B);

            vPanelStoredSurface.GetRenderer().AddActor(isoActor);
        }

        vPanelStoredSurface.setSize(storedPanel.getSize().width, storedPanel.getSize().height);
        vtkCamera aCamera = new vtkCamera();
        aCamera.SetViewUp(0, 1, 0);
        aCamera.SetPosition(0, 0, 500); //camera para distanciar e nao aparecer dentro do objeto
        aCamera.SetFocalPoint(0, 0, 0);
        vPanelStoredSurface.GetRenderer().SetActiveCamera(aCamera);

        this.vPanelStoredSurface.GetRenderer().InteractiveOn();
        this.storedPanel.add(vPanelStoredSurface);
        this.storedPanel.repaint();
        this.vPanelStoredSurface.repaint();

}//GEN-LAST:event_viewStoredjButtonActionPerformed

    private float[] loadScalar(int index, String filename) {
        BufferedInputStream bis = null;
        DataInputStream dis = null;
        float[] scalars = null;
        try {
            bis = new BufferedInputStream(new FileInputStream(filename));
            dis = new DataInputStream(bis);
            int nP = dis.readInt();
            int nA = dis.readInt() + 1;
            scalars = new float[nP];
            this.max = Float.MIN_VALUE;
            this.min = Float.MAX_VALUE;
            for (int p = 0; p < nP; p++) {
                for (int a = 0; a < nA; a++) {
                    float v = dis.readFloat();
                    if (a == index) {
                        scalars[p] = v;
                        if (v > max) {
                            max = v;
                        }
                        if (v < min) {
                            min = v;
                        }
                    }
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            try {
                dis.close();
                bis.close();
            } catch (IOException ex) {
                Logger.getLogger(VolumeFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return scalars;
    }

    private void viewStoredjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewStoredjButton1ActionPerformed
        // TODO add your handling code here:
        try {
            PropertiesManager spm = PropertiesManager.getInstance(BasicsContants.PROPFILENAME);
            int result = OpenDialog.showOpenDialog(spm, new BINFilter(), this);

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = OpenDialog.getFilename();
                float[] scalars = loadScalar(Integer.parseInt(scalarTextField.getText()), filename);
                if (vPanelStoredSurface == null) {
                    vPanelStoredSurface = new vtkPanel();
                }
                //vPanelSurface.GetRenderer().GetActors().RemoveAllItems();
                vPanelStoredSurface.GetRenderer().RemoveAllViewProps();
                vPanelStoredSurface.GetRenderer().SetBackground(0, 0, 0);


                for (int i : this.surfaces_jTable.getSelectedRows()) {
                    vtkPolyDataMapper isoMapper = new vtkPolyDataMapper();
                    vtkPolyData surf = this.surfaces.get(i);
                    isoMapper.SetInput(this.surfaces.get(i));
                    //setting scalar values
                    for (int j = 0; j < surf.GetPoints().GetNumberOfPoints(); j++) {
                        int X = (int) surf.GetPoints().GetPoint(j)[0];
                        int Y = (int) surf.GetPoints().GetPoint(j)[1];
                        int Z = (int) surf.GetPoints().GetPoint(j)[2];
                        int W = this.imData.GetExtent()[1] + 1; //width
                        int H = this.imData.GetExtent()[3] + 1; //height
                        int index = X + Y * W + Z * W * H;
                        surf.GetPointData().GetScalars().SetTuple1(j, scalars[index]);
                    }
                    //isoMapper.SetScalarRange(minVal(values), maxVal(values));
                    //isoMapper.UseLookupTableScalarRangeOff();
                    isoMapper.SetScalarRange(this.min, this.max);
                    isoMapper.ScalarVisibilityOn();
                    isoMapper.CreateDefaultLookupTable();
                    vtkLookupTable lut = (vtkLookupTable) isoMapper.GetLookupTable();
                    lut.SetRange(this.min, this.max);

                    double hueMin = lut.GetHueRange()[0];
                    double hueMax = lut.GetHueRange()[1];
                    lut.SetHueRange(hueMax, hueMin);
                    double valMin = lut.GetValueRange()[0];
                    double valMax = lut.GetValueRange()[1];
                    lut.SetValueRange(valMax, valMin);
                    double satMin = lut.GetSaturationRange()[0];
                    double satMax = lut.GetSaturationRange()[1];
                    lut.SetSaturationRange(satMax, satMin);
                    lut.ForceBuild();
                    isoMapper.Update();
                    System.out.println("\n\nCOLOR INFORMATION");
                    System.out.println("Min: " + this.min);
                    System.out.println("Max: " + this.max);
                    System.out.println("Mapper Min: " + isoMapper.GetScalarRange()[0]);
                    System.out.println("Mapper Max: " + isoMapper.GetScalarRange()[1]);
                    System.out.println("LookUpTable Min: " + lut.GetTableRange()[0]);
                    System.out.println("LookUpTable Max: " + lut.GetTableRange()[1]);
                    //lut.

                    vtkActor isoActor = new vtkActor();
                    isoActor.SetMapper(isoMapper);
                    float alpha = Float.parseFloat((String) this.surfaceModel.getValueAt(i, 1));
                    isoActor.GetProperty().SetOpacity(alpha);

                    vPanelStoredSurface.GetRenderer().AddActor(isoActor);
                }

                vPanelStoredSurface.setSize(storedPanel.getSize().width, storedPanel.getSize().height);
                vtkCamera aCamera = new vtkCamera();
                aCamera.SetViewUp(0, 1, 0);
                aCamera.SetPosition(0, 0, 500); //camera para distanciar e nao aparecer dentro do objeto
                aCamera.SetFocalPoint(0, 0, 0);
                vPanelStoredSurface.GetRenderer().SetActiveCamera(aCamera);

                this.vPanelStoredSurface.GetRenderer().InteractiveOn();
                this.storedPanel.add(vPanelStoredSurface);
                this.storedPanel.repaint();
                this.vPanelStoredSurface.repaint();
            }
        } catch (IOException ex) {
            Logger.getLogger(VolumeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewStoredjButton1ActionPerformed

    private void saveSurface_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSurface_jButtonActionPerformed
        // TODO add your handling code here:
        for (int i : this.surfaces_jTable.getSelectedRows()) {
            try {
                PropertiesManager spm = PropertiesManager.getInstance("volume.properties");
                int result = SaveDialog.showSaveDialog(spm, new VTKFilter(), this,
                        ((String) this.surfaceModel.getValueAt(i, 0)) + ".vtk");
                if (result == JFileChooser.APPROVE_OPTION) {
                    String filename = SaveDialog.getFilename();
                    vtkPolyDataWriter pdWriter = new vtkPolyDataWriter();
                    pdWriter.SetInput(this.surfaces.get(i));
                    pdWriter.SetFileName(filename);
                    pdWriter.Update();
                }
            } catch (IOException ex) {
                Logger.getLogger(VolumeFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveSurface_jButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new VolumeFrame().setVisible(true);
            }

        });
    }

    public void setImageData(vtkImageData imageData) {
        iEC = new vtkImageExtractComponents();
        iEC.SetInput(imageData);
        iEC.SetComponents(1);
        iEC.Update();
        imData = iEC.GetOutput();
        //vtkPointData pd = iEC.GetOutput().GetPointData();
        ////////////////////////////////////////
        colorTransferFunction.RemoveAllPoints();
        colorTransferFunction.AddRGBPoint(0, 0, 1, 0);
        colorTransferFunction.AddRGBPoint(134, 0, 1, 0);
        colorTransferFunction.AddRGBPoint(135, 1, 0, 0);
        colorTransferFunction.AddRGBPoint(219, 1, 0, 0);
        colorTransferFunction.AddRGBPoint(220, 0, 0, 1);
        colorTransferFunction.AddRGBPoint(255, 0, 0, 1);

        opacityTransferFunction.RemoveAllPoints();
        opacityTransferFunction.AddPoint(0.0, 0.01);
        opacityTransferFunction.AddPoint(134, 0.01);
        opacityTransferFunction.AddPoint(135, 0.03);
        opacityTransferFunction.AddPoint(219, 0.03);
        opacityTransferFunction.AddPoint(220, 1.0);
        opacityTransferFunction.AddPoint(254, 1.0);
        /////////////////////////////////////


        volumeProperty.SetColor(colorTransferFunction);
        //volumeProperty.SetIndependentComponents(1);
        volumeProperty.SetScalarOpacity(opacityTransferFunction);
        //volumeProperty.ShadeOn();
        volumeProperty.SetInterpolationTypeToLinear();
        //volumeProperty.SetInterpolationTypeToNearest();
        //volumeMapper.SetInput( (vtkImageData) spR.GetOutput());

        volumeMapper.SetInput((vtkImageData) this.imData);
        volumeMapper.SetVolumeRayCastFunction(compositeFunction);
        volume.SetMapper(volumeMapper);
        volume.SetProperty(volumeProperty);

        //Render the image
        vPanel = new vtkPanel();
        vPanel.GetRenderer().SetBackground(255, 255, 255);
        vPanel.GetRenderer().AddVolume(volume);
        vPanel.setSize(volumePanel.getSize().width, volumePanel.getSize().height);
        //interactor.SetInteractorStyle(new vtkInteractorStyleTrackballCamera());
        //panel.GetRenderer().GetRenderWindow().SetInteractor(interactor);

        vtkCamera aCamera = new vtkCamera();
        aCamera.SetViewUp(0, 1, 0);
        aCamera.SetPosition(100, 100, 500);
        aCamera.SetFocalPoint(0, 0, 0);
        //aCamera.ComputeViewPlaneNormal();
        vPanel.GetRenderer().SetActiveCamera(aCamera);
        this.volumePanel.add(this.vPanel);
        //this.vPanel.repaint();
        //this.volumePanel.repaint();
    }

    @Override
    public void setModel(AbstractModel model) {
        //this.model = model;
        if (model instanceof VolumeModel) {
            if (model != null) {
                super.setModel(model);
                System.out.println("#Instances in Model: " + this.model.getInstances().size());
            }
        }
    }

    public void setCoordinator(IdentityCoordinator coordinator) {
        this.coordinator = coordinator;
        if (this.coordinator != null) {
            System.out.print(this.coordinator.toString());
            this.coordinator.addModel(model);
        }
    }

    public IdentityCoordinator getCoordinator() {
        return coordinator;
    }

    @Override
    public void update(Observable o, Object arg) {
        if (model != null) {
            //((VolumeModel) model).draw(this.imData, this.iEC);

            int ids[] = new int[this.model.getInstances().size()];
            double values[] = new double[this.model.getInstances().size()];
            int tl = 0; //logical size

            for (AbstractInstance vi : model.getInstances()) {
                ids[tl] = vi.getId();
                if (vi.isSelected()) {
                    values[tl] = 255.0;
                } else {
                    values[tl] = 0.0;
                }
                tl++;
            }
            System.out.println("Update in VolumeFrame.java");
            this.changeIntensity(ids, values, tl);
            System.out.println("End of Update in VolumeFrame.java");
            vPanel.Render();
        } else {
            System.out.println("Volume Model is NULL");
        }
    }

    @Override
    public void addCoordinator(AbstractCoordinator coordinator) {
        super.addCoordinator(coordinator);
        // addSelection(CoordinationSelectionFactory.getInstance(coordinator, this));
    }

    public void changeIntensity(int ids[], double segValue[], int tl) {
        for (int x = 0; x < tl; x++) {
            iEC.GetOutput().GetPointData().GetScalars().SetComponent(ids[x], 0, segValue[x]);
        }
    }

    private IdentityCoordinator coordinator;
    //VTK properties
    private vtkImageData imData;
    private vtkImageExtractComponents iEC;
    private vtkColorTransferFunction colorTransferFunction = new vtkColorTransferFunction();
    private vtkPiecewiseFunction opacityTransferFunction = new vtkPiecewiseFunction();
    //Cria Volume e propriedades do Volume
    private vtkVolume volume = new vtkVolume();
    private vtkVolumeProperty volumeProperty = new vtkVolumeProperty();
    //Mapeador Ray Casting
    private vtkVolumeRayCastCompositeFunction compositeFunction = new vtkVolumeRayCastCompositeFunction();
    private vtkVolumeRayCastMapper volumeMapper = new vtkVolumeRayCastMapper();
    private vtkPanel vPanel;// = new vtkPanel();
    private vtkPanel vPanelSurface = null;
    private vtkPanel vPanelStoredSurface = null;
    private vtkPolyData surface = null;
    private ArrayList<vtkPolyData> surfaces = new ArrayList<vtkPolyData>();
    private DefaultTableModel surfaceModel = null;
    private float max = 0.0f;
    private float min = 0.0f;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField isoValue_jText;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton saveSurface_jButton;
    private javax.swing.JTextField scalarTextField;
    private javax.swing.JTextField smooth_jText;
    private javax.swing.JButton storeButton;
    private javax.swing.JPanel storedPanel;
    private javax.swing.JPanel sufaceFittingPanel;
    private javax.swing.JPanel surfaceManipulationPanel;
    private javax.swing.JPanel surfacePanel;
    private javax.swing.JTable surfaces_jTable;
    private javax.swing.JButton viewStoredjButton;
    private javax.swing.JButton viewStoredjButton1;
    private javax.swing.JPanel volumePanel;
    // End of variables declaration//GEN-END:variables
}
