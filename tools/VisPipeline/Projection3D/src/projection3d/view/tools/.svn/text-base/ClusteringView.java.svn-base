/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 * 
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 * 
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */
package projection3d.view.tools;

import datamining.clustering.BKmeans;
import datamining.clustering.Clustering;
import datamining.clustering.Kmedoids;
import distance.dissimilarity.AbstractDissimilarity;
import distance.dissimilarity.DissimilarityFactory;
import distance.dissimilarity.DissimilarityFactory.DissimilarityType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import matrix.dense.DenseMatrix;
import matrix.dense.DenseVector;
import projection.util.ProjectionConstants;
import projection3d.model.Projection3DInstance;
import projection3d.model.Projection3DModel;
import projection3d.surface.FastDensitySurface;
import projection3d.surface.SurfaceFactory;
import projection3d.surface.SurfaceFactory.SurfaceType;
import projection3d.surface.SurfaceParam;
import visualizationbasics.model.AbstractInstance;
import visualizationbasics.view.MessageDialog;
import vtk.vtkSurfaceActor;

/**
 *
 * @author Fernando Vieira Paulovich
 */
public class ClusteringView extends javax.swing.JDialog {

    /** Creates new form MultidimensionalClusteringView */
    private ClusteringView(java.awt.Frame parent) {
        super(parent);
        initComponents();

        for (DissimilarityType disstype : DissimilarityType.values()) {
            this.distanceComboBox.addItem(disstype);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        clusteringButtonGroup = new javax.swing.ButtonGroup();
        surfaceButtonGroup = new javax.swing.ButtonGroup();
        pointsButtonGroup = new javax.swing.ButtonGroup();
        dataPanel = new javax.swing.JPanel();
        chooseDistanceTypePanel = new javax.swing.JPanel();
        distanceComboBox = new javax.swing.JComboBox();
        clusteringPanel = new javax.swing.JPanel();
        clusteringTypePanel = new javax.swing.JPanel();
        kmedoidsRadioButton = new javax.swing.JRadioButton();
        bkmeansRadioButton = new javax.swing.JRadioButton();
        nrclustersLabel = new javax.swing.JLabel();
        surfaceTypePanel = new javax.swing.JPanel();
        convexHullRadioButton = new javax.swing.JRadioButton();
        densityRadioButton = new javax.swing.JRadioButton();
        fastDensityRadioButton = new javax.swing.JRadioButton();
        nrclustersTextField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        generateButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Clustering the Multidimensional Data");
        setModal(true);

        dataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data"));
        dataPanel.setLayout(new java.awt.GridBagLayout());

        chooseDistanceTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose the Distance Type"));
        chooseDistanceTypePanel.setLayout(new java.awt.GridBagLayout());

        distanceComboBox.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 3);
        chooseDistanceTypePanel.add(distanceComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        dataPanel.add(chooseDistanceTypePanel, gridBagConstraints);

        clusteringPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Clustering Parameters"));
        clusteringPanel.setLayout(new java.awt.GridBagLayout());

        clusteringTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Clustering Type"));
        clusteringTypePanel.setLayout(new java.awt.GridBagLayout());

        clusteringButtonGroup.add(kmedoidsRadioButton);
        kmedoidsRadioButton.setText("K-medoids");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        clusteringTypePanel.add(kmedoidsRadioButton, gridBagConstraints);

        clusteringButtonGroup.add(bkmeansRadioButton);
        bkmeansRadioButton.setSelected(true);
        bkmeansRadioButton.setText("Bisecting K-means");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        clusteringTypePanel.add(bkmeansRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        clusteringPanel.add(clusteringTypePanel, gridBagConstraints);

        nrclustersLabel.setText("Number Clusters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 13, 3);
        clusteringPanel.add(nrclustersLabel, gridBagConstraints);

        surfaceTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Surface Type"));
        surfaceTypePanel.setLayout(new java.awt.GridBagLayout());

        surfaceButtonGroup.add(convexHullRadioButton);
        convexHullRadioButton.setText("Convex Hull");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        surfaceTypePanel.add(convexHullRadioButton, gridBagConstraints);

        surfaceButtonGroup.add(densityRadioButton);
        densityRadioButton.setSelected(true);
        densityRadioButton.setText("Density");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        surfaceTypePanel.add(densityRadioButton, gridBagConstraints);

        surfaceButtonGroup.add(fastDensityRadioButton);
        fastDensityRadioButton.setText("Fast Density");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        surfaceTypePanel.add(fastDensityRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        clusteringPanel.add(surfaceTypePanel, gridBagConstraints);

        nrclustersTextField.setColumns(5);
        nrclustersTextField.setText("5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 13, 3);
        clusteringPanel.add(nrclustersTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        dataPanel.add(clusteringPanel, gridBagConstraints);

        getContentPane().add(dataPanel, java.awt.BorderLayout.CENTER);

        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(generateButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
    final MessageDialog progressBar = MessageDialog.show((JFrame) this.getParent(), "Reading data...");
    Thread t = new Thread() {

        @Override
        public void run() {
            try {
                TreePath path = tree.getSelectionPath();
                DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode) path.getLastPathComponent();

                ArrayList<AbstractInstance> instances = null;
                if (currentNode.getUserObject() instanceof vtkSurfaceActor) {
                    vtkSurfaceActor surf = (vtkSurfaceActor) currentNode.getUserObject();
                    instances = surf.getInstances();
                } else {
                    instances = model.getInstances();
                }

                DenseMatrix matrix = new DenseMatrix();
                for (AbstractInstance in : instances) {
                    Projection3DInstance in3 = (Projection3DInstance) in;
                    matrix.addRow(new DenseVector(new float[]{in3.getX(), in3.getY(), in3.getZ()}));
                }

                progressBar.setMessage("Clustering");
                DissimilarityType mtype = (DissimilarityType) distanceComboBox.getSelectedItem();
                AbstractDissimilarity diss = DissimilarityFactory.getInstance(mtype);
                Clustering clustering = null;
                String nameScalar = "";
                if (kmedoidsRadioButton.isSelected()) {
                    nameScalar = ProjectionConstants.KMEDOIDS + nrclustersTextField.getText();
                    clustering = new Kmedoids(Integer.parseInt(nrclustersTextField.getText()));
                } else if (bkmeansRadioButton.isSelected()) {
                    nameScalar = ProjectionConstants.BKMEANS + nrclustersTextField.getText();
                    clustering = new BKmeans(Integer.parseInt(nrclustersTextField.getText()));
                }
                ArrayList<ArrayList<Integer>> clusters = clustering.execute(diss, matrix);
                progressBar.setVisible(false);

                if (fastDensityRadioButton.isSelected()) {
                    FastDensitySurface.isovalue = 0.5;
                    FastDensitySurface.radius = 5;
                    SurfaceParam.getInstance((JFrame) getParent()).display();
                }

                progressBar.setVisible(true);
                progressBar.setMessage("Creating Surfaces...");
                float count = 0;
                for (ArrayList<Integer> cluster : clusters) {
                    ArrayList<AbstractInstance> clusterInstances = new ArrayList<AbstractInstance>(cluster.size());
                    for (Integer id : cluster) {
                        clusterInstances.add(instances.get(id));
                    }
                    vtkSurfaceActor actor = null;
                    String name = nameScalar + " (" + count + ")";
                    if (convexHullRadioButton.isSelected()) {
                        actor = SurfaceFactory.getInstance(SurfaceType.CONVEX_HULL, clusterInstances, name);
                    } else if (densityRadioButton.isSelected()) {
                        actor = SurfaceFactory.getInstance(SurfaceType.DENSITY, clusterInstances, name);
                    } else if (fastDensityRadioButton.isSelected()) {
                        actor = SurfaceFactory.getInstance(SurfaceType.FAST_DENSITY, clusterInstances, name);
                    }
                    float val = count++ / (clusters.size() - 1);
                    actor.setInstances(clusterInstances);
                    actor.setColor(model.getColorTable().getColor(val));
                    ((DefaultTreeModel)tree.getModel()).insertNodeInto(new DefaultMutableTreeNode(actor),
                            currentNode, currentNode.getChildCount());
                }
                tree.expandPath(path);
                model.setChanged();
                model.notifyObservers();
            } catch (IOException ex) {
                Logger.getLogger(ClusteringView.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                progressBar.close();
            }
        }
    };
    t.start();
    this.setVisible(false);
}//GEN-LAST:event_generateButtonActionPerformed

private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
    this.setVisible(false);
}//GEN-LAST:event_closeButtonActionPerformed

    public static ClusteringView getInstance(javax.swing.JFrame parent) {
        return new ClusteringView(parent);
    }

    public void display(Projection3DModel model, JTree tree) {
        this.model = model;
        this.tree = tree;

        pack();
        setLocationRelativeTo(getParent());
        setVisible(true);
    }
    private Projection3DModel model;
    private JTree tree;
    private DefaultMutableTreeNode currentNode;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton bkmeansRadioButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel chooseDistanceTypePanel;
    private javax.swing.JButton closeButton;
    private javax.swing.ButtonGroup clusteringButtonGroup;
    private javax.swing.JPanel clusteringPanel;
    private javax.swing.JPanel clusteringTypePanel;
    private javax.swing.JRadioButton convexHullRadioButton;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JRadioButton densityRadioButton;
    private javax.swing.JComboBox distanceComboBox;
    private javax.swing.JRadioButton fastDensityRadioButton;
    private javax.swing.JButton generateButton;
    private javax.swing.JRadioButton kmedoidsRadioButton;
    private javax.swing.JLabel nrclustersLabel;
    private javax.swing.JTextField nrclustersTextField;
    private javax.swing.ButtonGroup pointsButtonGroup;
    private javax.swing.ButtonGroup surfaceButtonGroup;
    private javax.swing.JPanel surfaceTypePanel;
    // End of variables declaration//GEN-END:variables
}
