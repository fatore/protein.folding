/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Projection3DFrame.java
 *
 * Created on Nov 1, 2009, 3:48:10 AM
 */
package projection3d.view;

import distance.dissimilarity.DissimilarityFactory.DissimilarityType;
import projection.view.*;
import visualizationbasics.view.MemoryCheck;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionAdapter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import matrix.reader.MatrixReaderComp;
import projection3d.model.Projection3DInstance;
import projection3d.model.Projection3DModel;
import projection3d.model.Projection3DModelComp;
import projection.model.ProjectionModel;
import projection.model.Scalar;
import projection3d.model.XMLModel3DReaderComp;
import projection.model.XMLModelWriter;
import projection3d.reproject.ConvertTo2D;
import projection.util.ProjectionConstants;
import visualizationbasics.util.filter.SCALARFilter;
import projection.util.filter.XMLFilter;
import visualizationbasics.view.selection.AbstractSelection;
import projection.view.selection.InstanceSelection;
import projection.view.selection.coordination.CoordinationSelectionFactory;
import projection.view.tools.JoinScalars;
import projection3d.lsp.LSPProjection3DComp;
import projection3d.surface.SurfacesTreeTool;
import projection3d.util.Projection3DUtil;
import projection3d.view.tools.MultidimensionalClusteringView;
import projection3d.view.tools.SilhouetteCoefficientView;
import visualizationbasics.coordination.AbstractCoordinator;
import visualizationbasics.coordination.IdentityCoordinator;
import visualizationbasics.model.AbstractInstance;
import visualizationbasics.model.AbstractModel;
import visualizationbasics.util.OpenDialog;
import visualizationbasics.util.PropertiesManager;
import visualizationbasics.util.SaveDialog;
import visualizationbasics.util.filter.PNGFilter;
import visualizationbasics.view.MessageDialog;
import visualizationbasics.view.ModelViewer;
import vtk.vtkActor;
import vtk.vtkCellPicker;
import vtk.vtkCoordinate;
import vtk.vtkOutlineFilter;
import vtk.vtkPNGWriter;
import vtk.vtkPanel;
import vtk.vtkPolyDataMapper;
import vtk.vtkRenderLargeImage;
import vtk.vtkSurfaceActor;
import vtk.vtkTextActor;
import vtk.vtkWindowToImageFilter;

/**
 *
 * @author jpocom
 */
public class Projection3DFrame extends ModelViewer {

    static {
        System.loadLibrary("vtkCommonJava");
        System.loadLibrary("vtkFilteringJava");
        System.loadLibrary("vtkGraphicsJava");
        System.loadLibrary("vtkImagingJava");
        System.loadLibrary("vtkIOJava");
        System.loadLibrary("vtkGraphicsJava");
        System.loadLibrary("vtkRenderingJava");
        System.loadLibrary("vtkVolumeRenderingJava");
    }

    /** Creates new form Projection3DFrame */
    public Projection3DFrame() {
        initComponents();

        this.viewerPanel.add(this.view);

        addSelection(new InstanceSelection(this));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectionButtonGroup = new javax.swing.ButtonGroup();
        controlPanel = new javax.swing.JPanel();
        statusbarPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        dataPanel = new javax.swing.JPanel();
        viewerPanel = new javax.swing.JPanel();
        scalarPanel = new javax.swing.JPanel();
        colorLabel = new javax.swing.JLabel();
        scalarCombo = new JExtendedComboBox(this.scalarComboModel);
        toolbarPanel = new javax.swing.JPanel();
        fixedToolbar = new javax.swing.JToolBar();
        moveInstancesToggleButton = new javax.swing.JToggleButton();
        cleanInstancesButton = new javax.swing.JButton();
        convert2dButton = new javax.swing.JButton();
        selectionToolbar = new javax.swing.JToolBar();
        toolbar = new javax.swing.JToolBar();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        toolButton = new javax.swing.JButton();
        treeButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        fileOpen = new javax.swing.JMenuItem();
        fileSave = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JSeparator();
        exportMenu = new javax.swing.JMenu();
        fileExportToPNG = new javax.swing.JMenuItem();
        fileExportToPNGHR = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        editClean = new javax.swing.JMenuItem();
        menuTool = new javax.swing.JMenu();
        memoryCheckMenuItem = new javax.swing.JMenuItem();
        separatorOptions1 = new javax.swing.JSeparator();
        scalarMenu = new javax.swing.JMenu();
        importScalarOption = new javax.swing.JMenuItem();
        exportScalarsOption = new javax.swing.JMenuItem();
        joinScalarsOptions = new javax.swing.JMenuItem();
        separatorOptions2 = new javax.swing.JSeparator();
        clusteringMenu = new javax.swing.JMenu();
        multidimensionalMenuItem = new javax.swing.JMenuItem();
        silhouetteCoefficientMenuItem = new javax.swing.JMenuItem();
        separatorOptions3 = new javax.swing.JSeparator();
        toolOptions = new javax.swing.JMenuItem();
        toolSurfaces = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        controlPanel.setLayout(new java.awt.BorderLayout());

        statusbarPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusbarPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        statusLabel.setText("Status bar");
        statusbarPanel.add(statusLabel);

        controlPanel.add(statusbarPanel, java.awt.BorderLayout.SOUTH);

        dataPanel.setLayout(new java.awt.BorderLayout());

        viewerPanel.setBackground(new java.awt.Color(255, 255, 255));
        viewerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        viewerPanel.setLayout(new java.awt.BorderLayout());
        dataPanel.add(viewerPanel, java.awt.BorderLayout.CENTER);

        scalarPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        scalarPanel.setPreferredSize(new java.awt.Dimension(14, 45));

        colorLabel.setText("Color");
        scalarPanel.add(colorLabel);

        scalarCombo.setPreferredSize(new java.awt.Dimension(100, 27));
        scalarCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                scalarComboItemStateChanged(evt);
            }
        });
        scalarPanel.add(scalarCombo);

        dataPanel.add(scalarPanel, java.awt.BorderLayout.NORTH);

        controlPanel.add(dataPanel, java.awt.BorderLayout.CENTER);

        toolbarPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        toolbarPanel.setLayout(new java.awt.BorderLayout());

        fixedToolbar.setOrientation(1);
        fixedToolbar.setRollover(true);

        moveInstancesToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/navigation/Forward16.gif"))); // NOI18N
        moveInstancesToggleButton.setFocusable(false);
        moveInstancesToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveInstancesToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fixedToolbar.add(moveInstancesToggleButton);

        cleanInstancesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Edit16.gif"))); // NOI18N
        cleanInstancesButton.setToolTipText("Clean Instances");
        cleanInstancesButton.setFocusable(false);
        cleanInstancesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cleanInstancesButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cleanInstancesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanInstancesButtonActionPerformed(evt);
            }
        });
        fixedToolbar.add(cleanInstancesButton);

        convert2dButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/2d.jpg"))); // NOI18N
        convert2dButton.setFocusable(false);
        convert2dButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        convert2dButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        convert2dButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convert2dButtonActionPerformed(evt);
            }
        });
        fixedToolbar.add(convert2dButton);

        toolbarPanel.add(fixedToolbar, java.awt.BorderLayout.NORTH);

        selectionToolbar.setOrientation(1);
        selectionToolbar.setRollover(true);
        toolbarPanel.add(selectionToolbar, java.awt.BorderLayout.CENTER);

        controlPanel.add(toolbarPanel, java.awt.BorderLayout.EAST);

        getContentPane().add(controlPanel, java.awt.BorderLayout.CENTER);

        toolbar.setRollover(true);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Open16.gif"))); // NOI18N
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Save16.gif"))); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(saveButton);
        toolbar.add(jSeparator1);

        toolButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Preferences16.gif"))); // NOI18N
        toolButton.setToolTipText("Tool Preferences");
        toolButton.setFocusable(false);
        toolButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolButtonActionPerformed(evt);
            }
        });
        toolbar.add(toolButton);

        treeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projection3d/icons/tree.gif"))); // NOI18N
        treeButton.setFocusable(false);
        treeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        treeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        treeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeButtonActionPerformed(evt);
            }
        });
        toolbar.add(treeButton);

        getContentPane().add(toolbar, java.awt.BorderLayout.PAGE_START);

        jMenu1.setText("File");

        fileOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        fileOpen.setText("Open Projection");
        fileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenActionPerformed(evt);
            }
        });
        jMenu1.add(fileOpen);

        fileSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fileSave.setText("Save Projection");
        fileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveActionPerformed(evt);
            }
        });
        jMenu1.add(fileSave);
        jMenu1.add(separator1);

        exportMenu.setText("Export");

        fileExportToPNG.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        fileExportToPNG.setText("Export PNG File");
        fileExportToPNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExportToPNGActionPerformed(evt);
            }
        });
        exportMenu.add(fileExportToPNG);

        fileExportToPNGHR.setText("Export PNG File (High Resolution)");
        fileExportToPNGHR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExportToPNGHRActionPerformed(evt);
            }
        });
        exportMenu.add(fileExportToPNGHR);

        jMenu1.add(exportMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        editClean.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        editClean.setText("Clean Projection");
        editClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCleanActionPerformed(evt);
            }
        });
        jMenu2.add(editClean);

        jMenuBar1.add(jMenu2);

        menuTool.setText("Tool");

        memoryCheckMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        memoryCheckMenuItem.setText("Memory Check");
        memoryCheckMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryCheckMenuItemActionPerformed(evt);
            }
        });
        menuTool.add(memoryCheckMenuItem);
        menuTool.add(separatorOptions1);

        scalarMenu.setText("Scalar");

        importScalarOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        importScalarOption.setText("Import Scalar");
        importScalarOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importScalarOptionActionPerformed(evt);
            }
        });
        scalarMenu.add(importScalarOption);

        exportScalarsOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        exportScalarsOption.setText("Export Scalars");
        exportScalarsOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportScalarsOptionActionPerformed(evt);
            }
        });
        scalarMenu.add(exportScalarsOption);

        joinScalarsOptions.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        joinScalarsOptions.setText("Join Scalars");
        joinScalarsOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinScalarsOptionsActionPerformed(evt);
            }
        });
        scalarMenu.add(joinScalarsOptions);

        menuTool.add(scalarMenu);
        menuTool.add(separatorOptions2);

        clusteringMenu.setText("Clustering");

        multidimensionalMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        multidimensionalMenuItem.setText("Multidimensional Data");
        multidimensionalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multidimensionalMenuItemActionPerformed(evt);
            }
        });
        clusteringMenu.add(multidimensionalMenuItem);

        silhouetteCoefficientMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        silhouetteCoefficientMenuItem.setText("Silhouette Coefficient");
        silhouetteCoefficientMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                silhouetteCoefficientMenuItemActionPerformed(evt);
            }
        });
        clusteringMenu.add(silhouetteCoefficientMenuItem);

        menuTool.add(clusteringMenu);
        menuTool.add(separatorOptions3);

        toolOptions.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        toolOptions.setText("Tool Options");
        toolOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolOptionsActionPerformed(evt);
            }
        });
        menuTool.add(toolOptions);

        toolSurfaces.setText("Tool Surfaces");
        toolSurfaces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolSurfacesActionPerformed(evt);
            }
        });
        menuTool.add(toolSurfaces);

        jMenuBar1.add(menuTool);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void scalarComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_scalarComboItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            Scalar scalar = (Scalar) this.scalarCombo.getSelectedItem();
            if (scalar != null) {
                view.colorAs(scalar);
            }
        }
    }//GEN-LAST:event_scalarComboItemStateChanged

    private void convert2dButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convert2dButtonActionPerformed
        ConvertTo2D.getInstance(this).display(this);
    }//GEN-LAST:event_convert2dButtonActionPerformed

    private void toolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolButtonActionPerformed
        toolOptionsActionPerformed(evt);
    }//GEN-LAST:event_toolButtonActionPerformed

    private void toolOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolOptionsActionPerformed
        Projection3DFameOptions.getInstance(this).display(this);
    }//GEN-LAST:event_toolOptionsActionPerformed

    private void editCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCleanActionPerformed
        if (view != null) {
            view.cleanSelectedInstances();
        }
    }//GEN-LAST:event_editCleanActionPerformed

    private void cleanInstancesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanInstancesButtonActionPerformed
        editCleanActionPerformed(evt);
    }//GEN-LAST:event_cleanInstancesButtonActionPerformed

    private void multidimensionalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multidimensionalMenuItemActionPerformed
        if (model != null) {
            MultidimensionalClusteringView.getInstance(this).display((Projection3DModel) model);
        }
    }//GEN-LAST:event_multidimensionalMenuItemActionPerformed

    private void importScalarOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importScalarOptionActionPerformed
        if (viewerPanel != null) {
            try {
                PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
                int result = OpenDialog.showOpenDialog(spm, new SCALARFilter(), this);

                if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
                    if (model != null) {
                        final MessageDialog dialog = MessageDialog.show(this, "Importing scalars...");

                        Thread t = new Thread() {

                            @Override
                            public void run() {
                                try {
                                    String filename = OpenDialog.getFilename();
                                    Projection3DUtil.importScalars((ProjectionModel) model, filename);
                                    updateScalars(null);
                                } catch (IOException ex) {
                                    Logger.getLogger(ProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
                                } finally {
                                    dialog.close();
                                }
                            }
                        };

                        t.start();
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(ProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_importScalarOptionActionPerformed

    private void silhouetteCoefficientMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_silhouetteCoefficientMenuItemActionPerformed
        if (model != null) {
            try {
                SilhouetteCoefficientView.getInstance(this).display((Projection3DModel) model, getCurrentScalar());
                updateScalars(null);
            } catch (IOException ex) {
                Logger.getLogger(ProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_silhouetteCoefficientMenuItemActionPerformed

    private void memoryCheckMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryCheckMenuItemActionPerformed
        MemoryCheck.showMemoryCheck();
    }//GEN-LAST:event_memoryCheckMenuItemActionPerformed

    private void exportScalarsOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportScalarsOptionActionPerformed
        if (viewerPanel != null) {
            try {
                PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
                int result = SaveDialog.showSaveDialog(spm, new SCALARFilter(), this, "scalars.scalar");

                if (result == JFileChooser.APPROVE_OPTION) {
                    if (model != null) {
                        String filename = SaveDialog.getFilename();
                        Projection3DUtil.exportScalars((ProjectionModel) model, filename);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(ProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_exportScalarsOptionActionPerformed

    private void joinScalarsOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinScalarsOptionsActionPerformed
        if (model != null) {
            Scalar s = JoinScalars.getInstance(this).display((ProjectionModel) model);
            updateScalars(s);
        }
    }//GEN-LAST:event_joinScalarsOptionsActionPerformed

    private void fileExportToPNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExportToPNGActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
            int result = SaveDialog.showSaveDialog(spm, new PNGFilter(), this, "image.png");

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = SaveDialog.getFilename();

                view.saveToPngImageFile(filename);
            }
        } catch (IOException ex) {
            Logger.getLogger(Projection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fileExportToPNGActionPerformed

    private void fileExportToPNGHRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExportToPNGHRActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
            int result = SaveDialog.showSaveDialog(spm, new PNGFilter(), this, "image.png");

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = SaveDialog.getFilename();

                view.saveToPngImageFileHR(filename);
            }
        } catch (IOException ex) {
            Logger.getLogger(Projection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fileExportToPNGHRActionPerformed

    private void fileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveActionPerformed
        if (model != null) {
            try {
                PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
                int result = SaveDialog.showSaveDialog(spm, new XMLFilter(), this, "model.xml");

                if (result == JFileChooser.APPROVE_OPTION) {
                    String filename = SaveDialog.getFilename();

                    try {
                        XMLModelWriter mwriter = new XMLModelWriter();
                        mwriter.write((Projection3DModel) model, filename);
                    } catch (IOException e) {
                        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
                        JOptionPane.showMessageDialog(this, e.getMessage(),
                                "Problems saving the file", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Projection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_fileSaveActionPerformed

    private void fileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenActionPerformed
        try {
            XMLModel3DReaderComp reader = new XMLModel3DReaderComp();
            Projection3DUtil.showDialog(reader);
            reader.execute();

            Projection3DFrameComp frame = new Projection3DFrameComp();
            Projection3DUtil.showDialog(frame);
            frame.input(reader.output());
            frame.execute();
        } catch (IOException ex) {
            Logger.getLogger(Projection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fileOpenActionPerformed

    private void toolSurfacesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolSurfacesActionPerformed
        SurfacesTreeTool treeViewer = new SurfacesTreeTool();
        treeViewer.setSize(300, 500);
        treeViewer.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        treeViewer.setModel(model);
        treeViewer.setVisible(true);

        IdentityCoordinator coord = new IdentityCoordinator();
        treeViewer.addCoordinator(coord);
        this.addCoordinator(coord);
        
        model.setChanged();
        model.notifyObservers();
    }//GEN-LAST:event_toolSurfacesActionPerformed

    private void treeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeButtonActionPerformed
        SurfacesTreeTool treeViewer = new SurfacesTreeTool();
        treeViewer.setSize(300, 500);
        treeViewer.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        treeViewer.setModel(model);
        treeViewer.setVisible(true);

        IdentityCoordinator coord = new IdentityCoordinator();
        treeViewer.addCoordinator(coord);
        this.addCoordinator(coord);

        model.setChanged();
        model.notifyObservers();
    }//GEN-LAST:event_treeButtonActionPerformed

    @Override
    public void update(Observable o, Object arg) {
        if (model != null) {
            if (arg instanceof ArrayList) {
                ArrayList<DefaultMutableTreeNode> selecteds = (ArrayList<DefaultMutableTreeNode>) arg;
                Enumeration<DefaultMutableTreeNode> e = ((Projection3DModel)model).getRoot().breadthFirstEnumeration();
                while(e.hasMoreElements()) {
                    DefaultMutableTreeNode node = e.nextElement();
                    if (!node.isRoot()) {
                        vtkSurfaceActor actor = (vtkSurfaceActor)node.getUserObject();
                        if (selecteds.contains(node))
                            actor.SetVisibility(1);
                        else
                            actor.SetVisibility(0);
                    }
                }
            }
            view.repaint();
        }
    }

    @Override
    public void setModel(AbstractModel model) {
        if (model instanceof Projection3DModel) {
            if (model != null) {
                super.setModel(model);
                Scalar scalar = ((Projection3DModel) model).getSelectedScalar();

                if (scalar != null) {
                    updateScalars(scalar);
                } else {
                    updateScalars(((Projection3DModel) model).getScalars().get(0));
                }

                view.setModel((Projection3DModel) model);
            }
        }
    }

    @Override
    public void addCoordinator(AbstractCoordinator coordinator) {
        super.addCoordinator(coordinator);
        addSelection(CoordinationSelectionFactory.getInstance(coordinator, this));
    }

    public void addSelection(final AbstractSelection selection) {
        if (selection != null) {
            JToggleButton button = new JToggleButton();
            selectionButtonGroup.add(button);
            button.setIcon(selection.getIcon());
            button.setSelected(false);
            button.setToolTipText(selection.toString());

            button.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    if (view != null) {
                        view.setSelection(selection);
                    }
                }
            });

            selectionToolbar.add(button);
        }
    }

    public void updateScalars(Scalar scalar) {
        scalarComboModel.removeAllElements();
        for (Scalar s : ((Projection3DModel) model).getScalars()) {
            scalarComboModel.addElement(s);
        }

        if (scalar != null) {
            scalarCombo.setSelectedItem(scalar);
            ((Projection3DModel) model).setSelectedScalar(scalar);
        } else {
            scalarCombo.setSelectedItem(((Projection3DModel) model).getSelectedScalar());
        }

        model.setChanged();
        model.notifyObservers();
    }

    public void changeStatus(String status) {
        this.statusLabel.setText(status);
    }

    public Scalar getCurrentScalar() {
        return (Scalar) scalarCombo.getSelectedItem();
    }

    public ViewPanel getView() {
        return view;
    }

    public void setViewerBackground(Color bg) {
        if (view != null) {
            view.setBackground(bg);
            view.repaint();
        }
    }

    public void showOutline(boolean show) {
        if (view != null) {
            view.showOutline(show);
            view.repaint();
        }
    }

    public void addSurfaceActor(vtkSurfaceActor actor) {
        if (view != null) {
            view.GetRenderer().AddActor(actor);
            view.repaint();
        }
    }

    public void updateImage() {
        if (this.view != null) {
            this.view.repaint();
        }
    }

    public class ViewPanel extends vtkPanel {

        public ViewPanel() {
            super();
            this.setBackground(java.awt.Color.BLACK);
            picker = new vtkCellPicker();
            picker.SetTolerance(0.001);
            coord = new vtkCoordinate();
            coord.SetCoordinateSystemToWorld();

            this.addMouseMotionListener(new MouseMotionListener());
            this.addMouseListener(new MouseClickedListener());
        }

        @Override
        public void paint(Graphics g) {
            if (model != null) {
                lock();
                if (currentText != null) {
                    if (label != null && labelpos != null) {
                        currentText.SetInput(label);
                        currentText.SetPosition(labelpos.x, labelpos.y);
                        currentText.VisibilityOn();
                    } else {
                        currentText.VisibilityOff();
                    }
                }
               
                ((Projection3DModel) model).draw(this.GetRenderer());

                Render();
                unlock();
            }
        }

        public void setModel(Projection3DModel model) {
            ((Projection3DModel)model).setRenderer(this.GetRenderer());

            // outline
            outline = new vtkOutlineFilter();
            outline.SetInput(model.getPolydata());

            outlineMapper = new vtkPolyDataMapper();
            outlineMapper.SetInput(outline.GetOutput());

            outlineActor = new vtkActor();
            outlineActor.SetMapper(outlineMapper);
            outlineActor.SetVisibility(0);


            // text
            currentText = new vtkTextActor();
            currentText.GetTextProperty().BoldOn();
            currentText.GetTextProperty().SetFontFamilyToCourier();
            currentText.GetTextProperty().SetFontSize(18);
            currentText.GetTextProperty().ShadowOn();

            ren.AddActor(model.getActor());
            ren.AddActor(currentText);
            ren.AddActor(outlineActor);

            resetCamera();
            repaint();
        }

        public void colorAs(Scalar scalar) {
            if (model != null) {
                ((Projection3DModel) model).setSelectedScalar(scalar);
                model.notifyObservers();
            }
        }

        @Override
        public void setBackground(Color c) {
            if (model != null) {
                GetRenderer().SetBackground(c.getRed() / 255., c.getGreen() / 255., c.getBlue() / 255.);
            }
        }

        public void cleanSelectedInstances() {
            if (model != null) {
                ((Projection3DModel) model).hideAllSurfaces();
                model.cleanSelectedInstances();
                model.notifyObservers();
            }
        }

        public void setSelection(AbstractSelection selection) {
            this.selection = selection;
        }

        private void saveToPngImageFile(String filename) {
            lock();
            rw.OffScreenRenderingOn();
            vtkWindowToImageFilter filter = new vtkWindowToImageFilter();
            filter.SetInput(rw);

            vtkPNGWriter writer = new vtkPNGWriter();
            writer.SetInput(filter.GetOutput());
            writer.SetFileName(filename);
            writer.Write();
            rw.OffScreenRenderingOff();
            unlock();
        }

        private void saveToPngImageFileHR(String filename) {
            lock();
            rw.OffScreenRenderingOn();

            vtkRenderLargeImage renderLarge = new vtkRenderLargeImage();
            renderLarge.SetInput(view.GetRenderer());
            renderLarge.SetMagnification(5);

            vtkPNGWriter pnW = new vtkPNGWriter();
            pnW.SetFileName(filename);
            pnW.SetInput(renderLarge.GetOutput());
            pnW.Write();

            rw.OffScreenRenderingOff();
            unlock();
        }

        public vtkActor getOutlineActor() {
            return outlineActor;
        }

        public void showOutline(boolean show) {
            outlineActor.SetVisibility(show ? 1 : 0);
        }

        class MouseMotionListener extends MouseMotionAdapter {

            @Override
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                super.mouseMoved(evt);

                if (model == null) {
                    return;
                }
                int cellId = picker.Pick(evt.getX(), getHeight() - evt.getY(), 0, GetRenderer());
                if (cellId == 0 || (cellId = picker.GetCellId()) == -1) {
                    //Clear the label
                    label = null;
                    labelpos = null;
                    if (selectedSurf != null) {
                        selectedSurf.GetProperty().SetRepresentationToSurface();
                        selectedSurf = null;
                    }


                    repaint();
                    return;
                }

                if (picker.GetActor() instanceof vtkSurfaceActor) {
                    if (selectedSurf != null && selectedSurf != picker.GetActor()) {
                        selectedSurf.GetProperty().SetRepresentationToSurface();
                    }
                    selectedSurf = (vtkSurfaceActor) picker.GetActor();

                    selectedSurf.GetProperty().SetRepresentationToWireframe();
                    repaint();
                } else if (picker.GetActor() instanceof vtkActor) { // Picking Points
                    Projection3DInstance inst = ((Projection3DModel) model).getInstancesById(cellId);
                    if (inst != null) {
                        label = inst.toString();
                        if (label.trim().length() > 0) {
                            if (label.length() > 100) {
                                label = label.substring(0, 96) + "...";
                            }
                            double space = ((Projection3DModel) model).getSphereRadius();
                            coord.SetValue(inst.getX() + space, inst.getY() + space, inst.getZ() + space);
                            double[] values = coord.GetComputedDoubleViewportValue(ren);

                            labelpos = new Point((int) values[0], (int) values[1]);
                        }
                    } else {
                        //Clear the label
                        label = null;
                        labelpos = null;
                    }
                    repaint();
                }
            }
        }

        class MouseClickedListener extends MouseAdapter {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                super.mouseClicked(evt);

                if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
                    if (model == null) {
                        return;
                    }
                    int cellId = picker.Pick(evt.getX(), getHeight() - evt.getY(), 0, GetRenderer());
                    if (cellId == 0 || (cellId = picker.GetCellId()) == -1) {
                        return;
                    }

                    if (picker.GetActor() instanceof vtkSurfaceActor) {
                        ArrayList<AbstractInstance> tempInstances = ((vtkSurfaceActor) picker.GetActor()).getInstances();
                        changeStatus("Number of Instances in Selection: " + tempInstances.size());

                        if (evt.getClickCount() == 1) {
                            model.setSelectedInstances(tempInstances);

                            model.notifyObservers();
                        }

                    } else { // Picking Points
                        Projection3DInstance inst = ((Projection3DModel) model).getInstancesById(cellId);
                        changeStatus("Number of Instances in Selection: " + 0);
                        if (inst != null) {
                            changeStatus("Number of Instances in Selection: " + 1);
                            if (evt.getClickCount() == 1) {
                                model.setSelectedInstance(inst);
                                model.notifyObservers();
                            }

                        }
                    }
                    if (selection != null) {
                        selection.selected(model.getSelectedInstances());
                    }
                } else if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
                    cleanSelectedInstances();
                    changeStatus("Number of Instances in Selection: " + 0);
                }
            }
        }
        private String label;
        private Point labelpos;
        private AbstractSelection selection;
        private vtkCellPicker picker;
        private vtkCoordinate coord;
        private vtkTextActor currentText;
        // outline
        private vtkOutlineFilter outline;
        private vtkPolyDataMapper outlineMapper;
        private vtkActor outlineActor;
        // Surface
        private vtkSurfaceActor selectedSurf = null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {

            MatrixReaderComp reader = new MatrixReaderComp();
            //reader.setFilename("d:/Downloads/cbr-ilp-ir.data");
            reader.setFilename("/Volumes/Data/Users/jpocom/Documents/Mestrado/Programas/data vispipeline/cbr-ilp-ir-son-int.data");
            reader.execute();


            LSPProjection3DComp proj = new LSPProjection3DComp();
            proj.setDissimilarityType(DissimilarityType.COSINE_BASED);
            proj.setNumberIterations(50);
            proj.setFractionDelta(8.f);
            proj.setNumberControlPoints(68);
            proj.setNumberNeighbors(10);
            proj.input(reader.output());
            proj.execute();


            /*
            PLSPProjection3DComp proj = new PLSPProjection3DComp();
            proj.setDissimilarityType(DissimilarityType.COSINE_BASED);
            proj.setNumberIterations(50);
            proj.setFractionDelta(8.f);
            //proj.setNumberControlPoints(68);
            proj.setNumberNeighbors(10);
            proj.input(reader.output());
            proj.execute();
             */

            Projection3DModelComp mcomp = new Projection3DModelComp();
            mcomp.input(proj.output());
            mcomp.execute();


            Projection3DFrameComp fcomp = new Projection3DFrameComp();
            fcomp.input(mcomp.output());
            fcomp.execute();
        } catch (IOException ex) {
            Logger.getLogger(Projection3DFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private DefaultComboBoxModel scalarComboModel = new DefaultComboBoxModel();
    private ViewPanel view = new ViewPanel();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cleanInstancesButton;
    private javax.swing.JMenu clusteringMenu;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton convert2dButton;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JMenuItem editClean;
    private javax.swing.JMenu exportMenu;
    private javax.swing.JMenuItem exportScalarsOption;
    private javax.swing.JMenuItem fileExportToPNG;
    private javax.swing.JMenuItem fileExportToPNGHR;
    private javax.swing.JMenuItem fileOpen;
    private javax.swing.JMenuItem fileSave;
    private javax.swing.JToolBar fixedToolbar;
    private javax.swing.JMenuItem importScalarOption;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JMenuItem joinScalarsOptions;
    private javax.swing.JMenuItem memoryCheckMenuItem;
    private javax.swing.JMenu menuTool;
    private javax.swing.JToggleButton moveInstancesToggleButton;
    private javax.swing.JMenuItem multidimensionalMenuItem;
    private javax.swing.JButton openButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox scalarCombo;
    private javax.swing.JMenu scalarMenu;
    private javax.swing.JPanel scalarPanel;
    private javax.swing.ButtonGroup selectionButtonGroup;
    private javax.swing.JToolBar selectionToolbar;
    private javax.swing.JSeparator separator1;
    private javax.swing.JSeparator separatorOptions1;
    private javax.swing.JSeparator separatorOptions2;
    private javax.swing.JSeparator separatorOptions3;
    private javax.swing.JMenuItem silhouetteCoefficientMenuItem;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusbarPanel;
    private javax.swing.JButton toolButton;
    private javax.swing.JMenuItem toolOptions;
    private javax.swing.JMenuItem toolSurfaces;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JPanel toolbarPanel;
    private javax.swing.JButton treeButton;
    private javax.swing.JPanel viewerPanel;
    // End of variables declaration//GEN-END:variables
}
