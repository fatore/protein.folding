/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SurfacesTool.java
 *
 * Created on Nov 25, 2009, 8:52:04 AM
 */
package projection3d.surface;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import projection.model.Scalar;
import projection3d.model.Projection3DInstance;
import projection3d.model.Projection3DModel;
import projection3d.model.Projection3DModel.TypeGlyph;
import projection3d.model.XMLModel3DWriterComp;
import projection3d.util.Projection3DUtil;
import projection3d.view.Projection3DFrame;
import visualizationbasics.model.AbstractInstance;
import vtk.vtkSurfaceActor;


/**
 *
 * @author jpocom
 */
public class SurfacesTool extends javax.swing.JDialog {

    /** Creates new form SurfacesTool */
    public SurfacesTool(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        surfaceTableModel = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int col) {
                if (col == 0) {
                    return false;
                }
                return true;
            }
        };
        surfaceTableModel.addColumn("Name");
        surfaceTableModel.addColumn("Opacity");
        surfaceTableModel.addColumn("Visible");
        surfaceTableModel.addColumn("Color");

        initComponents();

        surfaceTable.getColumnModel().getColumn(0).setPreferredWidth(250);
        surfaceTable.setRowHeight(30);
        surfaceTable.getColumnModel().getColumn(1).setCellEditor(new JSliderEditor());
        surfaceTable.getColumnModel().getColumn(1).setCellRenderer(new JSliderRenderer());
        surfaceTable.getColumnModel().getColumn(2).setCellEditor(new CheckBoxCellEditor());
        surfaceTable.getColumnModel().getColumn(2).setCellRenderer(new CWCheckBoxRenderer());
        surfaceTable.getColumnModel().getColumn(3).setCellEditor(new ColorEditor());
        surfaceTable.getColumnModel().getColumn(3).setCellRenderer(new ColorRenderer(true));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablePopupMenu = new javax.swing.JPopupMenu();
        surfacesHide = new javax.swing.JMenuItem();
        surfacesShow = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JSeparator();
        surfacesDelete = new javax.swing.JMenuItem();
        surfacesJoin = new javax.swing.JMenuItem();
        separator2 = new javax.swing.JSeparator();
        surfacesSave = new javax.swing.JMenuItem();
        tableScrollPane = new javax.swing.JScrollPane();
        surfaceTable = new javax.swing.JTable();
        buttonPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();

        surfacesHide.setText("Hide Surface");
        surfacesHide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surfacesHideActionPerformed(evt);
            }
        });
        tablePopupMenu.add(surfacesHide);

        surfacesShow.setText("Show Surfaces");
        surfacesShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surfacesShowActionPerformed(evt);
            }
        });
        tablePopupMenu.add(surfacesShow);
        tablePopupMenu.add(separator1);

        surfacesDelete.setText("Delete Surfaces");
        surfacesDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surfacesDeleteActionPerformed(evt);
            }
        });
        tablePopupMenu.add(surfacesDelete);

        surfacesJoin.setText("Join Surfaces");
        surfacesJoin.setToolTipText("Create a new Surfaces using points in selected surfaces");
        surfacesJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surfacesJoinActionPerformed(evt);
            }
        });
        tablePopupMenu.add(surfacesJoin);
        tablePopupMenu.add(separator2);

        surfacesSave.setText("Save Projection");
        surfacesSave.setToolTipText("Save instances in selected surfaces as XML");
        surfacesSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surfacesSaveActionPerformed(evt);
            }
        });
        tablePopupMenu.add(surfacesSave);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        surfaceTable.setModel(surfaceTableModel);
        surfaceTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        surfaceTable.setComponentPopupMenu(tablePopupMenu);
        surfaceTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tableScrollPane.setViewportView(surfaceTable);

        getContentPane().add(tableScrollPane, java.awt.BorderLayout.CENTER);

        buttonPanel.setPreferredSize(new java.awt.Dimension(400, 33));

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.frame = null;
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void surfacesDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surfacesDeleteActionPerformed
        if (frame != null) {
            Projection3DModel model = (Projection3DModel) frame.getModel();

            for (int row : surfaceTable.getSelectedRows()) {
                vtkSurfaceActor surf = (vtkSurfaceActor) surfaceTableModel.getValueAt(row, 0);
                frame.getView().GetRenderer().RemoveActor(surf);
                //model.removeSurface(surf);
            }
            updateTable(model);
            frame.getView().repaint();
        }
    }//GEN-LAST:event_surfacesDeleteActionPerformed

    private void surfacesJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surfacesJoinActionPerformed
        if (frame != null) {
        /*
            try {
                Projection3DModel model = (Projection3DModel) frame.getModel();
                ArrayList<Projection3DInstance> instances = new ArrayList<Projection3DInstance>();
                for (int row : surfaceTable.getSelectedRows()) {
                    Topic t = (Topic) surfaceTableModel.getValueAt(row, 0);
                    instances.addAll(((vtkSurfaceActor)t.getActor()).getInstances());
                }
                AbstractTopicCreator topic = TopicFactory.getInstance(model, TopicType.COVARIANCE);
                Topic topicrender = topic.createTopic(instances);
                vtkActor actor = SurfaceFactory.getInstance(SurfaceType.DENSITY, instances, "joint ", count++);
                Color cc = instances.get(0).getColor();
                actor.GetProperty().SetColor(cc.getRed() / 255., cc.getGreen() / 255., cc.getBlue() / 255.);
                topicrender.setActor(actor);
                model.addTopic(topicrender);

                updateTable(model);
                frame.getView().repaint();
            } catch (IOException ex) {
                Logger.getLogger(SurfacesTool.class.getName()).log(Level.SEVERE, null, ex);
            }
         */
        }
    }//GEN-LAST:event_surfacesJoinActionPerformed

    private void surfacesSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surfacesSaveActionPerformed
        if (frame != null) {
            try {
                Projection3DModel model = (Projection3DModel) frame.getModel();

                Projection3DModel newModel = new Projection3DModel(TypeGlyph.POINT);
                for(Scalar s: model.getScalars()) {
                    newModel.addScalar(s.getName());
                }
                for (int row : surfaceTable.getSelectedRows()) {
                    vtkSurfaceActor actor = (vtkSurfaceActor)surfaceTableModel.getValueAt(row, 0);

                    for (AbstractInstance inst : actor.getInstances()) {
                        newModel.addInstance((Projection3DInstance)inst);
                    }
                }

                XMLModel3DWriterComp comp = new XMLModel3DWriterComp();
                comp.input(newModel);
                Projection3DUtil.showDialog(comp);
                comp.execute();
                
            } catch (IOException ex) {
                Logger.getLogger(SurfacesTool.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_surfacesSaveActionPerformed

    private void surfacesHideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surfacesHideActionPerformed
        if (frame != null) {
            Projection3DModel model = (Projection3DModel) frame.getModel();

            for (int row : surfaceTable.getSelectedRows()) {
                vtkSurfaceActor surf = (vtkSurfaceActor) surfaceTableModel.getValueAt(row, 0);
                surf.SetVisibility(0);
                frame.getView().repaint();
            }
 
            updateTable(model);
        }
    }//GEN-LAST:event_surfacesHideActionPerformed

    private void surfacesShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surfacesShowActionPerformed
        if (frame != null) {
            Projection3DModel model = (Projection3DModel) frame.getModel();

            for (int row : surfaceTable.getSelectedRows()) {
                vtkSurfaceActor surf = (vtkSurfaceActor) surfaceTableModel.getValueAt(row, 0);
                surf.SetVisibility(1);
                frame.getView().repaint();
            }

            updateTable(model);
        }
    }//GEN-LAST:event_surfacesShowActionPerformed

    static int count = 0;
    public void updateTable(Projection3DModel model) {
        while (surfaceTableModel.getRowCount()>0){
            surfaceTableModel.removeRow(0);
        }
        /*
        if (model != null) {
            for(vtkSurfaceActor surf: model.getSurfaces()) {
                int opacity = (int) (surf.GetProperty().GetOpacity() * 100.);
                boolean visibility = surf.GetVisibility() == 1 ? true : false;
                double[] temp = surf.GetProperty().GetColor();
                Color color = new Color((float) temp[0], (float) temp[1], (float) temp[2]);

                surfaceTableModel.addRow(new Object[]{surf, opacity, visibility, color});
            }
        }
         * 
         */
    }

    public static SurfacesTool getInstance(javax.swing.JFrame parent) {
        return new SurfacesTool(parent, false);
    }

    public void display(Projection3DFrame frame) {
        if (frame != null) {
            Projection3DModel model = (Projection3DModel) frame.getModel();

            if (model != null) {
               updateTable(model);
            }
        }

        this.frame = frame;
        pack();
        setLocationRelativeTo(this.getParent());
        setVisible(true);
    }
    Projection3DFrame frame;
    DefaultTableModel surfaceTableModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JSeparator separator1;
    private javax.swing.JSeparator separator2;
    private javax.swing.JTable surfaceTable;
    private javax.swing.JMenuItem surfacesDelete;
    private javax.swing.JMenuItem surfacesHide;
    private javax.swing.JMenuItem surfacesJoin;
    private javax.swing.JMenuItem surfacesSave;
    private javax.swing.JMenuItem surfacesShow;
    private javax.swing.JPopupMenu tablePopupMenu;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables

    class JSliderEditor extends AbstractCellEditor implements TableCellEditor {

        protected JSlider slider = null;
        int row = -1;
        int col = -1;

        public JSliderEditor() {
            slider = new JSlider();

            this.slider.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseReleased(MouseEvent evt) {
                    vtkSurfaceActor surf = (vtkSurfaceActor) surfaceTableModel.getValueAt(row, 0);
                    surf.GetProperty().SetOpacity(slider.getValue() / 100.0);
                    frame.getView().repaint();
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int col) {
            int val = Integer.parseInt(value.toString());
            slider.setValue(val);
            this.row = row;
            this.col = col;
            return slider;
        }

        @Override
        public Object getCellEditorValue() {
            return new Integer(slider.getValue());
        }
    }

    class JSliderRenderer implements TableCellRenderer {

        protected JSlider slider = null;

        public JSliderRenderer() {
            slider = new JSlider();
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            int val = Integer.parseInt(value.toString());
            slider.setValue(val);
            return slider;
        }
    }

    class CheckBoxCellEditor extends AbstractCellEditor implements TableCellEditor {

        protected JCheckBox checkBox;
        protected int row = -1;

        public CheckBoxCellEditor() {
            checkBox = new JCheckBox();
            checkBox.setHorizontalAlignment(SwingConstants.CENTER);
            checkBox.setBackground(Color.white);

            checkBox.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    vtkSurfaceActor surf = (vtkSurfaceActor) surfaceTableModel.getValueAt(row, 0);
                    surf.SetVisibility(checkBox.isSelected() == true ? 1 : 0);
                    frame.getView().repaint();
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(
                JTable table,
                Object value,
                boolean isSelected,
                int row,
                int column) {

            checkBox.setSelected(((Boolean) value).booleanValue());
            this.row = row;
            return checkBox;
        }

        @Override
        public Object getCellEditorValue() {
            return Boolean.valueOf(checkBox.isSelected());
        }
    }

    class CWCheckBoxRenderer extends JCheckBox implements TableCellRenderer {

        Border border = new EmptyBorder(1, 2, 1, 2);

        public CWCheckBoxRenderer() {
            super();
            setOpaque(true);
            setHorizontalAlignment(SwingConstants.CENTER);
        }

        @Override
        public Component getTableCellRendererComponent(
                JTable table,
                Object value,
                boolean isSelected,
                boolean hasFocus,
                int row,
                int column) {

            if (value instanceof Boolean) {
                setSelected(((Boolean) value).booleanValue());
                setEnabled(table.isCellEditable(row, column));

                if (isSelected) {
                    setBackground(table.getSelectionBackground());
                    setForeground(table.getSelectionForeground());
                } else {
                    setForeground(table.getForeground());
                    setBackground(table.getBackground());
                }
            } else {
                return null;
            }

            return this;
        }
    }

    class ColorRenderer extends JLabel implements TableCellRenderer {

        Border unselectedBorder = null;
        Border selectedBorder = null;
        boolean isBordered = true;

        public ColorRenderer(boolean isBordered) {
            this.isBordered = isBordered;
            setOpaque(true); //MUST do this for background to show up.
        }

        @Override
        public Component getTableCellRendererComponent(
                JTable table, Object color,
                boolean isSelected, boolean hasFocus,
                int row, int column) {
            Color newColor = (Color) color;
            setBackground(newColor);
            if (isBordered) {
                if (isSelected) {
                    if (selectedBorder == null) {
                        selectedBorder = BorderFactory.createMatteBorder(2, 5, 2, 5,
                                table.getSelectionBackground());
                    }
                    setBorder(selectedBorder);
                } else {
                    if (unselectedBorder == null) {
                        unselectedBorder = BorderFactory.createMatteBorder(2, 5, 2, 5,
                                table.getBackground());
                    }
                    setBorder(unselectedBorder);
                }
            }

            setToolTipText("RGB value: " + newColor.getRed() + ", " + newColor.getGreen() + ", " + newColor.getBlue());
            return this;
        }
    }

    class ColorEditor extends AbstractCellEditor implements TableCellEditor,
            ActionListener {

        Color currentColor;
        JButton button;
        JColorChooser colorChooser;
        JDialog dialog;
        protected static final String EDIT = "edit";
        private int row = -1;

        public ColorEditor() {
            button = new JButton();
            button.setActionCommand(EDIT);
            button.addActionListener(this);
            button.setBorderPainted(false);

            //Set up the dialog that the button brings up.
            colorChooser = new JColorChooser();
            dialog = JColorChooser.createDialog(button,
                    "Pick a Color",
                    true, //modal
                    colorChooser,
                    this, //OK button handler
                    null); //no CANCEL button handler
        }

        /**
         * Handles events from the editor button and from
         * the dialog's OK button.
         */
        @Override
        public void actionPerformed(ActionEvent e) {
            if (EDIT.equals(e.getActionCommand())) {
                //The user has clicked the cell, so
                //bring up the dialog.
                button.setBackground(currentColor);
                colorChooser.setColor(currentColor);
                dialog.setVisible(true);

                //Make the renderer reappear.
                fireEditingStopped();

            } else { //User pressed dialog's "OK" button.
                currentColor = colorChooser.getColor();
                vtkSurfaceActor surf = (vtkSurfaceActor) surfaceTableModel.getValueAt(row, 0);
                surf.setColor(currentColor);
                frame.getView().repaint();
            }
        }

        //Implement the one CellEditor method that AbstractCellEditor doesn't.
        @Override
        public Object getCellEditorValue() {
            return currentColor;
        }

        //Implement the one method defined by TableCellEditor.
        @Override
        public Component getTableCellEditorComponent(JTable table,
                Object value,
                boolean isSelected,
                int row,
                int column) {
            currentColor = (Color) value;
            this.row = row;
            return button;
        }
    }
}
