/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConvertTo2D.java
 *
 * Created on Nov 25, 2009, 1:43:36 AM
 */

package projection3d.reproject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import matrix.AbstractMatrix;
import matrix.dense.DenseMatrix;
import matrix.dense.DenseVector;
import projection.model.ProjectionInstance;
import projection.model.ProjectionModel;
import projection.model.ProjectionModelComp;
import projection.model.Scalar;
import projection.view.ProjectionFrameComp;
import projection3d.model.Projection3DInstance;
import projection3d.model.Projection3DModel;
import projection3d.reproject.ReprojectionFactory.ProjectionType;
import projection3d.util.Projection3DUtil;
import projection3d.view.Projection3DFrame;
import visualizationbasics.coordination.AbstractCoordinator;
import visualizationbasics.coordination.IdentityCoordinatorComp;
import visualizationbasics.model.AbstractInstance;
import vtk.vtkRenderer;




// TODO LSP y ISOMAP no funcionan
/**
 *
 * @author jpocom
 */
public class ConvertTo2D extends javax.swing.JDialog {

    /** Creates new form ConvertTo2D */
    public ConvertTo2D(java.awt.Frame parent) {
        super(parent);
        initComponents();

        for (ProjectionType type: ProjectionType.values()) {
            this.techniqueComboBox.addItem(type);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionsPanel = new javax.swing.JPanel();
        techniqueComboBox = new javax.swing.JComboBox();
        buttonPanel = new javax.swing.JPanel();
        reprojectButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose a Technique"));
        optionsPanel.setLayout(new java.awt.GridBagLayout());

        techniqueComboBox.setPreferredSize(new java.awt.Dimension(150, 20));
        optionsPanel.add(techniqueComboBox, new java.awt.GridBagConstraints());

        getContentPane().add(optionsPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setPreferredSize(new java.awt.Dimension(69, 33));

        reprojectButton.setText("Reproject");
        reprojectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reprojectButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(reprojectButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reprojectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reprojectButtonActionPerformed
        try {
            ProjectionType type = (ProjectionType) techniqueComboBox.getSelectedItem();
            vtkRenderer ren = frame.getView().GetRenderer();
            
            AbstractMatrix output = ReprojectionFactory.runInstance(type, ren, createMatrix());
            
            ProjectionModelComp modelComp = new ProjectionModelComp();
            Projection3DUtil.showDialog(modelComp);
            modelComp.input(output);
            modelComp.execute();
            copyScalars(modelComp);

            ProjectionFrameComp frameComp = new ProjectionFrameComp();
            Projection3DUtil.showDialog(frameComp);
            frameComp.input(modelComp.output());
            copyCoordinator(frameComp);
            frameComp.execute();
        } catch (IOException ex) {
            Logger.getLogger(ConvertTo2D.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_reprojectButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.frame = null;
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private AbstractMatrix createMatrix() {
        Projection3DModel model = (Projection3DModel)frame.getModel();

        AbstractMatrix matrix = new DenseMatrix();
        for (AbstractInstance inst: model.getInstances()) {
            Projection3DInstance inst3D = (Projection3DInstance)inst;
            matrix.addRow(new DenseVector(new float[]{inst3D.getX(),inst3D.getY(),inst3D.getZ()}, inst3D.getId()));
        }
        return matrix;
    }

    private void copyCoordinator(ProjectionFrameComp fcomp) {
        if (frame.getCoordinators().size()!= 0) {
                for (AbstractCoordinator coord: frame.getCoordinators()) {
                    fcomp.attach(coord);
                }
            } else {
                try {
                    IdentityCoordinatorComp coordcomp = new IdentityCoordinatorComp();
                    coordcomp.execute();
                    AbstractCoordinator coord = coordcomp.output();
                    frame.addCoordinator(coord);
                    fcomp.attach(coord);
                } catch (IOException ex) {
                    Logger.getLogger(ConvertTo2D.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
    }

    private void copyScalars(ProjectionModelComp compModel) {
        Projection3DModel model3D = (Projection3DModel)frame.getModel();
        ProjectionModel model2D = compModel.output();

        for (Scalar s : model3D.getScalars()) {
            model2D.addScalar(s.getName());
        }

        ArrayList<AbstractInstance> instances3D = model3D.getInstances();
        ArrayList<AbstractInstance> instances2D = model2D.getInstances();

        for (int i = 0; i < instances2D.size(); i++) {
            Projection3DInstance inst3D = (Projection3DInstance) instances3D.get(i);
            ProjectionInstance inst2D = (ProjectionInstance)instances2D.get(i);

            for (Scalar s : model2D.getScalars()) {
                inst2D.setScalarValue(s, inst3D.getScalarValue(s));
            }
        }
    }

    public static ConvertTo2D getInstance(javax.swing.JFrame parent) {
        return new ConvertTo2D(parent);
    }

    public void display(Projection3DFrame frame) {
        this.frame = frame;
        pack();
        setSize(300, 300);
        setLocationRelativeTo(this.getParent());
        setVisible(true);
    }

    private Projection3DFrame frame;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton reprojectButton;
    private javax.swing.JComboBox techniqueComboBox;
    // End of variables declaration//GEN-END:variables

}
