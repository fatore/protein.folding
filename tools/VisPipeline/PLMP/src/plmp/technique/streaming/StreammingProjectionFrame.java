/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProjectionFrame.java
 *
 * Created on 22/06/2009, 19:53:11
 */
package plmp.technique.streaming;

import distance.dissimilarity.Euclidean;
import java.awt.event.KeyEvent;
import visualizationbasics.view.MemoryCheck;
import projection.model.ProjectionModel;
import projection.model.ProjectionInstance;
import visualizationbasics.view.selection.AbstractSelection;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JToggleButton;
import plmp.technique.streaming.StreammingProjectionFrame.ViewPanel.MyDispatcher;
import matrix.AbstractMatrix;
import matrix.AbstractVector;
import matrix.dense.DenseMatrix;
import matrix.dense.DenseVector;
import visualizationbasics.util.SaveDialog;
import visualizationbasics.color.ColorScalePanel;
import projection.model.Scalar;
import projection.model.XMLModelWriter;
import projection.util.ProjectionConstants;
import visualizationbasics.util.filter.PNGFilter;
import projection.util.filter.XMLFilter;
import projection.view.selection.InstanceSelection;
import projection.view.selection.RangeSelection;
import projection.view.selection.coordination.CoordinationSelectionFactory;
import visualizationbasics.color.ColorScaleFactory.ColorScaleType;
import visualizationbasics.coordination.AbstractCoordinator;
import visualizationbasics.model.AbstractInstance;
import visualizationbasics.model.AbstractModel;
import visualizationbasics.util.PropertiesManager;
import visualizationbasics.view.ModelViewer;

/**
 *
 * @author Fernando Vieira Paulovich
 */
public class StreammingProjectionFrame extends ModelViewer {

    /** Creates new form ProjectionFrame */
    public StreammingProjectionFrame() {
        this.view = new ViewPanel();

        initComponents();

        addSelection(new InstanceSelection(this));
        addSelection(new RangeSelection(this));

        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(view.getKeyEventDispatcher());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        selectionButtonGroup = new javax.swing.ButtonGroup();
        toolBar = new javax.swing.JToolBar();
        saveButton = new javax.swing.JButton();
        separatorLabel1 = new javax.swing.JLabel();
        zoomInButton = new javax.swing.JButton();
        zoomOutButton = new javax.swing.JButton();
        separatorLabel2 = new javax.swing.JLabel();
        toolButton = new javax.swing.JButton();
        separatorLabel5 = new javax.swing.JLabel();
        controlPanel = new javax.swing.JPanel();
        dataPanel = new javax.swing.JPanel();
        scrollPanel = new javax.swing.JScrollPane(this.view);
        statusBarPanel = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        statusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        toolbarPanel = new javax.swing.JPanel();
        fixedToolBar = new javax.swing.JToolBar();
        moveInstancesToggleButton = new javax.swing.JToggleButton();
        cleanInstancesButton = new javax.swing.JButton();
        selectionToolBar = new javax.swing.JToolBar();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        fileSave = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JSeparator();
        exportMenu = new javax.swing.JMenu();
        fileExportToPng = new javax.swing.JMenuItem();
        fileExportToProjection = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        editClean = new javax.swing.JMenuItem();
        editDelete = new javax.swing.JMenuItem();
        menuTool = new javax.swing.JMenu();
        memoryCheckMenuItem = new javax.swing.JMenuItem();
        separatorOptions1 = new javax.swing.JSeparator();
        toolOptions = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Save16.gif"))); // NOI18N
        saveButton.setToolTipText("Save the current projection");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        toolBar.add(saveButton);

        separatorLabel1.setText("       ");
        toolBar.add(separatorLabel1);

        zoomInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/ZoomIn16.gif"))); // NOI18N
        zoomInButton.setToolTipText("Zoom in");
        zoomInButton.setMaximumSize(new java.awt.Dimension(29, 27));
        zoomInButton.setMinimumSize(new java.awt.Dimension(29, 27));
        zoomInButton.setPreferredSize(new java.awt.Dimension(29, 27));
        zoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });
        toolBar.add(zoomInButton);

        zoomOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/ZoomOut16.gif"))); // NOI18N
        zoomOutButton.setToolTipText("Zoom out");
        zoomOutButton.setMaximumSize(new java.awt.Dimension(29, 27));
        zoomOutButton.setMinimumSize(new java.awt.Dimension(29, 27));
        zoomOutButton.setPreferredSize(new java.awt.Dimension(29, 27));
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });
        toolBar.add(zoomOutButton);

        separatorLabel2.setText("       ");
        toolBar.add(separatorLabel2);

        toolButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Preferences16.gif"))); // NOI18N
        toolButton.setToolTipText("Tool Preferences");
        toolButton.setMaximumSize(new java.awt.Dimension(29, 27));
        toolButton.setMinimumSize(new java.awt.Dimension(29, 27));
        toolButton.setPreferredSize(new java.awt.Dimension(29, 27));
        toolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolButtonActionPerformed(evt);
            }
        });
        toolBar.add(toolButton);

        separatorLabel5.setText("       ");
        toolBar.add(separatorLabel5);

        getContentPane().add(toolBar, java.awt.BorderLayout.NORTH);

        controlPanel.setLayout(new java.awt.BorderLayout());

        dataPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dataPanel.setLayout(new java.awt.BorderLayout());
        dataPanel.add(scrollPanel, java.awt.BorderLayout.CENTER);

        controlPanel.add(dataPanel, java.awt.BorderLayout.CENTER);

        statusBarPanel.setPreferredSize(new java.awt.Dimension(30, 30));
        statusBarPanel.setLayout(new java.awt.BorderLayout());

        buttonPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonPanel.setLayout(new java.awt.GridBagLayout());

        prevButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/StepBack16.gif"))); // NOI18N
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        buttonPanel.add(prevButton, gridBagConstraints);

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/StepForward16.gif"))); // NOI18N
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        buttonPanel.add(nextButton, gridBagConstraints);

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Play16.gif"))); // NOI18N
        playButton.setText("  0");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        buttonPanel.add(playButton, gridBagConstraints);

        statusBarPanel.add(buttonPanel, java.awt.BorderLayout.CENTER);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        statusLabel.setText("                                               ");
        statusPanel.add(statusLabel);

        statusBarPanel.add(statusPanel, java.awt.BorderLayout.WEST);

        controlPanel.add(statusBarPanel, java.awt.BorderLayout.PAGE_END);

        toolbarPanel.setLayout(new java.awt.BorderLayout(0, 20));

        fixedToolBar.setOrientation(1);
        fixedToolBar.setRollover(true);

        moveInstancesToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/navigation/Forward16.gif"))); // NOI18N
        moveInstancesToggleButton.setToolTipText("Move Point");
        moveInstancesToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveInstancesToggleButtonActionPerformed(evt);
            }
        });
        fixedToolBar.add(moveInstancesToggleButton);

        cleanInstancesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Edit16.gif"))); // NOI18N
        cleanInstancesButton.setToolTipText("Clean Instances");
        cleanInstancesButton.setFocusable(false);
        cleanInstancesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cleanInstancesButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cleanInstancesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanInstancesButtonActionPerformed(evt);
            }
        });
        fixedToolBar.add(cleanInstancesButton);

        toolbarPanel.add(fixedToolBar, java.awt.BorderLayout.NORTH);

        selectionToolBar.setOrientation(1);
        toolbarPanel.add(selectionToolBar, java.awt.BorderLayout.CENTER);

        controlPanel.add(toolbarPanel, java.awt.BorderLayout.EAST);

        getContentPane().add(controlPanel, java.awt.BorderLayout.CENTER);

        menuFile.setMnemonic('F');
        menuFile.setText("File");

        fileSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fileSave.setMnemonic('S');
        fileSave.setText("Save Projection");
        fileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveActionPerformed(evt);
            }
        });
        menuFile.add(fileSave);
        menuFile.add(separator1);

        exportMenu.setText("Export");

        fileExportToPng.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        fileExportToPng.setMnemonic('P');
        fileExportToPng.setText("Export PNG File");
        fileExportToPng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExportToPngActionPerformed(evt);
            }
        });
        exportMenu.add(fileExportToPng);

        fileExportToProjection.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        fileExportToProjection.setMnemonic('J');
        fileExportToProjection.setText("Export 2D Points File");
        fileExportToProjection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExportToProjectionActionPerformed(evt);
            }
        });
        exportMenu.add(fileExportToProjection);

        menuFile.add(exportMenu);

        menuBar.add(menuFile);

        menuEdit.setMnemonic('E');
        menuEdit.setText("Edit");

        editClean.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        editClean.setMnemonic('C');
        editClean.setText("Clean Projection");
        editClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCleanActionPerformed(evt);
            }
        });
        menuEdit.add(editClean);

        editDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        editDelete.setMnemonic('D');
        editDelete.setText("Delete Points");
        editDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDeleteActionPerformed(evt);
            }
        });
        menuEdit.add(editDelete);

        menuBar.add(menuEdit);

        menuTool.setMnemonic('T');
        menuTool.setText("Tool");

        memoryCheckMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        memoryCheckMenuItem.setMnemonic('H');
        memoryCheckMenuItem.setText("Memory Check");
        memoryCheckMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryCheckMenuItemActionPerformed(evt);
            }
        });
        menuTool.add(memoryCheckMenuItem);
        menuTool.add(separatorOptions1);

        toolOptions.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        toolOptions.setMnemonic('O');
        toolOptions.setText("Tool Options");
        toolOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolOptionsActionPerformed(evt);
            }
        });
        menuTool.add(toolOptions);

        menuBar.add(menuTool);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveActionPerformed
        if (model != null) {
            try {
                PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
                int result = SaveDialog.showSaveDialog(spm, new XMLFilter(), this, "model.xml");

                if (result == JFileChooser.APPROVE_OPTION) {
                    String filename = SaveDialog.getFilename();

                    try {
                        XMLModelWriter mwriter = new XMLModelWriter();
                        mwriter.write((ProjectionModel) model, filename);
                    } catch (IOException e) {
                        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
                        JOptionPane.showMessageDialog(this, e.getMessage(),
                                "Problems saving the file", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(StreammingProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_fileSaveActionPerformed

    private void fileExportToPngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExportToPngActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
            int result = SaveDialog.showSaveDialog(spm, new PNGFilter(), this, "image.png");

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = SaveDialog.getFilename();

                try {
                    view.saveToPngImageFile(filename);
                } catch (IOException e) {
                    Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
                    JOptionPane.showMessageDialog(this, e.getMessage(),
                            "Problems saving the file", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(StreammingProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_fileExportToPngActionPerformed

    private void fileExportToProjectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExportToProjectionActionPerformed
//        if (model != null) {
//            try {
//                PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
//                int result = SaveDialog.showSaveDialog(spm, new DATAFilter(), this, "projection.data");
//
//                if (result == JFileChooser.APPROVE_OPTION) {
//                    String filename = SaveDialog.getFilename();
//
//                    try {
//                        AbstractMatrix matrix = ProjectionUtil.modelToMatrix((ProjectionModel) model, getCurrentScalar());
//                        matrix.save(filename);
//                    } catch (IOException e) {
//                        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
//                        JOptionPane.showMessageDialog(this, e.getMessage(),
//                                "Problems saving the file", JOptionPane.ERROR_MESSAGE);
//                    }
//                }
//            } catch (IOException ex) {
//                Logger.getLogger(StreammingProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
}//GEN-LAST:event_fileExportToProjectionActionPerformed

    private void editCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCleanActionPerformed
        if (view != null) {
            view.cleanSelectedInstances();
        }
}//GEN-LAST:event_editCleanActionPerformed

    private void editDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDeleteActionPerformed
        if (view != null) {
            view.removeSelectedInstances();
        }
}//GEN-LAST:event_editDeleteActionPerformed

    private void toolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolButtonActionPerformed
        toolOptionsActionPerformed(evt);
}//GEN-LAST:event_toolButtonActionPerformed

    private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
        if (view != null) {
            view.zoomOut();
        }
}//GEN-LAST:event_zoomOutButtonActionPerformed

    private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
        if (view != null) {
            view.zoomIn();
        }
}//GEN-LAST:event_zoomInButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        fileSaveActionPerformed(evt);
}//GEN-LAST:event_saveButtonActionPerformed

    private void moveInstancesToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveInstancesToggleButtonActionPerformed
        moveinstances = moveInstancesToggleButton.isSelected();
}//GEN-LAST:event_moveInstancesToggleButtonActionPerformed

    private void cleanInstancesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanInstancesButtonActionPerformed
        editCleanActionPerformed(evt);
}//GEN-LAST:event_cleanInstancesButtonActionPerformed

    private void toolOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolOptionsActionPerformed
        StreammingProjectionFameOptions.getInstance(this).display(this);
}//GEN-LAST:event_toolOptionsActionPerformed

    private void memoryCheckMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryCheckMenuItemActionPerformed
        MemoryCheck.showMemoryCheck();
}//GEN-LAST:event_memoryCheckMenuItemActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        if (gsp != null) {
            try {
                int timestamp = gsp.previousMatrix();
                playButton.setText("  " + timestamp);
                projectTimestamp();
            } catch (IOException ex) {
                Logger.getLogger(StreammingProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if (gsp != null) {
            try {
                int timestamp = gsp.nextMatrix();
                playButton.setText("  " + timestamp);
                projectTimestamp();
            } catch (IOException ex) {
                Logger.getLogger(StreammingProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        if (gsp != null) {
            if (play == null) {
                play = new Thread() {

                    @Override
                    public void run() {
                        while (true) {
                            try {
                                int timestamp = gsp.nextMatrix();
                                playButton.setText("  " + timestamp);
                                projectTimestamp();
                                Thread.sleep(1000);
                            } catch (InterruptedException ex) {
                                return;
                            } catch (IOException ex) {
                                Logger.getLogger(StreammingProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }

                };

                play.start();

                playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Stop16.gif")));

            } else {
                play.interrupt();
                play = null;

                playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Play16.gif")));
            }
        }
    }//GEN-LAST:event_playButtonActionPerformed

    public void setSampleModel(SampleProjectionModel model, GenerateStreammingProjection gsp) {
        if (model != null) {
            this.samplemodel = model;
            this.gsp = gsp;

            ((ProjectionModel) model).setSelectedScalar(((ProjectionModel) model).getScalars().get(0));

            Dimension size = getSize();
            size.height = (int) (size.height);
            size.width = (int) (size.width);
            ((ProjectionModel) model).fitToSize(size);

            view.setSampleModel(model);
        }
    }

    public void projectTimestamp() throws IOException {
        AbstractMatrix sampleproj = getSampleProjection();
        gsp.setSampleProjection(sampleproj);

        AbstractMatrix projection = gsp.project(gsp.getCurrentMatrix(), new Euclidean());

        System.out.println(gsp.getCurrentMatrixFilename());

        //create the projection model
        ProjectionModel modelaux = new ProjectionModel();
        Scalar cdata = modelaux.addScalar(ProjectionConstants.CDATA);

        int nrows = projection.getRowCount();
        for (int i = 0; i < nrows; i++) {
            AbstractVector row = projection.getRow(i);
            ProjectionInstance pi = new ProjectionInstance(modelaux, row.getId(),
                    row.getValue(0), row.getValue(1));
            pi.setScalarValue(cdata, row.getKlass());
        }

        ((ProjectionModel) modelaux).setSelectedScalar(((ProjectionModel) modelaux).getScalars().get(0));

        if (model != null) {
            //removing the models from the coordinators
            for (int i = 0; i < coord_aux.size(); i++) {
                coord_aux.get(i).deleteModel(model);
            }
            
            //using the alpha of the previous model
            float alpha = ((ProjectionModel) model).getAlpha();
            modelaux.setAlpha(alpha);
        }

        //setting the new model
        setModel(modelaux);

        //adding the coordinators to the model
        coordinators.clear();
        for (int i = 0; i < coord_aux.size(); i++) {
            super.addCoordinator(coord_aux.get(i));
        }
    }

    @Override
    public void addCoordinator(AbstractCoordinator coordinator) {
        if (coordinator != null) {
            if (!coord_aux.contains(coordinator)) {
                coord_aux.add(coordinator);
                addSelection(CoordinationSelectionFactory.getInstance(coordinator, this));
            }
        }
    }

    public AbstractMatrix getSampleProjection() {
        DenseMatrix projection = new DenseMatrix();

        if (samplemodel != null) {
            ArrayList<AbstractInstance> instances = samplemodel.getInstances();

            for (int i = 0; i < instances.size(); i++) {
                ProjectionInstance pi = (ProjectionInstance) instances.get(i);

                float[] vector = new float[2];
                vector[0] = pi.getX();
                vector[1] = pi.getY();

                projection.addRow(new DenseVector(vector, pi.getId(), 0));
            }
        }

        return projection;
    }

    @Override
    public void setModel(AbstractModel model) {
        if (model instanceof ProjectionModel) {
            if (model != null) {
                super.setModel(model);
                view.setModel((ProjectionModel) model);
            }
        }
    }

    public void addSelection(final AbstractSelection selection) {
        if (selection != null) {
            JToggleButton button = new JToggleButton();
            selectionButtonGroup.add(button);
            button.setIcon(selection.getIcon());
            button.setSelected(false);
            button.setToolTipText(selection.toString());

            button.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    if (view != null) {
                        view.setSelection(selection);
                    }
                }

            });

            selectionToolBar.add(button);
        }
    }

    public void setViewerBackground(Color bg) {
        if (view != null) {
            view.setBackground(bg);
            view.cleanImage();
            view.repaint();
        }
    }

    public ViewPanel getView() {
        return view;
    }

    public boolean isHighQualityRender() {
        return highqualityrender;
    }

    public void setHighQualityRender(boolean highqualityrender) {
        this.highqualityrender = highqualityrender;

        view.cleanImage();
        view.repaint();
    }

    public boolean isShowInstanceLabel() {
        return showinstancelabel;
    }

    public void setShowInstanceLabel(boolean showinstancelabel) {
        this.showinstancelabel = showinstancelabel;

        view.cleanImage();
        view.repaint();
    }

    public boolean isMoveInstances() {
        return moveinstances;
    }

    public void setMoveInstance(boolean moveinstances) {
        this.moveinstances = moveinstances;
    }

    @Override
    public void update(Observable o, Object arg) {
        if (model != null) {
            view.cleanImage();
            view.repaint();
        }
    }

    public void changeStatus(String status) {
        this.statusLabel.setText(status);
        this.statusLabel.update(this.statusLabel.getGraphics());
        Rectangle r = this.statusLabel.getGraphicsConfiguration().getBounds();
        this.statusLabel.getGraphics().clearRect(r.x, r.y, r.width, r.height);
        this.statusLabel.update(this.statusLabel.getGraphics());
    }

    public void updateImage() {
        if (this.view != null) {
            this.view.cleanImage();
            this.view.adjustPanel();
            this.view.repaint();
        }
    }

    public class ViewPanel extends JPanel {

        public ViewPanel() {
            this.selcolor = java.awt.Color.GREEN;
            this.setBackground(java.awt.Color.WHITE);

            this.addMouseMotionListener(new MouseMotionListener());
            this.addMouseListener(new MouseClickedListener());

            this.setLayout(new FlowLayout(FlowLayout.LEFT));
        }

        @Override
        public void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);

            java.awt.Graphics2D g2 = (java.awt.Graphics2D) g;

            if (samplemodel != null && image == null) {
                Dimension size = ((ProjectionModel) samplemodel).getSize();
                image = new BufferedImage(size.width * 3 + 10, size.height * 3 + 10,
                        BufferedImage.TYPE_INT_RGB);

                java.awt.Graphics2D g2Buffer = image.createGraphics();
                g2Buffer.setColor(this.getBackground());
                g2Buffer.fillRect(0, 0, size.width * 3 + 10, size.height * 3 + 10);

                if (highqualityrender) {
                    g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
                } else {
                    g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_OFF);
                }

                if (model != null) {
                    ((ProjectionModel) model).draw(image, highqualityrender);
                }

//                samplemodel.draw(image, highqualityrender);

                g2Buffer.dispose();
            }

            if (image != null) {
                g2.drawImage(image, 0, 0, null);
            }

            //Draw he rectangle to select the instances
            if (selsource != null && seltarget != null) {
                int x = selsource.x;
                int width = width = seltarget.x - selsource.x;

                int y = selsource.y;
                int height = seltarget.y - selsource.y;

                if (selsource.x > seltarget.x) {
                    x = seltarget.x;
                    width = selsource.x - seltarget.x;
                }

                if (selsource.y > seltarget.y) {
                    y = seltarget.y;
                    height = selsource.y - seltarget.y;
                }
                g2.setColor(selcolor);
                g2.drawRect(x, y, width, height);

                g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 0.15f));
                g2.fillRect(x, y, width, height);
            } else { //Draw the instance label                
                if (showinstancelabel && label != null && labelpos != null) {
                    g2.setFont(this.getFont());
                    java.awt.FontMetrics metrics = g2.getFontMetrics(g2.getFont());

                    //Getting the label size
                    int width = metrics.stringWidth(label);
                    int height = metrics.getAscent();

                    g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 0.75f));
                    g2.setPaint(java.awt.Color.WHITE);
                    g2.fillRect(labelpos.x - 2, labelpos.y - height, width + 4, height + 4);
                    g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0f));

                    g2.setColor(java.awt.Color.DARK_GRAY);
                    g2.drawRect(labelpos.x - 2, labelpos.y - height, width + 4, height + 4);

                    //Drawing the label
                    g2.drawString(label, labelpos.x, labelpos.y);
                }
            }

            //drawn the selection polygon
            if (selpolygon != null) {
                g2.setColor(selcolor);
                g2.drawPolygon(selpolygon);

                g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 0.45f));
                g2.fillPolygon(selpolygon);
            }
        }

        public void saveToPngImageFile(String filename) throws IOException {
            try {
                Dimension size = ((ProjectionModel) model).getSize();
                BufferedImage buffer = new BufferedImage(size.width + 10, size.height + 10,
                        BufferedImage.TYPE_INT_RGB);
                paint(buffer.getGraphics());
                ImageIO.write(buffer, "png", new File(filename));
            } catch (IOException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            }
        }

        public void cleanImage() {
            image = null;
        }

        public void setModel(ProjectionModel model) {
            cleanImage();
            repaint();
        }

        public void setSampleModel(SampleProjectionModel model) {
            colorscale = new ColorScalePanel(null);
            colorscale.setColorTable(model.getColorTable());
            colorscale.setPreferredSize(new Dimension(200, 12));
            removeAll();
            add(colorscale);

            colorscale.setBackground(getBackground());

            Dimension size = model.getSize();
            setPreferredSize(new Dimension(size.width * 2, size.height * 2));
            setSize(new Dimension(size.width * 2, size.height * 2));

            cleanImage();
            repaint();
        }

        public void setSelection(AbstractSelection selection) {
            this.selection = selection;
        }

        public void zoomIn() {
            if (model != null) {
                ((ProjectionModel) model).zoom(1.1f);
                samplemodel.zoom(1.1f);

                //Change the size of the panel according to the projection
                Dimension size = ((ProjectionModel) model).getSize();
                setPreferredSize(new Dimension(size.width * 2, size.height * 2));
                setSize(new Dimension(size.width * 2, size.height * 2));

                model.notifyObservers();
            }
        }

        public void zoomOut() {
            if (model != null) {
                ((ProjectionModel) model).zoom(0.9091f);
                samplemodel.zoom(0.9091f);

                //Change the size of the panel according to the projection
                Dimension size = ((ProjectionModel) model).getSize();
                setPreferredSize(new Dimension(size.width * 2, size.height * 2));
                setSize(new Dimension(size.width * 2, size.height * 2));

                model.notifyObservers();
            }
        }

        public void adjustPanel() {
            float iniX = ((ProjectionInstance) model.getInstances().get(0)).getX();
            float iniY = ((ProjectionInstance) model.getInstances().get(0)).getY();
            float max_x = iniX, max_y = iniX;
            float min_x = iniY, min_y = iniY;
            int zero = 30;

            for (int i = 1; i < model.getInstances().size(); i++) {
                float x = ((ProjectionInstance) model.getInstances().get(i)).getX();
                if (max_x < x) {
                    max_x = x;
                } else if (min_x > x) {
                    min_x = x;
                }

                float y = ((ProjectionInstance) model.getInstances().get(i)).getY();
                if (max_y < y) {
                    max_y = y;
                } else if (min_y > y) {
                    min_y = y;
                }
            }

            for (AbstractInstance ai : model.getInstances()) {
                ProjectionInstance pi = (ProjectionInstance) ai;
                pi.setX(pi.getX() + zero - min_x);
                pi.setY(pi.getY() + zero - min_y);
            }

            Dimension d = this.getSize();
            d.width = (int) max_x + zero;
            d.height = (int) max_y + zero;
            setSize(d);
            setPreferredSize(d);

            model.notifyObservers();
        }

        public void cleanSelectedInstances() {
            if (model != null) {
                model.cleanSelectedInstances();
                model.notifyObservers();
            }
        }

        public void removeSelectedInstances() {
            if (model != null) {
                model.removeSelectedInstances();
                model.notifyObservers();
            }
        }

        public ArrayList<ProjectionInstance> getSelectedInstances(Polygon polygon) {
            ArrayList<ProjectionInstance> selected = new ArrayList<ProjectionInstance>();

            if (model != null) {
                selected = ((ProjectionModel) model).getInstancesByPosition(polygon);
            }

            return selected;
        }

        public ArrayList<ProjectionInstance> getSelectedInstances(Point source, Point target) {
            ArrayList<ProjectionInstance> selinstances = new ArrayList<ProjectionInstance>();

            if (model != null) {
                int x = Math.min(source.x, target.x);
                int width = Math.abs(source.x - target.x);

                int y = Math.min(source.y, target.y);
                int height = Math.abs(source.y - target.y);

                Rectangle rect = new Rectangle(x, y, width, height);
                selinstances = ((ProjectionModel) model).getInstancesByPosition(rect);
            }

            return selinstances;
        }

        @Override
        public void setBackground(Color bg) {
            super.setBackground(bg);

            if (this.colorscale != null) {
                this.colorscale.setBackground(bg);
            }
        }

        public KeyEventDispatcher getKeyEventDispatcher() {
            return new MyDispatcher();
        }

        public class MyDispatcher implements KeyEventDispatcher {

            @Override
            public boolean dispatchKeyEvent(KeyEvent e) {
                if (e.getID() == KeyEvent.KEY_PRESSED) {
                    if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                        selsource = null;
                        seltarget = null;
                        cleanImage();
                        repaint();
                    } else if (e.getKeyCode() == KeyEvent.VK_C) {
                        if (selsource != null && seltarget != null) {
                            ArrayList<ProjectionInstance> instances = getSelectedInstances(selsource, seltarget);

                            if (instances != null) {
                                float perc = 100.0f * (instances.size() / ((float) model.getInstances().size()));
                                DecimalFormat df = new DecimalFormat("0.##");
                                changeStatus("Number of Instances in Selection: " + instances.size() + " (" + df.format(perc) + "%)");

                                if (selection != null) {
                                    selection.selected(new ArrayList<AbstractInstance>(instances));
                                }
                            }

                            cleanImage();
                            repaint();
                        }
                    }
                }

                return false;
            }

        }

        class MouseMotionListener extends MouseMotionAdapter {

            @Override
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                super.mouseMoved(evt);

                if (model != null) {
                    ProjectionInstance instance = ((ProjectionModel) model).getInstanceByPosition(evt.getPoint());

                    if (instance != null) {
                        //Show the instance label
                        label = instance.toString();

                        if (label.trim().length() > 0) {
                            if (label.length() > 100) {
                                label = label.substring(0, 96) + "...";
                            }

                            labelpos = evt.getPoint();
                            repaint();
                        }
                    } else {
                        //Clear the label
                        label = null;
                        labelpos = null;
                        repaint();
                    }
                }
            }

            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                if (selinstance != null) {
                    if (model.hasSelectedInstances()) {
                        float x = evt.getX() - selinstance.getX();
                        float y = evt.getY() - selinstance.getY();

                        for (AbstractInstance ai : model.getSelectedInstances()) {
                            ProjectionInstance pi = (ProjectionInstance) ai;
                            pi.setX(x + pi.getX());
                            pi.setY(y + pi.getY());
                        }

                        adjustPanel();
                    }
                } else if (selsource != null) {
                    seltarget = evt.getPoint();
                } else if (selpolygon != null) {
                    selpolygon.addPoint(evt.getX(), evt.getY());
                }

                repaint();
            }

        }

        class MouseClickedListener extends MouseAdapter {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                super.mouseClicked(evt);

                if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
                    if (model != null) {
                        ProjectionInstance instance = ((ProjectionModel) model).getInstanceByPosition(evt.getPoint());
                        changeStatus("Number of Instances in Selection: " + 0);
                        if (instance != null) {
                            changeStatus("Number of Instances in Selection: " + 1);
                            model.setSelectedInstance(instance);
                            model.notifyObservers();
                        }
                    }
                } else if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
                    cleanSelectedInstances();
                    changeStatus("Number of Instances in Selection: " + 0);
                }
            }

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                super.mousePressed(evt);

                if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
                    if (model != null) {
                        ProjectionInstance instance = ((ProjectionModel) model).getInstanceByPosition(evt.getPoint());

                        if (instance != null) {
                            if (moveinstances) {
                                if (model.getSelectedInstances().contains(instance)) {
                                    selinstance = instance;
                                }
                            }
                        } else {
                            selsource = evt.getPoint();
                            seltarget = null;
                        }
                    }
                } else if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
                    selpolygon = new java.awt.Polygon();
                    selpolygon.addPoint(evt.getX(), evt.getY());
                }
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                super.mouseReleased(evt);

                if (model != null) {
                    if ((selsource != null && seltarget != null) || selpolygon != null) {
                        ArrayList<ProjectionInstance> instances = null;

                        if (selpolygon != null) {
                            instances = getSelectedInstances(selpolygon);
                        } else {
                            instances = getSelectedInstances(selsource, seltarget);
                        }

                        if (instances != null) {
                            float perc = 100.0f * (instances.size() / ((float) model.getInstances().size()));
                            DecimalFormat df = new DecimalFormat("0.##");
                            changeStatus("Number of Instances in Selection: " + instances.size() + " (" + df.format(perc) + "%)");

                            if (selection != null) {
                                selection.selected(new ArrayList<AbstractInstance>(instances));
                            }
                        }
                    }
                }

                selpolygon = null;
                selinstance = null;
//                selsource = null;
//                seltarget = null;
            }

        }

        private ProjectionInstance selinstance;
        private Polygon selpolygon;
        private Point selsource;
        private Point seltarget;
        private Color selcolor;
        private String label;
        private Point labelpos;
        private BufferedImage image;
        private ColorScalePanel colorscale;
        private AbstractSelection selection;
    }

    public static void main(String[] args) {
        StreammingProjectionFrame frame = new StreammingProjectionFrame();
        frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
        frame.setSize(800, 800);
        frame.setVisible(true);
    }

    private ArrayList<AbstractCoordinator> coord_aux = new ArrayList<AbstractCoordinator>();
    private Thread play;
    private GenerateStreammingProjection gsp;
    private SampleProjectionModel samplemodel;
    private boolean highqualityrender = false;
    private boolean showinstancelabel = true;
    private boolean moveinstances = true;
    private ViewPanel view;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cleanInstancesButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JMenuItem editClean;
    private javax.swing.JMenuItem editDelete;
    private javax.swing.JMenu exportMenu;
    private javax.swing.JMenuItem fileExportToPng;
    private javax.swing.JMenuItem fileExportToProjection;
    private javax.swing.JMenuItem fileSave;
    private javax.swing.JToolBar fixedToolBar;
    private javax.swing.JMenuItem memoryCheckMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuTool;
    private javax.swing.JToggleButton moveInstancesToggleButton;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton playButton;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.ButtonGroup selectionButtonGroup;
    private javax.swing.JToolBar selectionToolBar;
    private javax.swing.JSeparator separator1;
    private javax.swing.JLabel separatorLabel1;
    private javax.swing.JLabel separatorLabel2;
    private javax.swing.JLabel separatorLabel5;
    private javax.swing.JSeparator separatorOptions1;
    private javax.swing.JPanel statusBarPanel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JButton toolButton;
    private javax.swing.JMenuItem toolOptions;
    private javax.swing.JPanel toolbarPanel;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOutButton;
    // End of variables declaration//GEN-END:variables
}
