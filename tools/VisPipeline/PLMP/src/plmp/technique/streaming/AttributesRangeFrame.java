/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AttributesRangeFrame.java
 *
 * Created on 03/03/2010, 14:24:51
 */
package plmp.technique.streaming;

import plmp.util.TXTFilter;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import matrix.AbstractMatrix;
import matrix.AbstractVector;
import plmp.util.PLMPConstants;
import projection.model.ProjectionInstance;
import projection.model.Scalar;
import projection.util.ProjectionConstants;
import visualizationbasics.color.ColorTable;
import visualizationbasics.util.OpenDialog;
import visualizationbasics.util.PropertiesManager;

/**
 *
 * @author PC
 */
public class AttributesRangeFrame extends javax.swing.JFrame {

    /** Creates new form AttributesRangeFrame */
    public AttributesRangeFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        backPanel = new javax.swing.JPanel();
        descriptionPanel = new javax.swing.JPanel();
        filenameLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        filenameTextField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        addAnchorButton = new javax.swing.JButton();
        projectButton = new javax.swing.JButton();
        anchorsTabbedPane = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backPanel.setLayout(new java.awt.BorderLayout());

        descriptionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Description FIle"));
        descriptionPanel.setLayout(new java.awt.GridBagLayout());

        filenameLabel.setText("File name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        descriptionPanel.add(filenameLabel, gridBagConstraints);

        searchButton.setText("Search...");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        descriptionPanel.add(searchButton, gridBagConstraints);

        filenameTextField.setColumns(35);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        descriptionPanel.add(filenameTextField, gridBagConstraints);

        backPanel.add(descriptionPanel, java.awt.BorderLayout.NORTH);

        buttonPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        addAnchorButton.setText("Add Anchor");
        addAnchorButton.setEnabled(false);
        addAnchorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAnchorButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(addAnchorButton);

        projectButton.setText("Project");
        projectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(projectButton);

        backPanel.add(buttonPanel, java.awt.BorderLayout.PAGE_END);
        backPanel.add(anchorsTabbedPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(backPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(PLMPConstants.PROPFILENAME);
            int result = OpenDialog.showOpenDialog(spm, new TXTFilter(), this);

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = OpenDialog.getFilename();
                filenameTextField.setText(filename);
                gensample = new GenerateSample(filename);
                attributepanels = new ArrayList<ArrayList<AttributePanel>>();
                addAnchorButtonActionPerformed(evt);
            }
        } catch (IOException ex) {
            Logger.getLogger(AttributesRangeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void addAnchorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAnchorButtonActionPerformed
        if (gensample != null) {
            ArrayList<String> attr_aux = gensample.getAttributes();

            ArrayList<AttributePanel> attributes = new ArrayList<AttributePanel>();
            attributepanels.add(attributes);

            JPanel attrpanel = new JPanel();
            attrpanel.setLayout(new GridBagLayout());
            attrpanel.setBorder(BorderFactory.createTitledBorder("Attributes"));

            for (int i = 0; i < attr_aux.size(); i++) {
                AttributePanel ap = new AttributePanel(attr_aux.get(i));
                attributes.add(ap);

                GridBagConstraints gbc = new GridBagConstraints();
                gbc.gridx = i;
                gbc.gridx = 0;
                gbc.anchor = GridBagConstraints.WEST;
                gbc.fill = GridBagConstraints.NONE;
                attrpanel.add(ap, gbc);
            }

            anchorsTabbedPane.add("Range", attrpanel);
            anchorsTabbedPane.setSelectedComponent(attrpanel);
            pack();

            for (int i = 0; i < anchorsTabbedPane.getTabCount(); i++) {
                float color = (i == 0) ? 0 : (float) i / (float) (anchorsTabbedPane.getTabCount() - 1);
                anchorsTabbedPane.setBackgroundAt(i, ctable.getColor(color));
            }
        }
    }//GEN-LAST:event_addAnchorButtonActionPerformed

    private void projectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectButtonActionPerformed
        if (gensample != null) {
            try {
                gensample.clearIntervals();

                for (int i = 0; i < attributepanels.size(); i++) {
                    ArrayList<AttributePanel> attrpanels = attributepanels.get(i);
                    GenerateSample.Interval[] intervals = new GenerateSample.Interval[gensample.getNumberDimensions()];

                    for (int j = 0; j < attrpanels.size(); j++) {
                        AttributePanel attrpanel = attrpanels.get(j);
                        intervals[j] = new GenerateSample.Interval(attrpanel.getMin(), attrpanel.getMax());
                    }

                    gensample.addIntervals(intervals);
                }

//                int nrvectors = Integer.parseInt(JOptionPane.showInputDialog(this, "Number of vectors per anchor?", "50"));
//                AbstractMatrix samplematrix = gensample.generateSample(attributepanels.size() * nrvectors);
                AbstractMatrix samplematrix = gensample.generateSpamBase(null, 800);

                PropertiesManager spm = PropertiesManager.getInstance(PLMPConstants.PROPFILENAME);
                OpenDialog.getJFileChooser().setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
                int result = OpenDialog.showOpenDialog(spm, new DirectoryFilter(), this);
                OpenDialog.getJFileChooser().setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);

                if (result == JFileChooser.APPROVE_OPTION) {
                    String filename = OpenDialog.getFilename();
                    GenerateStreammingProjection gsp = new GenerateStreammingProjection(filename, samplematrix);

                    //creating the sample model
                    SampleProjectionModel samplemodel = new SampleProjectionModel(samplematrix);
                    Scalar cdata = samplemodel.addScalar(ProjectionConstants.CDATA);

                    AbstractMatrix sampleproj = gsp.getSampleProjection();

                    int nrows = sampleproj.getRowCount();
                    for (int i = 0; i < nrows; i++) {
                        AbstractVector row = sampleproj.getRow(i);
                        ProjectionInstance pi = new ProjectionInstance(samplemodel, row.getId(),
                                row.getValue(0), row.getValue(1));
                        pi.setScalarValue(cdata, row.getKlass());
                    }

                    StreammingProjectionFrame frame = new StreammingProjectionFrame();
                    frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
                    frame.setSize(800, 800);
                    frame.setSampleModel(samplemodel, gsp);
                    frame.setVisible(true);

                    //projecting the first time stamp
                    frame.projectTimestamp();
                }
            } catch (IOException ex) {
                Logger.getLogger(AttributesRangeFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_projectButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new AttributesRangeFrame().setVisible(true);
            }

        });
    }

    private ColorTable ctable = new ColorTable();
    private GenerateSample gensample;
    private ArrayList<ArrayList<AttributePanel>> attributepanels;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAnchorButton;
    private javax.swing.JTabbedPane anchorsTabbedPane;
    private javax.swing.JPanel backPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel descriptionPanel;
    private javax.swing.JLabel filenameLabel;
    private javax.swing.JTextField filenameTextField;
    private javax.swing.JButton projectButton;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
}
