/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProjectionFrame.java
 *
 * Created on 22/06/2009, 19:53:11
 */
package plmp.technique.reposition;

import distance.dissimilarity.DissimilarityFactory.DissimilarityType;
import projection.model.ProjectionModel;
import projection.model.ProjectionInstance;
import visualizationbasics.view.selection.AbstractSelection;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import plmp.technique.PLMPProjectionComp;
import plmp.technique.Sampling.SampleType;
import plmp.technique.SamplingComp;
import matrix.AbstractMatrix;
import matrix.AbstractVector;
import matrix.dense.DenseMatrix;
import matrix.dense.DenseVector;
import matrix.reader.MatrixReaderComp;
import plmp.technique.MakeNonSingular;
import plmp.util.PLMPConstants;
import projection.model.ProjectionModelComp;
import visualizationbasics.color.ColorScalePanel;
import projection.model.Scalar;
import projection.technique.idmap.IDMAPProjection.InitializationType;
import projection.technique.idmap.IDMAPProjectionComp;
import projection.util.ProjectionConstants;
import projection.view.ProjectionFrame;
import projection.view.ProjectionFrameComp;
import projection.view.selection.InstanceSelection;
import visualizationbasics.color.ColorScaleFactory.ColorScaleType;
import visualizationbasics.model.AbstractInstance;
import visualizationbasics.model.AbstractModel;
import visualizationbasics.util.OpenDialog;
import visualizationbasics.util.PropertiesManager;
import visualizationbasics.util.SaveDialog;
import visualizationbasics.util.filter.DATAandBINMultipleFilter;
import visualizationbasics.util.filter.PNGFilter;
import visualizationbasics.view.ModelViewer;

/**
 *
 * @author Fernando Vieira Paulovich
 */
public class IterativeSampleProjectionFrame extends ModelViewer {

    /** Creates new form ProjectionFrame */
    public IterativeSampleProjectionFrame() {
        this.view = new ViewPanel();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        saveButton1 = new javax.swing.JButton();
        zoomInButton = new javax.swing.JButton();
        zoomOutButton = new javax.swing.JButton();
        controlPanel = new javax.swing.JPanel();
        scrollPanel = new javax.swing.JScrollPane(this.view);
        buttonPanel = new javax.swing.JPanel();
        initButton = new javax.swing.JButton();
        finishButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sampling Projection");

        saveButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Save16.gif"))); // NOI18N
        saveButton1.setToolTipText("Save the current projection");
        saveButton1.setFocusable(false);
        saveButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButton1ActionPerformed(evt);
            }
        });
        toolBar.add(saveButton1);

        zoomInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/ZoomIn16.gif"))); // NOI18N
        zoomInButton.setToolTipText("Zoom in");
        zoomInButton.setMaximumSize(new java.awt.Dimension(29, 27));
        zoomInButton.setMinimumSize(new java.awt.Dimension(29, 27));
        zoomInButton.setPreferredSize(new java.awt.Dimension(29, 27));
        zoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });
        toolBar.add(zoomInButton);

        zoomOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/ZoomOut16.gif"))); // NOI18N
        zoomOutButton.setToolTipText("Zoom out");
        zoomOutButton.setMaximumSize(new java.awt.Dimension(29, 27));
        zoomOutButton.setMinimumSize(new java.awt.Dimension(29, 27));
        zoomOutButton.setPreferredSize(new java.awt.Dimension(29, 27));
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });
        toolBar.add(zoomOutButton);

        getContentPane().add(toolBar, java.awt.BorderLayout.NORTH);

        controlPanel.setLayout(new java.awt.BorderLayout());
        controlPanel.add(scrollPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        initButton.setText("Init Projection");
        initButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(initButton);

        finishButton.setText("Finish Projection >>");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(finishButton);

        controlPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(controlPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
        if (view != null) {
            view.zoomOut();
        }
}//GEN-LAST:event_zoomOutButtonActionPerformed

    private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
        if (view != null) {
            view.zoomIn();
        }
}//GEN-LAST:event_zoomInButtonActionPerformed

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed
        if (model != null) {
            try {
                PLMPProjectionComp mmds = new PLMPProjectionComp();
                mmds.setDissimilarityType(DissimilarityType.EUCLIDEAN);
                mmds.setFractionDelta(8.0f);
                mmds.setNumberIterations(100);
                mmds.input(matrix, samplematrix, getRepositionedProjection());
                mmds.execute();

                AbstractMatrix projection = mmds.output();
                ProjectionModelComp completemodel = new ProjectionModelComp();
                completemodel.input(projection);
                completemodel.execute();

                completemodel.output().changeColorScaleType(((IterativeProjectionModel) model).getColorTable().getColorScaleType());

                ProjectionFrameComp frame = new ProjectionFrameComp();
                frame.setTitle("Complete Projection");
                frame.input(completemodel.output());
                frame.execute();
            } catch (IOException ex) {
                Logger.getLogger(IterativeSampleProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_finishButtonActionPerformed

    private void initButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initButtonActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(PLMPConstants.PROPFILENAME);
            int result = OpenDialog.showOpenDialog(spm, new DATAandBINMultipleFilter(), this);

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = OpenDialog.getFilename();

                MatrixReaderComp reader = new MatrixReaderComp();
                reader.setFilename(filename);
                reader.execute();
                matrix = reader.output();

                SamplingComp sampling = new SamplingComp();
                sampling.setDissimilarityType(DissimilarityType.EUCLIDEAN);
                sampling.setSampleSize((int) Math.sqrt(matrix.getRowCount()) * 3);
                sampling.setSampleType(SampleType.RANDOM);
                sampling.input(matrix);
                sampling.execute();
                samplematrix = sampling.output();

                samplematrix = MakeNonSingular.execute(samplematrix);

                IDMAPProjectionComp idmap = new IDMAPProjectionComp();
                idmap.setDissimilarityType(DissimilarityType.EUCLIDEAN);
                idmap.setFractionDelta(8.0f);
                idmap.setInitialization(InitializationType.FASTMAP);
                idmap.setNumberIterations(100);
                idmap.input(samplematrix);
                idmap.execute();
                sampleproj = idmap.output();

                //creating the model
                model = new IterativeProjectionModel();
                ((IterativeProjectionModel) model).changeColorScaleType(ColorScaleType.CATEGORY_SCALE);
                Scalar cdata = ((IterativeProjectionModel) model).addScalar(ProjectionConstants.CDATA);
                int nrows = sampleproj.getRowCount();

                for (int i = 0; i < nrows; i++) {
                    AbstractVector row = sampleproj.getRow(i);
                    ProjectionInstance pi = new ProjectionInstance(((IterativeProjectionModel) model), row.getId(),
                            row.getValue(0), row.getValue(1));
                    pi.setScalarValue(cdata, row.getKlass());
                }

                setModel(model);
            }
        } catch (IOException ex) {
            Logger.getLogger(IterativeSampleProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_initButtonActionPerformed

    private void saveButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButton1ActionPerformed
        try {
            PropertiesManager spm = PropertiesManager.getInstance(ProjectionConstants.PROPFILENAME);
            int result = SaveDialog.showSaveDialog(spm, new PNGFilter(), this, "image.png");

            if (result == JFileChooser.APPROVE_OPTION) {
                String filename = SaveDialog.getFilename();

                try {
                    view.saveToPngImageFile(filename);
                } catch (IOException e) {
                    Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, e);
                    JOptionPane.showMessageDialog(this, e.getMessage(),
                            "Problems saving the file", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(ProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_saveButton1ActionPerformed

    @Override
    public void setModel(AbstractModel model) {
        if (model instanceof ProjectionModel) {
            if (model != null) {

                Dimension size = getSize();
                size.height = (int) (size.height * 0.75f);
                size.width = (int) (size.width * 0.95f);
                ((ProjectionModel) model).fitToSize(size);

                super.setModel(model);

                Scalar scalar = null;
                ArrayList<Scalar> scalars = ((ProjectionModel) model).getScalars();
                for (Scalar s : scalars) {
                    if (s.getName().equals(ProjectionConstants.CDATA)) {
                        scalar = s;
                    }
                }

                if (scalar == null) {
                    scalar = ((ProjectionModel) model).getScalars().get(0);
                }

                ((ProjectionModel) model).setSelectedScalar(scalar);
                view.setModel((ProjectionModel) model);
            }
        }
    }

    public AbstractMatrix getRepositionedProjection() {
        DenseMatrix projection = new DenseMatrix();

        if (model != null) {
            ArrayList<AbstractInstance> instances = model.getInstances();

            for (int i = 0; i < instances.size(); i++) {
                ProjectionInstance pi = (ProjectionInstance) instances.get(i);

                float[] vector = new float[2];
                vector[0] = pi.getX();
                vector[1] = pi.getY();

                projection.addRow(new DenseVector(vector, pi.getId(), 0));
            }


            for (int i = instances.size() - 1; i < sampleproj.getRowCount(); i++) {
                AbstractVector row = sampleproj.getRow(i);
                projection.addRow(new DenseVector(row.toArray(), row.getId(), 0));
            }
        }

        return projection;
    }

    public void setViewerBackground(Color bg) {
        if (view != null) {
            view.setBackground(bg);
            view.cleanImage();
            view.repaint();
        }
    }

    public ViewPanel getView() {
        return view;
    }

    @Override
    public void update(Observable o, Object arg) {
        if (model != null) {
            view.cleanImage();
            view.repaint();
        }
    }

    public void updateImage() {
        if (this.view != null) {
            this.view.cleanImage();
            this.view.adjustPanel();
            this.view.repaint();
        }
    }

    public class ViewPanel extends JPanel {

        public ViewPanel() {
            this.selcolor = java.awt.Color.RED;
            this.setBackground(java.awt.Color.WHITE);

            this.addMouseMotionListener(new MouseMotionListener());
            this.addMouseListener(new MouseClickedListener());

            this.setLayout(new FlowLayout(FlowLayout.LEFT));

            this.selection = new InstanceSelection(IterativeSampleProjectionFrame.this);
        }

        @Override
        public void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);

            java.awt.Graphics2D g2 = (java.awt.Graphics2D) g;

            if (model != null && image == null) {
                Dimension size = ((ProjectionModel) model).getSize();
                image = new BufferedImage(size.width + 10, size.height + 10,
                        BufferedImage.TYPE_INT_RGB);

                java.awt.Graphics2D g2Buffer = image.createGraphics();
                g2Buffer.setColor(this.getBackground());
                g2Buffer.fillRect(0, 0, size.width + 10, size.height + 10);


                g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);

                ((ProjectionModel) model).draw(image, true);

                g2Buffer.dispose();
            }

            if (image != null) {
                g2.drawImage(image, 0, 0, null);
            }

            //Draw he rectangle to select the instances
            if (selsource != null && seltarget != null) {
                int x = selsource.x;
                int width = width = seltarget.x - selsource.x;

                int y = selsource.y;
                int height = seltarget.y - selsource.y;

                if (selsource.x > seltarget.x) {
                    x = seltarget.x;
                    width = selsource.x - seltarget.x;
                }

                if (selsource.y > seltarget.y) {
                    y = seltarget.y;
                    height = selsource.y - seltarget.y;
                }
                g2.setColor(selcolor);
                g2.drawRect(x, y, width, height);

                g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 0.45f));
                g2.fillRect(x, y, width, height);
            } else { //Draw the instance label                
                if (label != null && labelpos != null) {
                    g2.setFont(this.getFont());
                    java.awt.FontMetrics metrics = g2.getFontMetrics(g2.getFont());

                    //Getting the label size
                    int width = metrics.stringWidth(label);
                    int height = metrics.getAscent();

                    g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 0.75f));
                    g2.setPaint(java.awt.Color.WHITE);
                    g2.fillRect(labelpos.x - 2, labelpos.y - height, width + 4, height + 4);
                    g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0f));

                    g2.setColor(java.awt.Color.DARK_GRAY);
                    g2.drawRect(labelpos.x - 2, labelpos.y - height, width + 4, height + 4);

                    //Drawing the label
                    g2.drawString(label, labelpos.x, labelpos.y);
                }
            }

            //drawn the selection polygon
            if (selpolygon != null) {
                g2.setColor(selcolor);
                g2.drawPolygon(selpolygon);

                g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 0.45f));
                g2.fillPolygon(selpolygon);
            }
        }

        public void cleanImage() {
            image = null;
        }

        public void saveToPngImageFile(String filename) throws IOException {
            try {
                Dimension size = ((ProjectionModel) model).getSize();
                BufferedImage buffer = new BufferedImage(size.width + 10, size.height + 10,
                        BufferedImage.TYPE_INT_RGB);
                paint(buffer.getGraphics());
                ImageIO.write(buffer, "png", new File(filename));
            } catch (IOException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            }
        }

        public void setModel(ProjectionModel model) {
            colorscale = new ColorScalePanel(null);
            colorscale.setColorTable(model.getColorTable());
            colorscale.setPreferredSize(new Dimension(200, 12));
            removeAll();
            add(colorscale);

            colorscale.setBackground(getBackground());

            Dimension size = model.getSize();
            setPreferredSize(new Dimension(size.width * 2, size.height * 2));
            setSize(new Dimension(size.width * 2, size.height * 2));

            cleanImage();
            repaint();
        }

        public void setSelection(AbstractSelection selection) {
            this.selection = selection;
        }

        public void zoomIn() {
            if (model != null) {
                ((ProjectionModel) model).zoom(1.1f);

                //Change the size of the panel according to the projection
                Dimension size = ((ProjectionModel) model).getSize();
                setPreferredSize(new Dimension(size.width * 2, size.height * 2));
                setSize(new Dimension(size.width * 2, size.height * 2));

                model.notifyObservers();
            }
        }

        public void zoomOut() {
            if (model != null) {
                ((ProjectionModel) model).zoom(0.9091f);

                //Change the size of the panel according to the projection
                Dimension size = ((ProjectionModel) model).getSize();
                setPreferredSize(new Dimension(size.width * 2, size.height * 2));
                setSize(new Dimension(size.width * 2, size.height * 2));

                model.notifyObservers();
            }
        }

        public void adjustPanel() {
            float iniX = ((ProjectionInstance) model.getInstances().get(0)).getX();
            float iniY = ((ProjectionInstance) model.getInstances().get(0)).getY();
            float max_x = iniX, max_y = iniX;
            float min_x = iniY, min_y = iniY;
            int zero = 30;

            for (int i = 1; i < model.getInstances().size(); i++) {
                float x = ((ProjectionInstance) model.getInstances().get(i)).getX();
                if (max_x < x) {
                    max_x = x;
                } else if (min_x > x) {
                    min_x = x;
                }

                float y = ((ProjectionInstance) model.getInstances().get(i)).getY();
                if (max_y < y) {
                    max_y = y;
                } else if (min_y > y) {
                    min_y = y;
                }
            }

            for (AbstractInstance ai : model.getInstances()) {
                ProjectionInstance pi = (ProjectionInstance) ai;
                pi.setX(pi.getX() + zero - min_x);
                pi.setY(pi.getY() + zero - min_y);
            }

            Dimension d = this.getSize();
            d.width = (int) max_x + zero;
            d.height = (int) max_y + zero;
            setSize(d);
            setPreferredSize(d);

            model.notifyObservers();
        }

        public ArrayList<ProjectionInstance> getSelectedInstances(Polygon polygon) {
            ArrayList<ProjectionInstance> selected = new ArrayList<ProjectionInstance>();

            if (model != null) {
                selected = ((ProjectionModel) model).getInstancesByPosition(polygon);
            }

            return selected;
        }

        public ArrayList<ProjectionInstance> getSelectedInstances(Point source, Point target) {
            ArrayList<ProjectionInstance> selinstances = new ArrayList<ProjectionInstance>();

            if (model != null) {
                int x = Math.min(source.x, target.x);
                int width = Math.abs(source.x - target.x);

                int y = Math.min(source.y, target.y);
                int height = Math.abs(source.y - target.y);

                Rectangle rect = new Rectangle(x, y, width, height);
                selinstances = ((ProjectionModel) model).getInstancesByPosition(rect);
            }

            return selinstances;
        }

        @Override
        public void setBackground(Color bg) {
            super.setBackground(bg);

            if (this.colorscale != null) {
                this.colorscale.setBackground(bg);
            }
        }

        class MouseMotionListener extends MouseMotionAdapter {

            @Override
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                super.mouseMoved(evt);

                if (model != null) {
                    ProjectionInstance instance = ((ProjectionModel) model).getInstanceByPosition(evt.getPoint());

                    if (instance != null) {
                        //Show the instance label
                        label = instance.toString();

                        if (label.trim().length() > 0) {
                            if (label.length() > 100) {
                                label = label.substring(0, 96) + "...";
                            }

                            labelpos = evt.getPoint();
                            repaint();
                        }
                    } else {
                        //Clear the label
                        label = null;
                        labelpos = null;
                        repaint();
                    }
                }
            }

            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                if (selinstance != null) {
                    if (model.hasSelectedInstances()) {
                        float x = evt.getX() - selinstance.getX();
                        float y = evt.getY() - selinstance.getY();

                        for (AbstractInstance ai : model.getSelectedInstances()) {
                            ProjectionInstance pi = (ProjectionInstance) ai;
                            pi.setX(x + pi.getX());
                            pi.setY(y + pi.getY());
                        }

                        adjustPanel();
                    }
                } else if (selsource != null) {
                    seltarget = evt.getPoint();
                } else if (selpolygon != null) {
                    selpolygon.addPoint(evt.getX(), evt.getY());
                }

                repaint();
            }

        }

        class MouseClickedListener extends MouseAdapter {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                super.mouseClicked(evt);

                if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
                    if (model != null) {
                        ProjectionInstance instance = ((ProjectionModel) model).getInstanceByPosition(evt.getPoint());
                        if (instance != null) {
                            model.setSelectedInstance(instance);
                            model.notifyObservers();
                        }
                    }
                }
            }

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                super.mousePressed(evt);

                if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
                    if (model != null) {
                        ProjectionInstance instance = ((ProjectionModel) model).getInstanceByPosition(evt.getPoint());

                        if (instance != null) {
                            if (model.getSelectedInstances().contains(instance)) {
                                selinstance = instance;
                            }
                        } else {
                            selsource = evt.getPoint();
                        }
                    }
                } else if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
                    selpolygon = new java.awt.Polygon();
                    selpolygon.addPoint(evt.getX(), evt.getY());
                }
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                super.mouseReleased(evt);

                if (model != null) {
                    if ((selsource != null && seltarget != null) || selpolygon != null) {
                        ArrayList<ProjectionInstance> instances = null;

                        if (selpolygon != null) {
                            instances = getSelectedInstances(selpolygon);
                        } else {
                            instances = getSelectedInstances(selsource, seltarget);
                        }

                        if (instances != null) {



                            if (selection != null) {
                                selection.selected(new ArrayList<AbstractInstance>(instances));
                            }
                        }
                    }
                }

                selpolygon = null;
                selinstance = null;
                selsource = null;
                seltarget = null;
            }

        }

        private ProjectionInstance selinstance;
        private Polygon selpolygon;
        private Point selsource;
        private Point seltarget;
        private Color selcolor;
        private String label;
        private Point labelpos;
        private BufferedImage image;
        private ColorScalePanel colorscale;
        private AbstractSelection selection;
    }

    public static void main(String[] args) {
        //showing the frame
        IterativeSampleProjectionFrame frame = new IterativeSampleProjectionFrame();
        frame.setSize(600, 600);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setVisible(true);
    }

    private AbstractMatrix sampleproj;
    private AbstractMatrix matrix;
    private AbstractMatrix samplematrix;
    private ViewPanel view;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton finishButton;
    private javax.swing.JButton initButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveButton1;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOutButton;
    // End of variables declaration//GEN-END:variables
}
