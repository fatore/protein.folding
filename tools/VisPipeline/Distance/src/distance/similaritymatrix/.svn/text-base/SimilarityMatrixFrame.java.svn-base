/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SimilarityMatrixFrame.java
 *
 * Created on 07/07/2009, 12:34:59
 */
package distance.similaritymatrix;

import distance.DistanceMatrixReaderComp;
import distance.dissimilarity.DissimilarityFactory.DissimilarityType;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionAdapter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import visualizationbasics.color.ColorScalePanel;
import visualizationbasics.coordination.IdentityCoordinator;
import visualizationbasics.model.AbstractInstance;

/**
 *
 * @author Fernando Vieira Paulovich
 */
public class SimilarityMatrixFrame extends javax.swing.JFrame implements Observer {

    /** Creates new form SimilarityMatrixFrame */
    public SimilarityMatrixFrame() {
        this.view = new SimilarityMatrixPanel();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        toolBar = new javax.swing.JToolBar();
        zoomInButton = new javax.swing.JButton();
        zoomOutButton = new javax.swing.JButton();
        similarityMatrixPanel = new javax.swing.JPanel();
        similarityScrollPane = new javax.swing.JScrollPane(this.view);
        colorScalePanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Similarity Matrix View");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_END);

        toolBar.setRollover(true);

        zoomInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/ZoomIn16.gif"))); // NOI18N
        zoomInButton.setToolTipText("Zoom in");
        zoomInButton.setFocusable(false);
        zoomInButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomInButton.setMaximumSize(new java.awt.Dimension(29, 27));
        zoomInButton.setMinimumSize(new java.awt.Dimension(29, 27));
        zoomInButton.setPreferredSize(new java.awt.Dimension(29, 27));
        zoomInButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });
        toolBar.add(zoomInButton);

        zoomOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/ZoomOut16.gif"))); // NOI18N
        zoomOutButton.setToolTipText("Zoom out");
        zoomOutButton.setFocusable(false);
        zoomOutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomOutButton.setMaximumSize(new java.awt.Dimension(29, 27));
        zoomOutButton.setMinimumSize(new java.awt.Dimension(29, 27));
        zoomOutButton.setPreferredSize(new java.awt.Dimension(29, 27));
        zoomOutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });
        toolBar.add(zoomOutButton);

        getContentPane().add(toolBar, java.awt.BorderLayout.NORTH);

        similarityMatrixPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        similarityMatrixPanel.setLayout(new java.awt.BorderLayout());

        similarityScrollPane.setBorder(null);
        similarityMatrixPanel.add(similarityScrollPane, java.awt.BorderLayout.CENTER);

        colorScalePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        similarityMatrixPanel.add(colorScalePanel, java.awt.BorderLayout.NORTH);

        getContentPane().add(similarityMatrixPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
}//GEN-LAST:event_closeButtonActionPerformed

    private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
        if (view != null) {
            view.zoomIn();
        }
}//GEN-LAST:event_zoomInButtonActionPerformed

    private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
        if (view != null) {
            view.zoomOut();
        }
}//GEN-LAST:event_zoomOutButtonActionPerformed

    public void display(SimilarityMatrixModel model) {
        this.model = model;
        model.addObserver(this);

        this.view.setPreferredSize(new Dimension(model.getSize().width, model.getSize().height));
        this.view.setSize(new Dimension(model.getSize().width, model.getSize().height));

        ColorScalePanel csp = new ColorScalePanel(null);
        csp.setColorTable(model.getColorTable());
        csp.setPreferredSize(new Dimension(200, 12));
        csp.setBackground(Color.WHITE);
        this.colorScalePanel.add(csp);
        this.colorScalePanel.setBackground(Color.WHITE);

        this.setPreferredSize(new Dimension(600, 630));
        this.setSize(new Dimension(600, 630));
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    @Override
    public void update(Observable o, Object arg) {
        if (model != null) {
            view.repaint();
        }
    }

    public IdentityCoordinator getCoordinator() {
        return coordinator;
    }

    public void setCoordinator(IdentityCoordinator coordinator) {
        this.coordinator = coordinator;

        if (coordinator != null) {
            coordinator.addModel(model);
        }
    }

    class SimilarityMatrixPanel extends JPanel {

        public SimilarityMatrixPanel() {
            this.setBackground(Color.WHITE);

            this.addMouseMotionListener(new MouseMotionListener());
            this.addMouseListener(new MouseClickedListener());
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            model.draw((Graphics2D) g);

            Graphics2D g2 = (Graphics2D) g;

            //Draw he rectangle to select the points
            if (source != null && target != null) {
                int x = Math.min(source.x, target.x);
                int width = Math.abs(target.x - source.x);
                int y = Math.min(source.y, target.y);
                int height = Math.abs(target.y - source.y);

                g2.setColor(color);
                g2.drawRect(x, y, width, height);

                g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 0.45f));
                g2.setPaint(color);
                g2.fill(new java.awt.Rectangle(x, y, width, height));
            } else {
                //Draw the vertex tool tip
                if (label != null && labelpos != null) {
                    //Getting the font information
                    g2.setFont(this.getFont());
                    java.awt.FontMetrics metrics = g2.getFontMetrics(g2.getFont());

                    //Getting the label size
                    int width = metrics.stringWidth(label);
                    int height = metrics.getAscent();

                    g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 0.75f));
                    g2.setPaint(java.awt.Color.WHITE);
                    g2.fill(new java.awt.Rectangle(labelpos.x - 2,
                            labelpos.y - height, width + 4, height + 4));
                    g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, 1.0f));

                    g2.setColor(java.awt.Color.DARK_GRAY);
                    g2.drawRect(labelpos.x - 2, labelpos.y - height, width + 4, height + 4);

                    //Drawing the label
                    g2.drawString(label, labelpos.x, labelpos.y);
                }
            }
        }

        public void zoomIn() {
            if (model != null) {
                model.setZoomFactor(model.getZoomFactor() * 1.1f);

                //Change the size of the panel according to the projection
                setPreferredSize(new Dimension(model.getSize().width, model.getSize().height));
                setSize(new Dimension(model.getSize().width, model.getSize().height));

                model.notifyObservers();
            }
        }

        public void zoomOut() {
            if (model != null) {
                model.setZoomFactor(model.getZoomFactor() * 0.9091f);

                //Change the size of the panel according to the projection
                setPreferredSize(new Dimension(model.getSize().width, model.getSize().height));
                setSize(new Dimension(model.getSize().width, model.getSize().height));

                model.notifyObservers();
            }
        }

        class MouseMotionListener extends MouseMotionAdapter {

            @Override
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                super.mouseMoved(evt);

                if (model != null) {
                    ArrayList<SimilarityMatrixInstance> instances = model.getInstancesByPosition(evt.getPoint());

                    if (instances.size() > 0) {
                        label = "";

                        for (int i = 0; i < instances.size(); i++) {
                            label += instances.get(i).toString();

                            if (i < instances.size() - 1) {
                                label += " <> ";
                            }
                        }

                        if (label.trim().length() > 0) {
                            if (label.length() > 100) {
                                label = label.substring(0, 96) + "...";
                            }
                            labelpos = evt.getPoint();
                            repaint();
                        }
                    } else {
                        //Clear the label
                        label = null;
                        labelpos = null;
                        repaint();
                    }
                }
            }

            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                if (source != null) {
                    target = evt.getPoint();
                }

                repaint();
            }
        }

        class MouseClickedListener extends MouseAdapter {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                super.mouseClicked(evt);

                if (model != null) {
                    if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
                        model.cleanSelectedInstances();
                    } else {
                        ArrayList<SimilarityMatrixInstance> instances = model.getInstancesByPosition(evt.getPoint());
                        model.setSelectedInstances(new ArrayList<AbstractInstance>(instances));
                    }
                }
            }

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                super.mousePressed(evt);

                if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
                    if (model != null) {
                        source = evt.getPoint();
                    }
                }
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                super.mouseReleased(evt);

                if (model != null) {
                    if (source != null && target != null) {
                        Rectangle rect = new Rectangle();
                        rect.x = Math.min(source.x, target.x);
                        rect.y = Math.min(source.y, target.y);
                        rect.width = Math.abs(source.x - target.x);
                        rect.height = Math.abs(source.y - target.y);

                        ArrayList<SimilarityMatrixInstance> instances = model.getInstancesByPosition(rect);
                        model.setSelectedInstances(new ArrayList<AbstractInstance>(instances));

                        if (coordinator != null) {
                            coordinator.coordinate(new ArrayList<AbstractInstance>(instances), null);
                        }
                    }
                }

                source = null;
                target = null;
                repaint();
            }
        }
        private Point source;
        private Point target;
        private Color color = Color.RED;
        private String label;
        private Point labelpos;
    }

    public static void main(String[] args) {
        try {
            DistanceMatrixReaderComp dmrc = new DistanceMatrixReaderComp();
            dmrc.setFilename("D:/My Dropbox/artigos/Chu/PexSensor/dados/eletrodopuro-imag.data-CAPACITANCE.data.dmat");
            dmrc.execute();

            SimilarityMatrixModelComp smmc = new SimilarityMatrixModelComp();
            smmc.input(dmrc.output());
            smmc.setDissimilarityType(DissimilarityType.COSINE_BASED);
            smmc.execute();
            SimilarityMatrixModel model = smmc.output();

            SimilarityMatrixFrameComp smfc = new SimilarityMatrixFrameComp();
            smfc.input(model);
            smfc.execute();
        } catch (IOException ex) {
            Logger.getLogger(SimilarityMatrixFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private SimilarityMatrixPanel view;
    private SimilarityMatrixModel model;
    private IdentityCoordinator coordinator;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel colorScalePanel;
    private javax.swing.JPanel similarityMatrixPanel;
    private javax.swing.JScrollPane similarityScrollPane;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOutButton;
    // End of variables declaration//GEN-END:variables
}
